/* A Bison parser, made by GNU Bison 3.0.4.  */

/* Bison implementation for Yacc-like parsers in C

   Copyright (C) 1984, 1989-1990, 2000-2015 Free Software Foundation, Inc.

   This program is free software: you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation, either version 3 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

   You should have received a copy of the GNU General Public License
   along with this program.  If not, see <http://www.gnu.org/licenses/>.  */

/* As a special exception, you may create a larger work that contains
   part or all of the Bison parser skeleton and distribute that work
   under terms of your choice, so long as that work isn't itself a
   parser generator using the skeleton or a modified version thereof
   as a parser skeleton.  Alternatively, if you modify or redistribute
   the parser skeleton itself, you may (at your option) remove this
   special exception, which will cause the skeleton and the resulting
   Bison output files to be licensed under the GNU General Public
   License without this special exception.

   This special exception was added by the Free Software Foundation in
   version 2.2 of Bison.  */

/* C LALR(1) parser skeleton written by Richard Stallman, by
   simplifying the original so-called "semantic" parser.  */

/* All symbols defined below should begin with yy or YY, to avoid
   infringing on user name space.  This should be done even for local
   variables, as they might otherwise be expanded by user macros.
   There are some unavoidable exceptions within include files to
   define necessary library symbols; they are noted "INFRINGES ON
   USER NAME SPACE" below.  */

/* Identify Bison output.  */
#define YYBISON 1

/* Bison version.  */
#define YYBISON_VERSION "3.0.4"

/* Skeleton name.  */
#define YYSKELETON_NAME "yacc.c"

/* Pure parsers.  */
#define YYPURE 1

/* Push parsers.  */
#define YYPUSH 0

/* Pull parsers.  */
#define YYPULL 1


/* Substitute the variable and function names.  */
#define yyparse         base_yyparse
#define yylex           base_yylex
#define yyerror         base_yyerror
#define yydebug         base_yydebug
#define yynerrs         base_yynerrs


/* Copy the first part of user declarations.  */
#line 1 "third_party/libpg_query/grammar/grammar.y.tmp" /* yacc.c:339  */

#line 1 "third_party/libpg_query/grammar/grammar.hpp"
/*#define YYDEBUG 1*/
/*-------------------------------------------------------------------------
 *
 * gram.y
 *	  POSTGRESQL BISON rules/actions
 *
 * Portions Copyright (c) 1996-2017, PostgreSQL Global Development PGGroup
 * Portions Copyright (c) 1994, Regents of the University of California
 *
 *
 * IDENTIFICATION
 *	  src/backend/parser/gram.y
 *
 * HISTORY
 *	  AUTHOR			DATE			MAJOR EVENT
 *	  Andrew Yu			Sept, 1994		POSTQUEL to SQL conversion
 *	  Andrew Yu			Oct, 1994		lispy code conversion
 *
 * NOTES
 *	  CAPITALS are used to represent terminal symbols.
 *	  non-capitals are used to represent non-terminals.
 *
 *	  In general, nothing in this file should initiate database accesses
 *	  nor depend on changeable state (such as SET variables).  If you do
 *	  database accesses, your code will fail when we have aborted the
 *	  current transaction and are just parsing commands to find the next
 *	  ROLLBACK or COMMIT.  If you make use of SET variables, then you
 *	  will do the wrong thing in multi-query strings like this:
 *			SET constraint_exclusion TO off; SELECT * FROM foo;
 *	  because the entire string is parsed by gram.y before the SET gets
 *	  executed.  Anything that depends on the database or changeable state
 *	  should be handled during parse analysis so that it happens at the
 *	  right time not the wrong time.
 *
 * WARNINGS
 *	  If you use a list, make sure the datum is a node so that the printing
 *	  routines work.
 *
 *	  Sometimes we assign constants to makeStrings. Make sure we don't free
 *	  those.
 *
 *-------------------------------------------------------------------------
 */
#include "pg_functions.hpp"
#include <string.h>

#include <ctype.h>
#include <limits.h>

#include "nodes/makefuncs.hpp"
#include "nodes/nodeFuncs.hpp"
#include "parser/gramparse.hpp"
#include "parser/parser.hpp"
#include "utils/datetime.hpp"

namespace duckdb_libpgquery {
#define DEFAULT_SCHEMA "main"

/*
 * Location tracking support --- simpler than bison's default, since we only
 * want to track the start position not the end position of each nonterminal.
 */
#define YYLLOC_DEFAULT(Current, Rhs, N) \
	do { \
		if ((N) > 0) \
			(Current) = (Rhs)[1]; \
		else \
			(Current) = (-1); \
	} while (0)

/*
 * The above macro assigns -1 (unknown) as the parse location of any
 * nonterminal that was reduced from an empty rule, or whose leftmost
 * component was reduced from an empty rule.  This is problematic
 * for nonterminals defined like
 *		OptFooList: / * EMPTY * / { ... } | OptFooList Foo { ... } ;
 * because we'll set -1 as the location during the first reduction and then
 * copy it during each subsequent reduction, leaving us with -1 for the
 * location even when the list is not empty.  To fix that, do this in the
 * action for the nonempty rule(s):
 *		if (@$ < 0) @$ = @2;
 * (Although we have many nonterminals that follow this pattern, we only
 * bother with fixing @$ like this when the nonterminal's parse location
 * is actually referenced in some rule.)
 *
 * A cleaner answer would be to make YYLLOC_DEFAULT scan all the Rhs
 * locations until it's found one that's not -1.  Then we'd get a correct
 * location for any nonterminal that isn't entirely empty.  But this way
 * would add overhead to every rule reduction, and so far there's not been
 * a compelling reason to pay that overhead.
 */

/*
 * Bison doesn't allocate anything that needs to live across parser calls,
 * so we can easily have it use palloc instead of malloc.  This prevents
 * memory leaks if we error out during parsing.  Note this only works with
 * bison >= 2.0.  However, in bison 1.875 the default is to use alloca()
 * if possible, so there's not really much problem anyhow, at least if
 * you're building with gcc.
 */
#define YYMALLOC palloc
#define YYFREE   pfree
#define YYINITDEPTH 1000

/* yields an integer bitmask of these flags: */
#define CAS_NOT_DEFERRABLE			0x01
#define CAS_DEFERRABLE				0x02
#define CAS_INITIALLY_IMMEDIATE		0x04
#define CAS_INITIALLY_DEFERRED		0x08
#define CAS_NOT_VALID				0x10
#define CAS_NO_INHERIT				0x20


#define parser_yyerror(msg)  scanner_yyerror(msg, yyscanner)
#define parser_errposition(pos)  scanner_errposition(pos, yyscanner)

static void base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner,
						 const char *msg);
static PGRawStmt *makeRawStmt(PGNode *stmt, int stmt_location);
static void updateRawStmtEnd(PGRawStmt *rs, int end_location);
static PGNode *makeColumnRef(char *colname, PGList *indirection,
						   int location, core_yyscan_t yyscanner);
static PGNode *makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location);
static PGNode *makeStringConst(char *str, int location);
static PGNode *makeStringConstCast(char *str, int location, PGTypeName *tpname);
static PGNode *makeIntervalNode(char *str, int location, PGList *typmods);
static PGNode *makeIntervalNode(int val, int location, PGList *typmods);
static PGNode *makeIntervalNode(PGNode *arg, int location, PGList *typmods);
static PGNode *makeSampleSize(PGValue *sample_size, bool is_percentage);
static PGNode *makeSampleOptions(PGNode *sample_size, char *method, int seed, int location);
static PGNode *makeIntConst(int val, int location);
static PGNode *makeFloatConst(char *str, int location);
static PGNode *makeBitStringConst(char *str, int location);
static PGNode *makeNullAConst(int location);
static PGNode *makeAConst(PGValue *v, int location);
static PGNode *makeBoolAConst(bool state, int location);
static PGNode *makeParamRef(int number, int location);
static void check_qualified_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_func_name(PGList *names, core_yyscan_t yyscanner);
static PGList *check_indirection(PGList *indirection, core_yyscan_t yyscanner);
static void insertSelectOptions(PGSelectStmt *stmt,
								PGList *sortClause, PGList *lockingClause,
								PGNode *limitOffset, PGNode *limitCount,
								PGWithClause *withClause,
								core_yyscan_t yyscanner);
static PGNode *makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg);
static PGNode *doNegate(PGNode *n, int location);
static void doNegateFloat(PGValue *v);
static PGNode *makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location);
static PGNode *makeNotExpr(PGNode *expr, int location);
static PGNode *makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod,
								  int location);
static void SplitColQualList(PGList *qualList,
							 PGList **constraintList, PGCollateClause **collClause,
							 core_yyscan_t yyscanner);
static void processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner);
static PGNode *makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query);


#line 237 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:339  */

# ifndef YY_NULLPTR
#  if defined __cplusplus && 201103L <= __cplusplus
#   define YY_NULLPTR nullptr
#  else
#   define YY_NULLPTR 0
#  endif
# endif

/* Enabling verbose error messages.  */
#ifdef YYERROR_VERBOSE
# undef YYERROR_VERBOSE
# define YYERROR_VERBOSE 1
#else
# define YYERROR_VERBOSE 0
#endif

/* In a future release of Bison, this section will be replaced
   by #include "grammar_out.hpp".  */
#ifndef YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
# define YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED
/* Debug traces.  */
#ifndef YYDEBUG
# define YYDEBUG 0
#endif
#if YYDEBUG
extern int base_yydebug;
#endif

/* Token type.  */
#ifndef YYTOKENTYPE
# define YYTOKENTYPE
  enum yytokentype
  {
    IDENT = 258,
    FCONST = 259,
    SCONST = 260,
    BCONST = 261,
    XCONST = 262,
    Op = 263,
    ICONST = 264,
    PARAM = 265,
    TYPECAST = 266,
    DOT_DOT = 267,
    COLON_EQUALS = 268,
    EQUALS_GREATER = 269,
    LAMBDA_ARROW = 270,
    LEFT_ARROW = 271,
    LESS_EQUALS = 272,
    GREATER_EQUALS = 273,
    NOT_EQUALS = 274,
    ABORT_P = 275,
    ABSOLUTE_P = 276,
    ACCESS = 277,
    ACTION = 278,
    ADD_P = 279,
    ADMIN = 280,
    AFTER = 281,
    AGGREGATE = 282,
    ALL = 283,
    ALSO = 284,
    ALTER = 285,
    ALWAYS = 286,
    ANALYSE = 287,
    ANALYZE = 288,
    AND = 289,
    ANY = 290,
    ARRAY = 291,
    AS = 292,
    ASC_P = 293,
    ASSERTION = 294,
    ASSIGNMENT = 295,
    ASYMMETRIC = 296,
    AT = 297,
    ATTACH = 298,
    ATTRIBUTE = 299,
    AUTHORIZATION = 300,
    BACKWARD = 301,
    BEFORE = 302,
    BEGIN_P = 303,
    BETWEEN = 304,
    BIGINT = 305,
    BINARY = 306,
    BIT = 307,
    BOOLEAN_P = 308,
    BOTH = 309,
    BY = 310,
    CACHE = 311,
    CALL_P = 312,
    CALLED = 313,
    CASCADE = 314,
    CASCADED = 315,
    CASE = 316,
    CAST = 317,
    CATALOG_P = 318,
    CHAIN = 319,
    CHAR_P = 320,
    CHARACTER = 321,
    CHARACTERISTICS = 322,
    CHECK_P = 323,
    CHECKPOINT = 324,
    CLASS = 325,
    CLOSE = 326,
    CLUSTER = 327,
    COALESCE = 328,
    COLLATE = 329,
    COLLATION = 330,
    COLUMN = 331,
    COLUMNS = 332,
    COMMENT = 333,
    COMMENTS = 334,
    COMMIT = 335,
    COMMITTED = 336,
    CONCURRENTLY = 337,
    CONFIGURATION = 338,
    CONFLICT = 339,
    CONNECTION = 340,
    CONSTRAINT = 341,
    CONSTRAINTS = 342,
    CONTENT_P = 343,
    CONTINUE_P = 344,
    CONVERSION_P = 345,
    COPY = 346,
    COST = 347,
    CREATE_P = 348,
    CROSS = 349,
    CSV = 350,
    CUBE = 351,
    CURRENT_P = 352,
    CURRENT_CATALOG = 353,
    CURRENT_DATE = 354,
    CURRENT_ROLE = 355,
    CURRENT_SCHEMA = 356,
    CURRENT_TIME = 357,
    CURRENT_TIMESTAMP = 358,
    CURRENT_USER = 359,
    CURSOR = 360,
    CYCLE = 361,
    DATA_P = 362,
    DATABASE = 363,
    DAY_P = 364,
    DAYS_P = 365,
    DEALLOCATE = 366,
    DEC = 367,
    DECIMAL_P = 368,
    DECLARE = 369,
    DEFAULT = 370,
    DEFAULTS = 371,
    DEFERRABLE = 372,
    DEFERRED = 373,
    DEFINER = 374,
    DELETE_P = 375,
    DELIMITER = 376,
    DELIMITERS = 377,
    DEPENDS = 378,
    DESC_P = 379,
    DESCRIBE = 380,
    DETACH = 381,
    DICTIONARY = 382,
    DISABLE_P = 383,
    DISCARD = 384,
    DISTINCT = 385,
    DO = 386,
    DOCUMENT_P = 387,
    DOMAIN_P = 388,
    DOUBLE_P = 389,
    DROP = 390,
    EACH = 391,
    EDGE = 392,
    ELSE = 393,
    ENABLE_P = 394,
    ENCODING = 395,
    ENCRYPTED = 396,
    END_P = 397,
    ENUM_P = 398,
    ESCAPE = 399,
    EVENT = 400,
    EXCEPT = 401,
    EXCLUDE = 402,
    EXCLUDING = 403,
    EXCLUSIVE = 404,
    EXECUTE = 405,
    EXISTS = 406,
    EXPLAIN = 407,
    EXPORT_P = 408,
    EXTENSION = 409,
    EXTERNAL = 410,
    EXTRACT = 411,
    FALSE_P = 412,
    FAMILY = 413,
    FETCH = 414,
    FILTER = 415,
    FIRST_P = 416,
    FLOAT_P = 417,
    FOLLOWING = 418,
    FOR = 419,
    FORCE = 420,
    FOREIGN = 421,
    FORWARD = 422,
    FREEZE = 423,
    FROM = 424,
    FULL = 425,
    FUNCTION = 426,
    FUNCTIONS = 427,
    GENERATED = 428,
    GLOB = 429,
    GLOBAL = 430,
    GRANT = 431,
    GRANTED = 432,
    GROUP_P = 433,
    GROUPING = 434,
    HANDLER = 435,
    HAVING = 436,
    HEADER_P = 437,
    HOLD = 438,
    HOUR_P = 439,
    HOURS_P = 440,
    IDENTITY_P = 441,
    IF_P = 442,
    ILIKE = 443,
    IMMEDIATE = 444,
    IMMUTABLE = 445,
    IMPLICIT_P = 446,
    IMPORT_P = 447,
    IN_P = 448,
    INCLUDING = 449,
    INCREMENT = 450,
    INDEX = 451,
    INDEXES = 452,
    INHERIT = 453,
    INHERITS = 454,
    INITIALLY = 455,
    INLINE_P = 456,
    INNER_P = 457,
    INOUT = 458,
    INPUT_P = 459,
    INSENSITIVE = 460,
    INSERT = 461,
    INSTEAD = 462,
    INT_P = 463,
    INTEGER = 464,
    INTERSECT = 465,
    INTERVAL = 466,
    INTO = 467,
    INVOKER = 468,
    IS = 469,
    ISNULL = 470,
    ISOLATION = 471,
    JOIN = 472,
    KEY = 473,
    LABEL = 474,
    LANGUAGE = 475,
    LARGE_P = 476,
    LAST_P = 477,
    LATERAL_P = 478,
    LEADING = 479,
    LEAKPROOF = 480,
    LEFT = 481,
    LEVEL = 482,
    LIKE = 483,
    LIMIT = 484,
    LISTEN = 485,
    LOAD = 486,
    LOCAL = 487,
    LOCALTIME = 488,
    LOCALTIMESTAMP = 489,
    LOCATION = 490,
    LOCK_P = 491,
    LOCKED = 492,
    LOGGED = 493,
    MACRO = 494,
    MAP = 495,
    MAPPING = 496,
    MATCH = 497,
    MATERIALIZED = 498,
    MAXVALUE = 499,
    METHOD = 500,
    MICROSECOND_P = 501,
    MICROSECONDS_P = 502,
    MILLISECOND_P = 503,
    MILLISECONDS_P = 504,
    MINUTE_P = 505,
    MINUTES_P = 506,
    MINVALUE = 507,
    MODE = 508,
    MONTH_P = 509,
    MONTHS_P = 510,
    MOVE = 511,
    NAME_P = 512,
    NAMES = 513,
    NATIONAL = 514,
    NATURAL = 515,
    NCHAR = 516,
    NEW = 517,
    NEXT = 518,
    NO = 519,
    NONE = 520,
    NOT = 521,
    NOTHING = 522,
    NOTIFY = 523,
    NOTNULL = 524,
    NOWAIT = 525,
    NULL_P = 526,
    NULLIF = 527,
    NULLS_P = 528,
    NUMERIC = 529,
    OBJECT_P = 530,
    OF = 531,
    OFF = 532,
    OFFSET = 533,
    OIDS = 534,
    OLD = 535,
    ON = 536,
    ONLY = 537,
    OPERATOR = 538,
    OPTION = 539,
    OPTIONS = 540,
    OR = 541,
    ORDER = 542,
    ORDINALITY = 543,
    OUT_P = 544,
    OUTER_P = 545,
    OVER = 546,
    OVERLAPS = 547,
    OVERLAY = 548,
    OVERRIDING = 549,
    OWNED = 550,
    OWNER = 551,
    PARALLEL = 552,
    PARSER = 553,
    PARTIAL = 554,
    PARTITION = 555,
    PASSING = 556,
    PASSWORD = 557,
    PERCENT = 558,
    PLACING = 559,
    PLANS = 560,
    POLICY = 561,
    POSITION = 562,
    PRAGMA_P = 563,
    PRECEDING = 564,
    PRECISION = 565,
    PREPARE = 566,
    PREPARED = 567,
    PRESERVE = 568,
    PRIMARY = 569,
    PRIOR = 570,
    PRIVILEGES = 571,
    PROCEDURAL = 572,
    PROCEDURE = 573,
    PROGRAM = 574,
    PUBLICATION = 575,
    QUOTE = 576,
    RANGE = 577,
    READ_P = 578,
    REAL = 579,
    REASSIGN = 580,
    RECHECK = 581,
    RECURSIVE = 582,
    REF = 583,
    REFERENCES = 584,
    REFERENCING = 585,
    REFRESH = 586,
    REINDEX = 587,
    RELATIVE_P = 588,
    RELEASE = 589,
    RENAME = 590,
    REPEATABLE = 591,
    REPLACE = 592,
    REPLICA = 593,
    RESET = 594,
    RESTART = 595,
    RESTRICT = 596,
    RETURNING = 597,
    RETURNS = 598,
    REVOKE = 599,
    RIGHT = 600,
    ROLE = 601,
    ROLLBACK = 602,
    ROLLUP = 603,
    ROW = 604,
    ROWS = 605,
    RULE = 606,
    SAMPLE = 607,
    SAVEPOINT = 608,
    SCHEMA = 609,
    SCHEMAS = 610,
    SCROLL = 611,
    SEARCH = 612,
    SECOND_P = 613,
    SECONDS_P = 614,
    SECURITY = 615,
    SELECT = 616,
    SEQUENCE = 617,
    SEQUENCES = 618,
    SERIALIZABLE = 619,
    SERVER = 620,
    SESSION = 621,
    SESSION_USER = 622,
    SET = 623,
    SETOF = 624,
    SETS = 625,
    SHARE = 626,
    SHOW = 627,
    SIMILAR = 628,
    SIMPLE = 629,
    SKIP = 630,
    SMALLINT = 631,
    SNAPSHOT = 632,
    SOME = 633,
    SQL_P = 634,
    STABLE = 635,
    STANDALONE_P = 636,
    START = 637,
    STATEMENT = 638,
    STATISTICS = 639,
    STDIN = 640,
    STDOUT = 641,
    STORAGE = 642,
    STRICT_P = 643,
    STRIP_P = 644,
    STRUCT = 645,
    SUBSCRIPTION = 646,
    SUBSTRING = 647,
    SYMMETRIC = 648,
    SYSID = 649,
    SYSTEM_P = 650,
    TABLE = 651,
    TABLES = 652,
    TABLESAMPLE = 653,
    TABLESPACE = 654,
    TEMP = 655,
    TEMPLATE = 656,
    TEMPORARY = 657,
    TEXT_P = 658,
    THEN = 659,
    TIME = 660,
    TIMESTAMP = 661,
    TO = 662,
    TRAILING = 663,
    TRANSACTION = 664,
    TRANSFORM = 665,
    TREAT = 666,
    TRIGGER = 667,
    TRIM = 668,
    TRUE_P = 669,
    TRUNCATE = 670,
    TRUSTED = 671,
    TRY_CAST = 672,
    TYPE_P = 673,
    TYPES_P = 674,
    UNBOUNDED = 675,
    UNCOMMITTED = 676,
    UNENCRYPTED = 677,
    UNION = 678,
    UNIQUE = 679,
    UNKNOWN = 680,
    UNLISTEN = 681,
    UNLOGGED = 682,
    UNTIL = 683,
    UPDATE = 684,
    USER = 685,
    USING = 686,
    VACUUM = 687,
    VALID = 688,
    VALIDATE = 689,
    VALIDATOR = 690,
    VALUE_P = 691,
    VALUES = 692,
    VARCHAR = 693,
    VARIADIC = 694,
    VARYING = 695,
    VERBOSE = 696,
    VERSION_P = 697,
    VERTEX = 698,
    VIEW = 699,
    VIEWS = 700,
    VOLATILE = 701,
    WHEN = 702,
    WHERE = 703,
    WHITESPACE_P = 704,
    WINDOW = 705,
    WITH = 706,
    WITHIN = 707,
    WITHOUT = 708,
    WORK = 709,
    WRAPPER = 710,
    WRITE_P = 711,
    XML_P = 712,
    XMLATTRIBUTES = 713,
    XMLCONCAT = 714,
    XMLELEMENT = 715,
    XMLEXISTS = 716,
    XMLFOREST = 717,
    XMLNAMESPACES = 718,
    XMLPARSE = 719,
    XMLPI = 720,
    XMLROOT = 721,
    XMLSERIALIZE = 722,
    XMLTABLE = 723,
    YEAR_P = 724,
    YEARS_P = 725,
    YES_P = 726,
    ZONE = 727,
    NOT_LA = 728,
    NULLS_LA = 729,
    WITH_LA = 730,
    POSTFIXOP = 731,
    UMINUS = 732
  };
#endif

/* Value type.  */
#if ! defined YYSTYPE && ! defined YYSTYPE_IS_DECLARED

union YYSTYPE
{
#line 14 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:355  */

	core_YYSTYPE		core_yystype;
	/* these fields must match core_YYSTYPE: */
	int					ival;
	char				*str;
	const char			*keyword;
	const char          *conststr;

	char				chr;
	bool				boolean;
	PGJoinType			jtype;
	PGDropBehavior		dbehavior;
	PGOnCommitAction		oncommit;
	PGList				*list;
	PGNode				*node;
	PGValue				*value;
	PGObjectType			objtype;
	PGTypeName			*typnam;
	PGObjectWithArgs		*objwithargs;
	PGDefElem				*defelt;
	PGSortBy				*sortby;
	PGWindowDef			*windef;
	PGJoinExpr			*jexpr;
	PGIndexElem			*ielem;
	PGAlias				*alias;
	PGRangeVar			*range;
	PGIntoClause			*into;
	PGWithClause			*with;
	PGInferClause			*infer;
	PGOnConflictClause	*onconflict;
	PGAIndices			*aind;
	PGResTarget			*target;
	PGInsertStmt			*istmt;
	PGVariableSetStmt		*vsetstmt;
	PGOverridingKind       override;
	PGSortByDir            sortorder;
	PGSortByNulls          nullorder;
	PGLockClauseStrength lockstrength;
	PGLockWaitPolicy lockwaitpolicy;
	PGSubLinkType subquerytype;
	PGViewCheckOption viewcheckoption;

#line 798 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:355  */
};

typedef union YYSTYPE YYSTYPE;
# define YYSTYPE_IS_TRIVIAL 1
# define YYSTYPE_IS_DECLARED 1
#endif

/* Location type.  */
#if ! defined YYLTYPE && ! defined YYLTYPE_IS_DECLARED
typedef struct YYLTYPE YYLTYPE;
struct YYLTYPE
{
  int first_line;
  int first_column;
  int last_line;
  int last_column;
};
# define YYLTYPE_IS_DECLARED 1
# define YYLTYPE_IS_TRIVIAL 1
#endif



int base_yyparse (core_yyscan_t yyscanner);

#endif /* !YY_BASE_YY_THIRD_PARTY_LIBPG_QUERY_GRAMMAR_GRAMMAR_OUT_HPP_INCLUDED  */

/* Copy the second part of user declarations.  */

#line 828 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:358  */

#ifdef short
# undef short
#endif

#ifdef YYTYPE_UINT8
typedef YYTYPE_UINT8 yytype_uint8;
#else
typedef unsigned char yytype_uint8;
#endif

#ifdef YYTYPE_INT8
typedef YYTYPE_INT8 yytype_int8;
#else
typedef signed char yytype_int8;
#endif

#ifdef YYTYPE_UINT16
typedef YYTYPE_UINT16 yytype_uint16;
#else
typedef unsigned short int yytype_uint16;
#endif

#ifdef YYTYPE_INT16
typedef YYTYPE_INT16 yytype_int16;
#else
typedef short int yytype_int16;
#endif

#ifndef YYSIZE_T
# ifdef __SIZE_TYPE__
#  define YYSIZE_T __SIZE_TYPE__
# elif defined size_t
#  define YYSIZE_T size_t
# elif ! defined YYSIZE_T
#  include <stddef.h> /* INFRINGES ON USER NAME SPACE */
#  define YYSIZE_T size_t
# else
#  define YYSIZE_T unsigned int
# endif
#endif

#define YYSIZE_MAXIMUM ((YYSIZE_T) -1)

#ifndef YY_
# if defined YYENABLE_NLS && YYENABLE_NLS
#  if ENABLE_NLS
#   include <libintl.h> /* INFRINGES ON USER NAME SPACE */
#   define YY_(Msgid) dgettext ("bison-runtime", Msgid)
#  endif
# endif
# ifndef YY_
#  define YY_(Msgid) Msgid
# endif
#endif

#ifndef YY_ATTRIBUTE
# if (defined __GNUC__                                               \
      && (2 < __GNUC__ || (__GNUC__ == 2 && 96 <= __GNUC_MINOR__)))  \
     || defined __SUNPRO_C && 0x5110 <= __SUNPRO_C
#  define YY_ATTRIBUTE(Spec) __attribute__(Spec)
# else
#  define YY_ATTRIBUTE(Spec) /* empty */
# endif
#endif

#ifndef YY_ATTRIBUTE_PURE
# define YY_ATTRIBUTE_PURE   YY_ATTRIBUTE ((__pure__))
#endif

#ifndef YY_ATTRIBUTE_UNUSED
# define YY_ATTRIBUTE_UNUSED YY_ATTRIBUTE ((__unused__))
#endif

#if !defined _Noreturn \
     && (!defined __STDC_VERSION__ || __STDC_VERSION__ < 201112)
# if defined _MSC_VER && 1200 <= _MSC_VER
#  define _Noreturn __declspec (noreturn)
# else
#  define _Noreturn YY_ATTRIBUTE ((__noreturn__))
# endif
#endif

/* Suppress unused-variable warnings by "using" E.  */
#if ! defined lint || defined __GNUC__
# define YYUSE(E) ((void) (E))
#else
# define YYUSE(E) /* empty */
#endif

#if defined __GNUC__ && 407 <= __GNUC__ * 100 + __GNUC_MINOR__
/* Suppress an incorrect diagnostic about yylval being uninitialized.  */
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN \
    _Pragma ("GCC diagnostic push") \
    _Pragma ("GCC diagnostic ignored \"-Wuninitialized\"")\
    _Pragma ("GCC diagnostic ignored \"-Wmaybe-uninitialized\"")
# define YY_IGNORE_MAYBE_UNINITIALIZED_END \
    _Pragma ("GCC diagnostic pop")
#else
# define YY_INITIAL_VALUE(Value) Value
#endif
#ifndef YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
# define YY_IGNORE_MAYBE_UNINITIALIZED_END
#endif
#ifndef YY_INITIAL_VALUE
# define YY_INITIAL_VALUE(Value) /* Nothing. */
#endif


#if ! defined yyoverflow || YYERROR_VERBOSE

/* The parser invokes alloca or malloc; define the necessary symbols.  */

# ifdef YYSTACK_USE_ALLOCA
#  if YYSTACK_USE_ALLOCA
#   ifdef __GNUC__
#    define YYSTACK_ALLOC __builtin_alloca
#   elif defined __BUILTIN_VA_ARG_INCR
#    include <alloca.h> /* INFRINGES ON USER NAME SPACE */
#   elif defined _AIX
#    define YYSTACK_ALLOC __alloca
#   elif defined _MSC_VER
#    include <malloc.h> /* INFRINGES ON USER NAME SPACE */
#    define alloca _alloca
#   else
#    define YYSTACK_ALLOC alloca
#    if ! defined _ALLOCA_H && ! defined EXIT_SUCCESS
#     include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
      /* Use EXIT_SUCCESS as a witness for stdlib.h.  */
#     ifndef EXIT_SUCCESS
#      define EXIT_SUCCESS 0
#     endif
#    endif
#   endif
#  endif
# endif

# ifdef YYSTACK_ALLOC
   /* Pacify GCC's 'empty if-body' warning.  */
#  define YYSTACK_FREE(Ptr) do { /* empty */; } while (0)
#  ifndef YYSTACK_ALLOC_MAXIMUM
    /* The OS might guarantee only one guard page at the bottom of the stack,
       and a page size can be as small as 4096 bytes.  So we cannot safely
       invoke alloca (N) if N exceeds 4096.  Use a slightly smaller number
       to allow for a few compiler-allocated temporary stack slots.  */
#   define YYSTACK_ALLOC_MAXIMUM 4032 /* reasonable circa 2006 */
#  endif
# else
#  define YYSTACK_ALLOC YYMALLOC
#  define YYSTACK_FREE YYFREE
#  ifndef YYSTACK_ALLOC_MAXIMUM
#   define YYSTACK_ALLOC_MAXIMUM YYSIZE_MAXIMUM
#  endif
#  if (defined __cplusplus && ! defined EXIT_SUCCESS \
       && ! ((defined YYMALLOC || defined malloc) \
             && (defined YYFREE || defined free)))
#   include <stdlib.h> /* INFRINGES ON USER NAME SPACE */
#   ifndef EXIT_SUCCESS
#    define EXIT_SUCCESS 0
#   endif
#  endif
#  ifndef YYMALLOC
#   define YYMALLOC malloc
#   if ! defined malloc && ! defined EXIT_SUCCESS
void *malloc (YYSIZE_T); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
#  ifndef YYFREE
#   define YYFREE free
#   if ! defined free && ! defined EXIT_SUCCESS
void free (void *); /* INFRINGES ON USER NAME SPACE */
#   endif
#  endif
# endif
#endif /* ! defined yyoverflow || YYERROR_VERBOSE */


#if (! defined yyoverflow \
     && (! defined __cplusplus \
         || (defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL \
             && defined YYSTYPE_IS_TRIVIAL && YYSTYPE_IS_TRIVIAL)))

/* A type that is properly aligned for any stack member.  */
union yyalloc
{
  yytype_int16 yyss_alloc;
  YYSTYPE yyvs_alloc;
  YYLTYPE yyls_alloc;
};

/* The size of the maximum gap between one aligned stack and the next.  */
# define YYSTACK_GAP_MAXIMUM (sizeof (union yyalloc) - 1)

/* The size of an array large to enough to hold all stacks, each with
   N elements.  */
# define YYSTACK_BYTES(N) \
     ((N) * (sizeof (yytype_int16) + sizeof (YYSTYPE) + sizeof (YYLTYPE)) \
      + 2 * YYSTACK_GAP_MAXIMUM)

# define YYCOPY_NEEDED 1

/* Relocate STACK from its old location to the new one.  The
   local variables YYSIZE and YYSTACKSIZE give the old and new number of
   elements in the stack, and YYPTR gives the new location of the
   stack.  Advance YYPTR to a properly aligned location for the next
   stack.  */
# define YYSTACK_RELOCATE(Stack_alloc, Stack)                           \
    do                                                                  \
      {                                                                 \
        YYSIZE_T yynewbytes;                                            \
        YYCOPY (&yyptr->Stack_alloc, Stack, yysize);                    \
        Stack = &yyptr->Stack_alloc;                                    \
        yynewbytes = yystacksize * sizeof (*Stack) + YYSTACK_GAP_MAXIMUM; \
        yyptr += yynewbytes / sizeof (*yyptr);                          \
      }                                                                 \
    while (0)

#endif

#if defined YYCOPY_NEEDED && YYCOPY_NEEDED
/* Copy COUNT objects from SRC to DST.  The source and destination do
   not overlap.  */
# ifndef YYCOPY
#  if defined __GNUC__ && 1 < __GNUC__
#   define YYCOPY(Dst, Src, Count) \
      __builtin_memcpy (Dst, Src, (Count) * sizeof (*(Src)))
#  else
#   define YYCOPY(Dst, Src, Count)              \
      do                                        \
        {                                       \
          YYSIZE_T yyi;                         \
          for (yyi = 0; yyi < (Count); yyi++)   \
            (Dst)[yyi] = (Src)[yyi];            \
        }                                       \
      while (0)
#  endif
# endif
#endif /* !YYCOPY_NEEDED */

/* YYFINAL -- State number of the termination state.  */
#define YYFINAL  582
/* YYLAST -- Last index in YYTABLE.  */
#define YYLAST   50388

/* YYNTOKENS -- Number of terminals.  */
#define YYNTOKENS  499
/* YYNNTS -- Number of nonterminals.  */
#define YYNNTS  376
/* YYNRULES -- Number of rules.  */
#define YYNRULES  1775
/* YYNSTATES -- Number of states.  */
#define YYNSTATES  2942

/* YYTRANSLATE[YYX] -- Symbol number corresponding to YYX as returned
   by yylex, with out-of-bounds checking.  */
#define YYUNDEFTOK  2
#define YYMAXUTOK   732

#define YYTRANSLATE(YYX)                                                \
  ((unsigned int) (YYX) <= YYMAXUTOK ? yytranslate[YYX] : YYUNDEFTOK)

/* YYTRANSLATE[TOKEN-NUM] -- Symbol number corresponding to TOKEN-NUM
   as returned by yylex, without out-of-bounds checking.  */
static const yytype_uint16 yytranslate[] =
{
       0,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,   497,     2,   484,     2,     2,
     489,   490,   482,   480,   493,   481,   491,   483,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,   494,   492,
     476,   478,   477,   498,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,   487,     2,   488,   485,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,   495,     2,   496,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     2,     2,     2,     2,
       2,     2,     2,     2,     2,     2,     1,     2,     3,     4,
       5,     6,     7,     8,     9,    10,    11,    12,    13,    14,
      15,    16,    17,    18,    19,    20,    21,    22,    23,    24,
      25,    26,    27,    28,    29,    30,    31,    32,    33,    34,
      35,    36,    37,    38,    39,    40,    41,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    54,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    68,    69,    70,    71,    72,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    88,    89,    90,    91,    92,    93,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
     115,   116,   117,   118,   119,   120,   121,   122,   123,   124,
     125,   126,   127,   128,   129,   130,   131,   132,   133,   134,
     135,   136,   137,   138,   139,   140,   141,   142,   143,   144,
     145,   146,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,   159,   160,   161,   162,   163,   164,
     165,   166,   167,   168,   169,   170,   171,   172,   173,   174,
     175,   176,   177,   178,   179,   180,   181,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,   193,   194,
     195,   196,   197,   198,   199,   200,   201,   202,   203,   204,
     205,   206,   207,   208,   209,   210,   211,   212,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
     225,   226,   227,   228,   229,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   479,   486
};

#if YYDEBUG
  /* YYRLINE[YYN] -- Source line where rule number YYN was defined.  */
static const yytype_uint16 yyrline[] =
{
       0,   463,   463,   479,   491,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     536,     7,    16,    34,    41,    46,    47,    48,    49,     3,
      10,    16,    22,    28,    37,    37,    39,    40,     7,    14,
      31,    51,    52,     7,    21,    25,    32,    43,    44,    50,
      51,     2,     9,    15,    21,    28,    35,    45,    46,    47,
      47,    48,    52,    53,    68,    69,    76,    84,    92,   100,
     108,   116,   127,   128,   155,   170,   186,   187,   206,   210,
     214,   231,   238,   245,   255,   256,   259,   271,   282,   290,
     295,   300,   305,   310,   318,   326,   331,   336,   343,   344,
     348,   349,   350,   357,   358,   362,   363,   367,   368,   372,
     376,   377,   380,   389,   400,   401,   402,   405,   406,   407,
     411,   412,   413,   414,   418,   419,   423,   425,   441,   443,
     448,   451,   459,   463,   467,   471,   475,   479,   486,   491,
     498,   499,   503,   507,   511,   515,   522,   529,   530,   535,
     536,   540,   541,   549,   569,   570,   572,   577,   578,   582,
     583,   586,   587,   612,   613,   617,   618,   622,   623,   627,
     640,   641,   645,   646,   650,   651,   655,   656,   660,   671,
     672,   673,   674,   678,   679,   684,   685,   686,   695,   701,
     719,   720,   724,   725,   731,   737,   745,   753,   789,   815,
     819,   824,   834,   841,   848,   858,   859,   866,   873,   880,
     887,   897,   907,   917,   927,   940,   941,   945,   952,   979,
     983,   996,  1010,  1025,  1037,  1053,  1059,  1064,  1070,  1077,
    1078,  1086,  1090,  1094,  1100,  1107,  1112,  1113,  1114,  1115,
    1119,  1120,  1132,  1133,  1138,  1145,  1152,  1159,  1191,  1202,
    1215,  1220,  1221,  1224,  1225,  1228,  1229,  1234,  1235,  1240,
    1244,  1250,  1271,  1279,  1292,  1295,  1299,  1299,  1301,  1306,
    1313,  1318,  1324,  1329,  1335,  1341,  1350,  1352,  1355,  1359,
    1360,  1361,  1362,  1363,  1364,  1369,  1389,  1390,  1391,  1392,
    1403,  1417,  1418,  1424,  1429,  1434,  1439,  1444,  1449,  1454,
    1459,  1465,  1471,  1477,  1484,  1506,  1515,  1519,  1527,  1531,
    1539,  1551,  1572,  1576,  1582,  1586,  1599,  1607,  1617,  1619,
    1621,  1623,  1625,  1627,  1632,  1633,  1640,  1649,  1657,  1666,
    1677,  1685,  1686,  1687,  1691,  1691,  1694,  1694,  1697,  1697,
    1700,  1700,  1703,  1703,  1706,  1706,  1709,  1709,  1712,  1712,
    1715,  1717,  1719,  1721,  1723,  1725,  1727,  1729,  1731,  1736,
    1741,  1747,  1754,  1759,  1765,  1771,  1802,  1804,  1806,  1814,
    1829,  1831,  1833,  1835,  1837,  1839,  1841,  1843,  1845,  1847,
    1849,  1851,  1853,  1855,  1858,  1860,  1862,  1865,  1867,  1869,
    1871,  1874,  1879,  1884,  1891,  1896,  1903,  1908,  1916,  1921,
    1930,  1938,  1946,  1954,  1972,  1980,  1988,  1996,  2004,  2012,
    2016,  2020,  2024,  2032,  2040,  2056,  2064,  2072,  2080,  2088,
    2096,  2104,  2108,  2112,  2116,  2120,  2128,  2136,  2144,  2152,
    2172,  2194,  2205,  2212,  2226,  2242,  2244,  2246,  2248,  2250,
    2252,  2254,  2256,  2258,  2260,  2262,  2264,  2266,  2268,  2270,
    2272,  2274,  2276,  2278,  2280,  2284,  2288,  2292,  2306,  2307,
    2308,  2315,  2327,  2342,  2354,  2356,  2368,  2379,  2403,  2416,
    2420,  2426,  2433,  2440,  2450,  2457,  2485,  2520,  2531,  2532,
    2539,  2545,  2549,  2553,  2557,  2561,  2565,  2569,  2573,  2577,
    2581,  2585,  2589,  2593,  2597,  2601,  2605,  2607,  2609,  2613,
    2622,  2627,  2634,  2649,  2656,  2660,  2664,  2668,  2672,  2686,
    2687,  2691,  2692,  2700,  2701,  2705,  2706,  2711,  2719,  2721,
    2735,  2738,  2765,  2766,  2769,  2770,  2781,  2787,  2794,  2803,
    2820,  2865,  2873,  2881,  2889,  2897,  2918,  2919,  2922,  2923,
    2927,  2937,  2938,  2940,  2941,  2942,  2945,  2946,  2949,  2950,
    2951,  2952,  2953,  2954,  2955,  2956,  2957,  2958,  2959,  2960,
    2963,  2965,  2970,  2972,  2977,  2979,  2981,  2983,  2985,  2987,
    2989,  2991,  3005,  3007,  3011,  3015,  3022,  3027,  3034,  3038,
    3044,  3048,  3057,  3068,  3069,  3073,  3077,  3084,  3085,  3086,
    3087,  3088,  3089,  3090,  3091,  3092,  3093,  3103,  3107,  3114,
    3121,  3122,  3138,  3142,  3147,  3151,  3166,  3171,  3175,  3178,
    3181,  3182,  3183,  3186,  3193,  3203,  3217,  3218,  3222,  3233,
    3234,  3237,  3238,  3241,  3245,  3252,  3256,  3260,  3268,  3279,
    3280,  3284,  3285,  3289,  3290,  3293,  3294,  3304,  3305,  3309,
    3310,  3313,  3329,  3337,  3345,  3367,  3368,  3379,  3383,  3410,
    3412,  3417,  3419,  3429,  3432,  3443,  3447,  3451,  3463,  3467,
    3476,  3483,  3515,  3519,  3523,  3527,  3531,  3535,  3539,  3545,
    3546,  3562,  3563,  3564,  3567,  3568,  3574,  3575,  3576,  3579,
    3580,  3581,  3584,  3585,  3586,  3589,  3590,  3593,  3595,  3600,
    3601,  3604,  3612,  3613,  3614,  3615,  3618,  3619,     7,    18,
      19,    23,    24,    25,    26,     7,    21,    38,    47,    62,
      63,    90,    91,    92,    93,    94,    95,    99,   100,   105,
     110,   111,   112,   113,   114,   119,   126,   127,   128,   145,
     152,   159,   169,   179,   191,   200,   209,   228,   235,   240,
     242,   244,   246,   249,   254,   255,   259,   260,   261,   262,
     267,   271,   272,   277,   284,   289,   290,   291,   292,   293,
     294,   295,   296,   302,   303,   307,   312,   319,   326,   333,
     345,   346,   347,   348,   352,   357,   358,   359,   364,   369,
     370,   371,   372,   373,   374,   379,   402,   406,   413,   414,
     418,   422,   423,   424,   428,   432,   440,   441,   446,   447,
     451,   459,   460,   465,   466,   470,   475,   479,   483,   488,
     496,   497,   501,   502,   508,   519,   532,   546,   560,   574,
     588,   611,   615,   622,   626,   634,   639,   646,   656,   657,
     658,   659,   660,   667,   674,   675,   680,   681,     2,     7,
      14,    24,    25,    32,     6,    15,    25,    35,    45,    55,
      65,    75,    85,    95,   106,   117,   127,   140,   141,     8,
      33,    62,    66,    67,    72,    73,    78,    79,    83,    84,
      89,    90,     6,     7,    14,    22,    10,    16,    22,    32,
      33,    41,    52,    64,    72,    80,    87,    97,    99,   105,
     109,   113,   128,   135,   136,   137,   141,   142,     7,    16,
      25,    34,    43,    52,     7,    20,     7,    13,    19,    25,
       9,    17,    29,    30,    34,    35,    36,    41,    42,    43,
      48,    52,    56,    60,    64,    68,    72,    76,    80,    84,
      88,    92,    97,   101,   105,   112,   113,   117,   118,   119,
       9,    18,    27,    36,    45,    54,    63,    72,    85,    87,
      93,    94,    99,   103,   107,   118,   126,   130,   139,   148,
     157,   166,   175,   184,   192,   200,   209,   218,   227,   236,
     253,   262,   271,   280,   290,   303,   318,   327,   335,   350,
     358,   368,   378,   385,   392,   400,   407,   418,   419,   424,
     428,   433,   438,   446,   447,   452,   456,   457,   458,     9,
      16,    26,    33,    44,    45,    50,    51,    52,    57,    58,
      59,    60,    61,    65,    66,    67,    72,    73,    78,    82,
      90,    91,    96,    97,    98,   104,   109,   117,   118,     7,
       5,    11,     8,    21,    27,    34,    40,    47,    57,    61,
      70,    79,    88,    95,    96,   101,   113,   118,   143,   153,
     163,   169,   180,   191,   206,   207,   213,   214,   219,   220,
     226,   227,   231,   232,   237,   239,   245,   246,   250,   251,
     256,     7,    18,    19,    23,    27,     8,    22,    36,    48,
      56,    70,    71,    72,    73,    74,    87,    88,    93,    94,
      98,    99,     9,    19,     1,    30,    53,    54,    59,    63,
      68,    72,    80,    81,    85,    86,    91,    92,    96,    97,
     102,   103,   104,   105,   106,   111,   119,   123,   128,   129,
     134,   138,   143,   147,   151,   155,   159,   163,   167,   171,
     175,   179,   183,   187,   191,   195,   203,   209,   210,   211,
     216,   220,     8,    21,    34,    52,    74,    75,    76,    77,
      11,    24,    41,    42,    43,    48,     7,    16,     9,    19,
      32,    33,     9,    19,    29,    39,    49,    59,    73,    74,
      75,    76,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    86,    87,    92,    93,    94,    95,    96,    97,    98,
     103,   104,   109,   110,   111,   116,   117,   118,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   122,   122,   122,
     122,   122,   122,   122,   122,   122,   122,   123,   123,   123,
     123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
     123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
     123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
     123,   123,   123,   123,   123,   123,   123,   123,   123,   123,
     123,   123,   123,   123,   123,   123,   123,   123,   124,   124,
     124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
     124,   124,   124,   124,   124,   124,   124,   124,   124,   124,
     124,   124,   124,   124,   125,   125,   125,   125,   125,   125,
     125,   125,   125,   125,   125,   125,   125,   125,   125,   125,
     125,   125,   125,   125,   125,   125,   125,   125,   125,   126,
     126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
     126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
     126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
     126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
     126,   126,   126,   126,   126,   126,   126,   126,   126,   126,
     127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
     127,   127,   127,   127,   127,   127,   127,   127,   127,   127,
     127,   127,   127,   127,   127,   127,   127,   128,   128,   128,
     128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   128,   128,   128,   128,   128,   128,   128,
     128,   128,   128,   128,   128,   128
};
#endif

#if YYDEBUG || YYERROR_VERBOSE || 0
/* YYTNAME[SYMBOL-NUM] -- String name of the symbol SYMBOL-NUM.
   First, the terminals, then, starting at YYNTOKENS, nonterminals.  */
static const char *const yytname[] =
{
  "$end", "error", "$undefined", "IDENT", "FCONST", "SCONST", "BCONST",
  "XCONST", "Op", "ICONST", "PARAM", "TYPECAST", "DOT_DOT", "COLON_EQUALS",
  "EQUALS_GREATER", "LAMBDA_ARROW", "LEFT_ARROW", "LESS_EQUALS",
  "GREATER_EQUALS", "NOT_EQUALS", "ABORT_P", "ABSOLUTE_P", "ACCESS",
  "ACTION", "ADD_P", "ADMIN", "AFTER", "AGGREGATE", "ALL", "ALSO", "ALTER",
  "ALWAYS", "ANALYSE", "ANALYZE", "AND", "ANY", "ARRAY", "AS", "ASC_P",
  "ASSERTION", "ASSIGNMENT", "ASYMMETRIC", "AT", "ATTACH", "ATTRIBUTE",
  "AUTHORIZATION", "BACKWARD", "BEFORE", "BEGIN_P", "BETWEEN", "BIGINT",
  "BINARY", "BIT", "BOOLEAN_P", "BOTH", "BY", "CACHE", "CALL_P", "CALLED",
  "CASCADE", "CASCADED", "CASE", "CAST", "CATALOG_P", "CHAIN", "CHAR_P",
  "CHARACTER", "CHARACTERISTICS", "CHECK_P", "CHECKPOINT", "CLASS",
  "CLOSE", "CLUSTER", "COALESCE", "COLLATE", "COLLATION", "COLUMN",
  "COLUMNS", "COMMENT", "COMMENTS", "COMMIT", "COMMITTED", "CONCURRENTLY",
  "CONFIGURATION", "CONFLICT", "CONNECTION", "CONSTRAINT", "CONSTRAINTS",
  "CONTENT_P", "CONTINUE_P", "CONVERSION_P", "COPY", "COST", "CREATE_P",
  "CROSS", "CSV", "CUBE", "CURRENT_P", "CURRENT_CATALOG", "CURRENT_DATE",
  "CURRENT_ROLE", "CURRENT_SCHEMA", "CURRENT_TIME", "CURRENT_TIMESTAMP",
  "CURRENT_USER", "CURSOR", "CYCLE", "DATA_P", "DATABASE", "DAY_P",
  "DAYS_P", "DEALLOCATE", "DEC", "DECIMAL_P", "DECLARE", "DEFAULT",
  "DEFAULTS", "DEFERRABLE", "DEFERRED", "DEFINER", "DELETE_P", "DELIMITER",
  "DELIMITERS", "DEPENDS", "DESC_P", "DESCRIBE", "DETACH", "DICTIONARY",
  "DISABLE_P", "DISCARD", "DISTINCT", "DO", "DOCUMENT_P", "DOMAIN_P",
  "DOUBLE_P", "DROP", "EACH", "EDGE", "ELSE", "ENABLE_P", "ENCODING",
  "ENCRYPTED", "END_P", "ENUM_P", "ESCAPE", "EVENT", "EXCEPT", "EXCLUDE",
  "EXCLUDING", "EXCLUSIVE", "EXECUTE", "EXISTS", "EXPLAIN", "EXPORT_P",
  "EXTENSION", "EXTERNAL", "EXTRACT", "FALSE_P", "FAMILY", "FETCH",
  "FILTER", "FIRST_P", "FLOAT_P", "FOLLOWING", "FOR", "FORCE", "FOREIGN",
  "FORWARD", "FREEZE", "FROM", "FULL", "FUNCTION", "FUNCTIONS",
  "GENERATED", "GLOB", "GLOBAL", "GRANT", "GRANTED", "GROUP_P", "GROUPING",
  "HANDLER", "HAVING", "HEADER_P", "HOLD", "HOUR_P", "HOURS_P",
  "IDENTITY_P", "IF_P", "ILIKE", "IMMEDIATE", "IMMUTABLE", "IMPLICIT_P",
  "IMPORT_P", "IN_P", "INCLUDING", "INCREMENT", "INDEX", "INDEXES",
  "INHERIT", "INHERITS", "INITIALLY", "INLINE_P", "INNER_P", "INOUT",
  "INPUT_P", "INSENSITIVE", "INSERT", "INSTEAD", "INT_P", "INTEGER",
  "INTERSECT", "INTERVAL", "INTO", "INVOKER", "IS", "ISNULL", "ISOLATION",
  "JOIN", "KEY", "LABEL", "LANGUAGE", "LARGE_P", "LAST_P", "LATERAL_P",
  "LEADING", "LEAKPROOF", "LEFT", "LEVEL", "LIKE", "LIMIT", "LISTEN",
  "LOAD", "LOCAL", "LOCALTIME", "LOCALTIMESTAMP", "LOCATION", "LOCK_P",
  "LOCKED", "LOGGED", "MACRO", "MAP", "MAPPING", "MATCH", "MATERIALIZED",
  "MAXVALUE", "METHOD", "MICROSECOND_P", "MICROSECONDS_P", "MILLISECOND_P",
  "MILLISECONDS_P", "MINUTE_P", "MINUTES_P", "MINVALUE", "MODE", "MONTH_P",
  "MONTHS_P", "MOVE", "NAME_P", "NAMES", "NATIONAL", "NATURAL", "NCHAR",
  "NEW", "NEXT", "NO", "NONE", "NOT", "NOTHING", "NOTIFY", "NOTNULL",
  "NOWAIT", "NULL_P", "NULLIF", "NULLS_P", "NUMERIC", "OBJECT_P", "OF",
  "OFF", "OFFSET", "OIDS", "OLD", "ON", "ONLY", "OPERATOR", "OPTION",
  "OPTIONS", "OR", "ORDER", "ORDINALITY", "OUT_P", "OUTER_P", "OVER",
  "OVERLAPS", "OVERLAY", "OVERRIDING", "OWNED", "OWNER", "PARALLEL",
  "PARSER", "PARTIAL", "PARTITION", "PASSING", "PASSWORD", "PERCENT",
  "PLACING", "PLANS", "POLICY", "POSITION", "PRAGMA_P", "PRECEDING",
  "PRECISION", "PREPARE", "PREPARED", "PRESERVE", "PRIMARY", "PRIOR",
  "PRIVILEGES", "PROCEDURAL", "PROCEDURE", "PROGRAM", "PUBLICATION",
  "QUOTE", "RANGE", "READ_P", "REAL", "REASSIGN", "RECHECK", "RECURSIVE",
  "REF", "REFERENCES", "REFERENCING", "REFRESH", "REINDEX", "RELATIVE_P",
  "RELEASE", "RENAME", "REPEATABLE", "REPLACE", "REPLICA", "RESET",
  "RESTART", "RESTRICT", "RETURNING", "RETURNS", "REVOKE", "RIGHT", "ROLE",
  "ROLLBACK", "ROLLUP", "ROW", "ROWS", "RULE", "SAMPLE", "SAVEPOINT",
  "SCHEMA", "SCHEMAS", "SCROLL", "SEARCH", "SECOND_P", "SECONDS_P",
  "SECURITY", "SELECT", "SEQUENCE", "SEQUENCES", "SERIALIZABLE", "SERVER",
  "SESSION", "SESSION_USER", "SET", "SETOF", "SETS", "SHARE", "SHOW",
  "SIMILAR", "SIMPLE", "SKIP", "SMALLINT", "SNAPSHOT", "SOME", "SQL_P",
  "STABLE", "STANDALONE_P", "START", "STATEMENT", "STATISTICS", "STDIN",
  "STDOUT", "STORAGE", "STRICT_P", "STRIP_P", "STRUCT", "SUBSCRIPTION",
  "SUBSTRING", "SYMMETRIC", "SYSID", "SYSTEM_P", "TABLE", "TABLES",
  "TABLESAMPLE", "TABLESPACE", "TEMP", "TEMPLATE", "TEMPORARY", "TEXT_P",
  "THEN", "TIME", "TIMESTAMP", "TO", "TRAILING", "TRANSACTION",
  "TRANSFORM", "TREAT", "TRIGGER", "TRIM", "TRUE_P", "TRUNCATE", "TRUSTED",
  "TRY_CAST", "TYPE_P", "TYPES_P", "UNBOUNDED", "UNCOMMITTED",
  "UNENCRYPTED", "UNION", "UNIQUE", "UNKNOWN", "UNLISTEN", "UNLOGGED",
  "UNTIL", "UPDATE", "USER", "USING", "VACUUM", "VALID", "VALIDATE",
  "VALIDATOR", "VALUE_P", "VALUES", "VARCHAR", "VARIADIC", "VARYING",
  "VERBOSE", "VERSION_P", "VERTEX", "VIEW", "VIEWS", "VOLATILE", "WHEN",
  "WHERE", "WHITESPACE_P", "WINDOW", "WITH", "WITHIN", "WITHOUT", "WORK",
  "WRAPPER", "WRITE_P", "XML_P", "XMLATTRIBUTES", "XMLCONCAT",
  "XMLELEMENT", "XMLEXISTS", "XMLFOREST", "XMLNAMESPACES", "XMLPARSE",
  "XMLPI", "XMLROOT", "XMLSERIALIZE", "XMLTABLE", "YEAR_P", "YEARS_P",
  "YES_P", "ZONE", "NOT_LA", "NULLS_LA", "WITH_LA", "'<'", "'>'", "'='",
  "POSTFIXOP", "'+'", "'-'", "'*'", "'/'", "'%'", "'^'", "UMINUS", "'['",
  "']'", "'('", "')'", "'.'", "';'", "','", "':'", "'{'", "'}'", "'#'",
  "'?'", "$accept", "stmtblock", "stmtmulti", "stmt", "CreateSchemaStmt",
  "OptSchemaEltList", "schema_stmt", "VariableShowStmt",
  "show_or_describe", "var_name", "ExecuteStmt", "execute_param_clause",
  "DeleteStmt", "relation_expr_opt_alias", "where_or_current_clause",
  "using_clause", "TransactionStmt", "opt_transaction", "SelectStmt",
  "select_with_parens", "select_no_parens", "select_clause",
  "simple_select", "with_clause", "cte_list", "common_table_expr",
  "into_clause", "OptTempTableName", "opt_table", "all_or_distinct",
  "distinct_clause", "opt_all_clause", "opt_sort_clause", "sort_clause",
  "sortby_list", "sortby", "opt_asc_desc", "opt_nulls_order",
  "select_limit", "opt_select_limit", "limit_clause", "offset_clause",
  "sample_count", "sample_clause", "opt_sample_func", "tablesample_entry",
  "tablesample_clause", "opt_tablesample_clause", "opt_repeatable_clause",
  "select_limit_value", "select_offset_value", "select_fetch_first_value",
  "I_or_F_const", "row_or_rows", "first_or_next", "group_clause",
  "group_by_list", "group_by_item", "empty_grouping_set", "having_clause",
  "for_locking_clause", "opt_for_locking_clause", "for_locking_items",
  "for_locking_item", "for_locking_strength", "locked_rels_list",
  "opt_nowait_or_skip", "values_clause", "from_clause", "from_list",
  "table_ref", "node_pattern", "rel_range", "pattern_element",
  "pattern_element_list", "path_pattern", "joined_table", "alias_clause",
  "opt_alias_clause", "func_alias_clause", "join_type", "join_outer",
  "join_qual", "relation_expr", "func_table", "rowsfrom_item",
  "rowsfrom_list", "opt_col_def_list", "opt_ordinality", "where_clause",
  "TableFuncElementList", "TableFuncElement", "opt_collate_clause",
  "colid_type_list", "RowOrStruct", "Typename", "opt_array_bounds",
  "SimpleTypename", "ConstTypename", "GenericType", "opt_type_modifiers",
  "Numeric", "opt_float", "Bit", "ConstBit", "BitWithLength",
  "BitWithoutLength", "Character", "ConstCharacter", "CharacterWithLength",
  "CharacterWithoutLength", "character", "opt_varying", "ConstDatetime",
  "ConstInterval", "opt_timezone", "year_keyword", "month_keyword",
  "day_keyword", "hour_keyword", "minute_keyword", "second_keyword",
  "millisecond_keyword", "microsecond_keyword", "opt_interval", "a_expr",
  "b_expr", "c_expr", "func_application", "func_expr",
  "func_expr_windowless", "func_expr_common_subexpr",
  "within_group_clause", "filter_clause", "window_clause",
  "window_definition_list", "window_definition", "over_clause",
  "window_specification", "opt_existing_window_name",
  "opt_partition_clause", "opt_frame_clause", "frame_extent",
  "frame_bound", "qualified_row", "row", "dict_arg", "dict_arguments",
  "sub_type", "all_Op", "MathOp", "qual_Op", "qual_all_Op", "subquery_Op",
  "any_operator", "expr_list", "opt_expr_list", "func_arg_list",
  "func_arg_expr", "type_list", "extract_list", "extract_arg",
  "overlay_list", "overlay_placing", "position_list", "substr_list",
  "substr_from", "substr_for", "trim_list", "in_expr", "case_expr",
  "when_clause_list", "when_clause", "case_default", "case_arg",
  "columnref", "indirection_el", "opt_slice_bound", "indirection",
  "opt_indirection", "opt_asymmetric", "opt_target_list", "target_list",
  "target_el", "qualified_name_list", "qualified_name", "name_list",
  "name", "attr_name", "func_name", "AexprConst", "Iconst", "Sconst",
  "ColId", "ColIdOrString", "type_function_name", "function_name_token",
  "type_name_token", "any_name", "attrs", "opt_name_list", "param_name",
  "ColLabel", "ColLabelOrString", "PrepareStmt", "prep_type_clause",
  "PreparableStmt", "CreateStmt", "CreateVertexStmt", "CreateEdgeStmt",
  "ConstraintAttributeSpec", "def_arg", "OptParenthesizedSeqOptList",
  "generic_option_arg", "key_action", "ColConstraint", "ColConstraintElem",
  "generic_option_elem", "key_update", "key_actions",
  "create_generic_options", "OnCommitOption", "reloptions",
  "opt_no_inherit", "TableConstraint", "TableLikeOption", "reloption_list",
  "ExistingIndex", "ConstraintAttr", "OptWith", "definition",
  "TableLikeOptionList", "generic_option_name", "ConstraintAttributeElem",
  "columnDef", "generic_option_list", "def_list", "index_name",
  "TableElement", "def_elem", "opt_definition", "OptTableElementList",
  "columnElem", "opt_column_list", "ColQualList", "key_delete",
  "reloption_elem", "columnList", "func_type", "ConstraintElem",
  "TableElementList", "key_match", "TableLikeClause", "OptTemp",
  "generated_when", "VariableResetStmt", "generic_reset", "reset_rest",
  "RenameStmt", "opt_column", "IndexStmt", "access_method",
  "access_method_clause", "opt_concurrently", "opt_index_name",
  "opt_reloptions", "opt_unique", "CallStmt", "PragmaStmt",
  "VariableSetStmt", "set_rest", "generic_set", "var_value", "zone_value",
  "var_list", "AlterObjectSchemaStmt", "ExportStmt", "ImportStmt",
  "DeallocateStmt", "AlterSeqStmt", "SeqOptList", "opt_with",
  "NumericOnly", "SeqOptElem", "opt_by", "SignedIconst", "AlterTableStmt",
  "alter_identity_column_option_list", "alter_column_default",
  "alter_identity_column_option", "alter_generic_option_list",
  "alter_table_cmd", "alter_using", "alter_generic_option_elem",
  "alter_table_cmds", "alter_generic_options", "opt_set_data",
  "ExplainStmt", "opt_verbose", "explain_option_arg", "ExplainableStmt",
  "NonReservedWord", "NonReservedWord_or_Sconst", "explain_option_list",
  "analyze_keyword", "opt_boolean_or_string", "explain_option_elem",
  "explain_option_name", "UpdateStmt", "CheckPointStmt", "InsertStmt",
  "insert_rest", "insert_target", "opt_conf_expr", "opt_with_clause",
  "insert_column_item", "set_clause", "opt_on_conflict", "index_elem",
  "returning_clause", "override_kind", "set_target_list", "opt_collate",
  "opt_class", "insert_column_list", "set_clause_list", "index_params",
  "set_target", "CreateFunctionStmt", "macro_alias", "param_list",
  "VacuumStmt", "vacuum_option_elem", "opt_full", "vacuum_option_list",
  "opt_freeze", "AnalyzeStmt", "CopyStmt", "copy_from", "copy_delimiter",
  "copy_generic_opt_arg_list", "opt_using", "opt_as", "opt_program",
  "copy_options", "copy_generic_opt_arg", "copy_generic_opt_elem",
  "opt_oids", "copy_opt_list", "opt_binary", "copy_opt_item",
  "copy_generic_opt_arg_list_item", "copy_file_name",
  "copy_generic_opt_list", "ViewStmt", "opt_check_option", "CreateAsStmt",
  "opt_with_data", "create_as_target", "LoadStmt", "file_name",
  "CreateSeqStmt", "OptSeqOptList", "DropStmt", "drop_type_any_name",
  "drop_type_name", "any_name_list", "opt_drop_behavior",
  "drop_type_name_on_any_name", "unreserved_keyword", "col_name_keyword",
  "func_name_keyword", "type_name_keyword", "other_keyword",
  "type_func_name_keyword", "reserved_keyword", YY_NULLPTR
};
#endif

# ifdef YYPRINT
/* YYTOKNUM[NUM] -- (External) token number corresponding to the
   (internal) symbol number NUM (which must be that of a token).  */
static const yytype_uint16 yytoknum[] =
{
       0,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,   283,   284,
     285,   286,   287,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,   304,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,   329,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,   342,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,   378,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   401,   402,   403,   404,
     405,   406,   407,   408,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,   423,   424,
     425,   426,   427,   428,   429,   430,   431,   432,   433,   434,
     435,   436,   437,   438,   439,   440,   441,   442,   443,   444,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,   473,   474,
     475,   476,   477,   478,   479,   480,   481,   482,   483,   484,
     485,   486,   487,   488,   489,   490,   491,   492,   493,   494,
     495,   496,   497,   498,   499,   500,   501,   502,   503,   504,
     505,   506,   507,   508,   509,   510,   511,   512,   513,   514,
     515,   516,   517,   518,   519,   520,   521,   522,   523,   524,
     525,   526,   527,   528,   529,   530,   531,   532,   533,   534,
     535,   536,   537,   538,   539,   540,   541,   542,   543,   544,
     545,   546,   547,   548,   549,   550,   551,   552,   553,   554,
     555,   556,   557,   558,   559,   560,   561,   562,   563,   564,
     565,   566,   567,   568,   569,   570,   571,   572,   573,   574,
     575,   576,   577,   578,   579,   580,   581,   582,   583,   584,
     585,   586,   587,   588,   589,   590,   591,   592,   593,   594,
     595,   596,   597,   598,   599,   600,   601,   602,   603,   604,
     605,   606,   607,   608,   609,   610,   611,   612,   613,   614,
     615,   616,   617,   618,   619,   620,   621,   622,   623,   624,
     625,   626,   627,   628,   629,   630,   631,   632,   633,   634,
     635,   636,   637,   638,   639,   640,   641,   642,   643,   644,
     645,   646,   647,   648,   649,   650,   651,   652,   653,   654,
     655,   656,   657,   658,   659,   660,   661,   662,   663,   664,
     665,   666,   667,   668,   669,   670,   671,   672,   673,   674,
     675,   676,   677,   678,   679,   680,   681,   682,   683,   684,
     685,   686,   687,   688,   689,   690,   691,   692,   693,   694,
     695,   696,   697,   698,   699,   700,   701,   702,   703,   704,
     705,   706,   707,   708,   709,   710,   711,   712,   713,   714,
     715,   716,   717,   718,   719,   720,   721,   722,   723,   724,
     725,   726,   727,   728,   729,   730,    60,    62,    61,   731,
      43,    45,    42,    47,    37,    94,   732,    91,    93,    40,
      41,    46,    59,    44,    58,   123,   125,    35,    63
};
# endif

#define YYPACT_NINF -2552

#define yypact_value_is_default(Yystate) \
  (!!((Yystate) == (-2552)))

#define YYTABLE_NINF -1697

#define yytable_value_is_error(Yytable_value) \
  (!!((Yytable_value) == (-1697)))

  /* YYPACT[STATE-NUM] -- Index in YYTABLE of the portion describing
     STATE-NUM.  */
static const int yypact[] =
{
    2995,  -108,   497, -2552, -2552,  -108, 31616, -2552,  -108,    57,
    3042, 36316, -2552,  3010,  -108, 42426,   716,   157,   239,   356,
     329, 42426, 42426, 36786,  -108,   242, 42896, -2552,  -108, 33966,
      78,    80, 43366, 42426,  1109,   695,   234, -2552, -2552, -2552,
   21837, -2552, -2552, -2552, -2552,   230, -2552,   171,   263,   572,
     273, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,   102, -2552,
   -2552, -2552,    47, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, 37256, 42426, 37726, 34436, 38196,
   -2552,   113, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552,   114, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,   139,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552,   297,  -171, -2552,
     156, -2552, -2552, -2552, -2552,  1109, 38666, 38666, -2552,   411,
     429, -2552,   502, 43836, -2552, -2552, -2552, -2552, 38666,   605,
     656, 38666, -2552, -2552, -2552, 39136, -2552, -2552, -2552, -2552,
     639, -2552, -2552,   516, -2552,   134, -2552, -2552, -2552,   492,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,   585, -2552,
   -2552, 44306, 44776, 45246, -2552,   509,    40,    53, 21367, -2552,
   -2552, -2552,   102, -2552, -2552, -2552,   329, -2552,   329, -2552,
   -2552, -2552,   276,   533, -2552,   544,   821,   609, -2552, -2552,
   -2552, -2552, -2552,   777,  8220,  8220, 45716,   329, 45716,   636,
     170, -2552, -2552, -2552, -2552, 22778, -2552,   614,  -171, -2552,
   -2552,   130,   947, 11196, 42426,   626, -2552,   652,   626,   673,
     706,   572, -2552,  2995, -2552,   711,   990,    80,   609, -2552,
     248,   248,  1156,   248,   950,   968, -2552,  1672, -2552,   741,
   -2552, 38666,  1056,  1024, 33966,  1091,   964,   912,  1105,  1865,
    1111,   987,  1119,  1146,  6236, 11196, 26231, -2552,  -171, -2552,
   -2552,   787, -2552, -2552,   812,  1015, -2552, -2552, -2552, -2552,
      40,  1049, -2552,  1040,   892, 39606, 40076, 38666,  1259,   857,
   -2552, -2552, -2552, -2552,   931, -2552, -2552,    91,  1242,   904,
   -2552,   140,  1248,   190, -2552,  1254,  1133, 11196, -2552,  1042,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
      80, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552,   350, -2552, -2552, 28111, -2552, -2552,
      53,   945, -2552, 28111, 11692, 48536,  1399, -2552,  1217, 42426,
     961, -2552, -2552, -2552, -2552, -2552, -2552,   969,  1460,   117,
    1462, 11196,   980,   117,   117,   982,  1314, -2552, -2552, -2552,
     160,  1013,  1017, -2552,   161,   161, -2552,  1201,  1027,  1055,
   -2552,   176,  1508,  1524,   148,  1072,  1074,   966,   117, 11196,
   -2552,  1077,   161,  1085,  1087,  1093,  1567,  1099, -2552,  1587,
    1108,   125,   187,  1114,  1116, -2552,  1123, -2552,   178, 11196,
   11196, 11196, -2552, 11196,  7228, 38666,  1599, -2552,  -171,   329,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552,  1144, -2552,   155,
    4695, -2552,  1191, -2552, -2552, -2552,   247, 11196, -2552,  1630,
     -28, -2552,   180, -2552, -2552, -2552,  -171,  1436,  1158, -2552,
   -2552, -2552,   218,  1557, 27171, 27641, 38666, -2552, -2552,  -171,
   -2552, -2552, -2552, -2552, -2552, -2552,   480, -2552,   102, 29270,
     493,   626, 42426, 42426,  1627, -2552, -2552, -2552, -2552,  1439,
   -2552, -2552,   572,   572, 11196,   572,   122,    50,  8716, 12188,
    1505,  1396,   151,    97,  1519, -2552,  1419,   950,   968, 11196,
     652, 33966, 38666,  1340, 46186, 38666, 32086,   610,   671,  1222,
    1309,  1231,    -9,  1637, -2552,  1233, -2552,  1328, 38666, 49916,
      93, -2552,  1685,    93,    93,   604,  1686,  1335,   255,  1489,
     -14,   419,  1925, -2552,  1233, 33966,   127,   469,  1233, 38666,
    1343,   491,  1233,   110, 11692,  1061,  1202,   808,  1275,  1405,
     123, 11692,  1463,  1483,  1543,  1545,  1565,  1586,  1597,  1601,
    1604,  1606,   126,  1608,  1611,  1614,  1616,  1624,  1643,   136,
    1645,   121, 11692,  1649,  1257, -2552, 29270,   -56, -2552, -2552,
    1675,   138, -2552, 25762,  1258, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552,  1344, 42426,  1302, 38666,   -80,  1605,  1664,
   38666, 38666,  1492,  1925,  1493,  1271,  1724,   812, -2552, 46656,
    9212,  1726, -2552, -2552, -2552, -2552, -2552, 42426, 30206,  1274,
   -2552, -2552, 42426, -2552, 42426, 42426, -2552, 42426, 42426,   567,
   40546,    53, 34906, -2552, -2552, -2552, -2552,   906,   975, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, 30206, -2552,
    2701, -2552,  1273, -2552, -2552,   590, -2552, -2552, -2552, -2552,
    1327, -2552,  1327,  1327, -2552, -2552, -2552, -2552,  1279,  1279,
    1291, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552,  1292,   966, -2552,  1327, -2552,  1279,
   -2552, -2552, -2552, -2552, -2552, 49916, -2552, -2552, -2552, -2552,
    -160,   330, -2552, -2552, -2552,  1293, -2552,  1748, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552,  3826,   595,  1279,
   -2552, -2552,  1109, -2552, -2552, 11196,  -171, 11196, -2552,  1296,
   29270,  1342, 11196, -2552, -2552, 11196,  1298,  1781,  1781, 11196,
   -2552, -2552, -2552, -2552,  4643,  1781, -2552,  1781,  1781,  1327,
    1327, -2552,  5734, 11196, -2552, 25132, 11196, 15164,  9708, 11196,
    1386,  1390,  1781, -2552,  1781, -2552, 11196,  7724, 11196,  5734,
    1785,  1785,  1305,  1311,   900,  4743,  1307, -2552,   540, -2552,
    1308, -2552,  -171,  -171, -2552,  1781, 11196,  2763,  2763, -2552,
     143, 48536, 11196, 11196, 11196, 11196, 29736,  1398,   104, 42426,
   11196, 11196,  1312,   796, -2552, 11196,  1533, -2552,  1318, 11196,
    1401,   137, 11196, 11196, 11196, 11196, 11196, 11196, 11196, 11196,
   11196, -2552, -2552, 16637,   144,  1634,  1653,  -171, 11196,   -72,
     317, 11196, 35376,  8220,  1654,  6236, -2552,  -171,   101,  1654,
   -2552, -2552, -2552,   183, -2552, -2552, -2552, -2552, -2552,  1273,
   -2552,  1273,  1324, 38666,   130, 33496, -2552, 11196, -2552,   596,
    1337, -2552,  1615, -2552,  1334, -2552, 28576,  1615, -2552, -2552,
   15645,  1461,  1612,  1552, -2552, -2552, -2552,  1349, 29270, 12684,
   12684, -2552,  1220, 29270,  1336, -2552, -2552, -2552, -2552, -2552,
   -2552,   498, -2552, 38666,     8,  1505,    97,   597, -2552,  1404,
    1800,  1098, 23718, 42426, -2552,  1215,  1358, 47126, 42426,  1628,
    1582,  1632,  -110, 48536, -2552, -2552, -2552, -2552, 42426, 42426,
   47596, 48066, 30676, 42426, 30206, -2552, -2552, -2552, -2552, 42426,
     899, 42426,  3469, -2552, -2552, -2552,    93, -2552, -2552, -2552,
   -2552, -2552, 42426, 42426, -2552, -2552,    93, 42426, 42426,    93,
   -2552,  1236, 42426, 42426, 42426, 42426,  1300, 42426, 42426,   -47,
     -47,  1564, -2552, 10204,  1362, -2552, 11196, 11196, -2552, 11196,
    1534, -2552, -2552,   602,  1575,    32,  1366,  1414, 38666, 42426,
    1162, -2552, -2552, -2552, -2552, -2552, -2552,  1373,  1714,  1925,
   -2552,  1718, 32556,   592,    -3,  1420,  1613, -2552, -2552,  1589,
   -2552,   612, 11196,   140, -2552, 30206, -2552,   190, -2552,  1591,
     191, -2552,  1618,   812,  1840, -2552, -2552, -2552, -2552, -2552,
   -2552, 20897, -2552,   628, -2552, -2552,  1841,   329,  1841,   601,
   -2552, -2552,  1841, -2552,  1841, -2552, 28111, -2552, 11692, 48536,
    1845, 42426,  1400,  1407, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
    1781,  1478, -2552,  1479,  1481,  1484, -2552, -2552, -2552, -2552,
   -2552, 48536, -2552, -2552,   635, -2552,  1411, 11196, 11196,    62,
   -2552, 28640,   640, 11196,  1415,  1416,   641, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552,  1422,  1735, -2552,  1427,
    1428,  1430, -2552, -2552,  4322, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,  1432,
    1423, 28673,  1433, 15164, 15164,  7228,  1929, -2552, 15164,  1434,
   -2552, -2552,   662, 28594,  1305,  1435,  1455,  1457,  1441,  1442,
   28952, 10700, 11196, 10700, 10700, 28991,  1305,  1443, 29174, -2552,
   -2552, 11196, 38666, -2552, 11196,  1444,  5253, -2552, -2552, -2552,
    3828,  3828,  3828,  5734, -2552, -2552, -2552,  1464, -2552, 15164,
   15164, -2552,  4562,  3415,  7228, -2552, -2552,  1766, -2552,    77,
   -2552,  1450, -2552, -2552,  4390, -2552, 25132,  3768, 11196,   115,
   -2552, 11196,  1312, 11196,  1538,  3828,  3828,  3828,   195,   195,
     197,   197,   197,   762,   317, -2552, -2552, -2552,  1452,  1465,
    1466,  1660, 29270,  1099, 11196, -2552, 29270,   756,   773, 38666,
    2387,  3095,  3370, -2552, -2552, -2552, 19487,  1504,   -56,  1504,
    1781,  2763, -2552,   652, -2552, -2552, -2552, 29270, -2552,  1109,
   11196, -2552, -2552,   543,  1482,  1671,  1679,  1006,  1006,  1220,
    1682, -2552, -2552,  1528, -2552, 11196,  1341, -2552,  1357, -2552,
   -2552, -2552, -2552,  1472, -2552, -2552,  1729, -2552, -2552, -2552,
   -2552, 19487,  1521, 42426,  1530,   -76, 22307, -2552,  1691, 42426,
   -2552, -2552,   -10,  1495, -2552,  1569,  1233, 11196,  1712, -2552,
      70,  1490,  1829,   -95,  1790, 42426, -2552,  1706, -2552,  1083,
    1842,   191,  1846,   191, 30206, 30206, 30206, -2552, -2552,   329,
     675, -2552, -2552,  -169,   699, -2552, -2552, -2552, -2552,  1592,
     529,  1925,  1233, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
     133,   580,  1233,  1594, -2552,  1595, -2552,  1600,   693,  1233,
   -2552, -2552,  1516,  1520,  1522, 11692, -2552, -2552, 29270, 29270,
   29270,  1523, -2552,   150, -2552, 42426, -2552, -2552, -2552,  1534,
    1849, 38666,   812, -2552,   896, 42426, 38666, 38666, 38666, 48536,
   -2552, -2552, -2552,  1529,  1531, -2552,   -67,  1730,  1740, 42426,
    1571,  1231,  1986,  1874, 38666, -2552, 29270, -2552, -2552, -2552,
   42426, -2552,  1875,  1109, -2552, 33026, -2552, -2552, -2552, -2552,
   30206, -2552,   329, -2552,   329,  1757, 42426, 26701,   329,   329,
   -2552,   708,  1542,  1407,   736, 48536,  1781,    92,  1547,  1459,
    1232,  1023,  1360, -2552, -2552, -2552,   750, 29233, 11196, -2552,
    1890, 48536, -2552,  5289, -2552, -2552, -2552, -2552, 11196, -2552,
   -2552, -2552, 11196, -2552, 25132, 11196,  1864, -2552,  2024,  2024,
    4743, 48536, 15164, 15164, 15164, 15164,   124,  1085, 15164, 15164,
   15164, 15164, 15164, 15164, 15164, 15164, 15164, 16141,   296, -2552,
   -2552, 11196, 11196,  1876,  1864, -2552, -2552, -2552,   331,   331,
   48536,  1553,  1305,  1558,  1560, 11196, -2552, 48536,  -171,  5616,
   -2552, 29270, -2552,  2763, 11196,  1892,  2585, 11196,   761, 11196,
    1873, -2552, -2552,  1562, -2552, -2552, 48536, 11196,  1563,  4668,
   15164, 15164,  5485, -2552,  5707, 11196,  7228, -2552,  1564,  1607,
   24188, -2552,  1656,  1656,  1656,  1656, -2552, -2552, 38666, 38666,
   38666, 19957,  1885, 17116, 41016,  1568,  1424,    84, -2552, -2552,
   41016, 41486, -2552,  1588, -2552,  -171, 11196,  1879,  1574,  1879,
    1576, -2552, -2552,  1579, -2552,  1583, -2552,  1482,   129, -2552,
   -2552, -2552,  1791, -2552, -2552, -2552, 38666, -2552,  1568, 11196,
    1732, -2552, -2552, -2552, -2552,  1639, -2552, -2552,   785,  1992,
    1732,   789, -2552,  -171, 23718,  1521, 11196, 42426, 25610,  1926,
   -2552, 42426, 42426, 42426, -2552, 42426,   800,   625,  1590, -2552,
     625,  1905,   624,  1231,   255, 28724,   326, -2552, -2552, -2552,
    1673, 42426, -2552, 42426, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, 30676, 24661, 30206, -2552, 30206, 42426, 42426, 42426, 42426,
   42426, 42426, 42426, 42426, 42426, 42426, -2552, -2552, -2552,  1564,
   -2552, -2552, -2552, -2552,   419, -2552,   150, 38666,  1603,  1420,
    1664, 41956,   804,  1925,  1609,  2053, -2552,   592, 32556, -2552,
   -2552, -2552,  2013, -2552,   509,   174, -2552, -2552,  1109, 42426,
    1676,   191, 38666, -2552,   805, -2552, -2552, -2552, -2552, 42426,
    1620, -2552,  1620, -2552, -2552, -2552,  1781, -2552, 42426, -2552,
    1626, -2552,  1642, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, 11196, 29270, -2552,  1635, -2552, 29270, 25628, -2552,
   29270,  1876, -2552,  1294,  1294,  1294,  1216,  1933,   175,  1629,
    1294,  1294,  1294,   332,   332,   106,   106,   106,  2024,   296,
   29270, 29270, -2552, -2552, -2552, -2552,  1646, -2552, -2552, -2552,
    1305,  1647, -2552, -2552,   288, 11196, 11196,  4562, -2552,  1775,
   11196, 48536,   824,  4562,   147, 11196,  2738,  3795, 11196, 11196,
    5749, 25646,  1648, 11196, 48991, -2552, -2552, 38666, 38666, 38666,
   38666, -2552, -2552, -2552, 41016, 41486,  1638, 42426, 19016,  1424,
    1651,   475, 38666, -2552,  1746,  1658, 19487,  1932,  1861, -2552,
   19487,  1861,   618,  1861,  1935,  1667,  1668, -2552,    84,  1746,
   23248, -2552,  1746,  1670,  1868, -2552,   579, 29270,  2106,  1981,
     329,  1981,   329, -2552, 25132, -2552, -2552, -2552, -2552, -2552,
   29270,  8220, -2552,  1109,  -171,  1066, 42426,   -65, -2552,  1689,
   42426, -2552,  1732, 29270, -2552, -2552, 42426,   845, -2552,   877,
     625, -2552,  1713, -2552,   188,  1965,    51, -2552, 30206,  1742,
     870, -2552,  1984,  1901, -2552,    93, -2552, 11196,   870,  1903,
     193, 42426, -2552, -2552,  1921, -2552, 48536,   191,   191, -2552,
    1687,  1690,  1692,  1693,  1695,  1696,  1697,  1699,  1700,  1701,
    1702,  1703,  1704,  1705,  1707,  1708,  1710,  1292,  1711, -2552,
    1716,  1583,  1717,  1719,  1720, 49461,  1722,  1728,  1734,  1739,
    1744,   906,   975, -2552, -2552, -2552,   904, -2552, -2552, -2552,
    1747, -2552,  1698, -2552, -2552, -2552,  1773, -2552,  1802, -2552,
   -2552, -2552, -2552, -2552,  1725,   945,    69,  1853, 42426,  2160,
    1937,  1737,  1420, -2552, 32556,   563,   527,  1740, -2552,   132,
    1571, -2552,  2132,  1794,  1960, 42426,  1753, -2552,  2209, -2552,
   33026,  1620,  1407,  1761,  1407, 48536, -2552, -2552, 29270, -2552,
   -2552, -2552, 15164,  2081,  1777, 48536, -2552, -2552,  4562,  4562,
    1775,   910, -2552,  4562, 11196, 11196,  4562,  4562, 11196, -2552,
   -2552, 25674,  1962, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   31146,  1782, 41016, -2552, 42426,  1778, -2552, 35846, -2552, -2552,
   42426,  1424, 19487, -2552, -2552,  1898, -2552, 19487,  2054, -2552,
   19487, 17591, 18066, -2552, -2552, 42426,  1786, -2552, 42426, -2552,
   13180, 11196,  1826, -2552,  1826, -2552,  1787,  1158, -2552,   -76,
   -2552, -2552,  2192, 20427,  2148, 11196, -2552, -2552,   625, -2552,
    1956,  1713,  1803, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
     920,  1804, 42426, 42426, 15164, -2552,   870,   226,   270, -2552,
    2071, 38666,  1713, -2552, -2552, -2552, -2552,  2176,  2257,  2144,
   -2552, -2552, 29270, -2552, -2552,  1781,  1781, -2552, -2552,  2222,
   -2552, -2552, -2552, -2552,   904,   243, 24661, 42426, 42426, -2552,
   -2552, -2552,   419,  2175, 42426,   935,  1109,  2150, 32556,  2265,
    1814, 42426,  1571,  1229,  1229, -2552,  1958, -2552,  1959, -2552,
   -2552,   198, -2552, 38666, -2552, -2552, 20427,  1109, -2552, -2552,
   -2552,  1856, 15164, 48536,   952, -2552,  4562,  4562,  4562, -2552,
    2251,  1564, -2552,   962,  2273, -2552, -2552,  1822, 42426,   -57,
     -59,  1824,  1825, -2552, -2552,   973, -2552, 11196,  1827, -2552,
   -2552, 19487,  1898, 42426,  1823, 42426,  1828,   994, -2552, 48536,
   42426,   996, 48536,  6732,  1833, -2552, -2552, 29270, 29270, 42426,
    1887,  1887, -2552,  1895, 42426, 11196,  2247,    46, -2552,  1000,
       6, 29270, 38666, -2552, 30206, -2552,   625, -2552, 30206, 11196,
   -2552,   840,  1216,  2291, -2552, -2552, -2552, -2552,  1713,   812,
   -2552, -2552,  2156, -2552, 42426,  1912,   382,  1927, -2552, -2552,
   -2552,   945,   329,  1851,  1420,  1794, 38666,  1109,   592,   509,
   -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552, -2552,  2278,  2063,  2280,  1676,  1008,  1856,  1014,
   -2552, 11196,   387,  1588, 31146,  1860, -2552, -2552,  1033, -2552,
   -2552, -2552, -2552, -2552, 42426,  1026, -2552, 29270, 42426, -2552,
   -2552,  1878, 42426,  1878, 42426, -2552, 42426,  2222,  1038, -2552,
   -2552, 13180,  1870, -2552,  2324,  2012, -2552, -2552,  1109, -2552,
   25692, 42426, 42426, 42426,  1504, 20427, -2552,  1997,   812,   625,
    1889,  1043, -2552, -2552, 25734,  2100, -2552,  2193, -2552,  2136,
    1891, -2552, 11196, -2552,  1963, -2552, -2552, -2552,  1976,  2347,
   -2552,  1896,  1794,  1740,  1571,  2102, -2552,  2105,  1902,  1420,
   -2552,  1305, 13676, 13676,  1900, -2552, -2552, 42426, -2552,  1044,
    1904,  1050,  1243,  1907,  1878,  1908,  1878, -2552, -2552, -2552,
   -2552, 42426,  1911, 35846, -2552,  2247, -2552, -2552,   213,   213,
   -2552, -2552, 23718,  2136, 24661, -2552, 30206,  2128,  1891,    58,
    2112,  1925, -2552, 29270, -2552, 38666,  1109, 32556, -2552, -2552,
   -2552, -2552, -2552, 20427,  1504, 14668,  2048,   111, 28612, -2552,
   -2552, -2552, -2552,  1052, -2552,  2392,  2066, -2552,  2391,  2395,
    1934,  1920,  2401,  1930, -2552, -2552, -2552, 42426,  1482,  1482,
    -144,  2112, -2552, -2552,  2219, -2552, -2552, -2552, -2552, -2552,
     207,  2138, -2552,  2139,  1185,  2092,  1794,  1058, -2552,  2388,
   -2552, -2552, -2552, -2552, -2552, -2552,  1938,  1936, -2552,  2415,
   -2552,  1940,  1949,  1940,  2416,   213, -2552, -2552, -2552, -2552,
   -2552,   128,   128,  2315, -2552,  2007, -2552, -2552, 42426, -2552,
    1420, 14172, -2552,  2428, -2552, 18541, -2552,  1940, -2552,  1940,
    1482,   625, -2552,  2417, -2552,   165, -2552, -2552,  1951,  1504,
   -2552,  1952,   -71, -2552, -2552, -2552, -2552, -2552, -2552, -2552,
   -2552, -2552
};

  /* YYDEFACT[STATE-NUM] -- Default reduction number in state STATE-NUM.
     Performed when YYTABLE does not specify something else to do.  Zero
     means the default is an error.  */
static const yytype_uint16 yydefact[] =
{
    1064,    79,     0,  1041,  1040,    79,     0,  1051,    79,  1141,
     855,     0,    55,     0,    79,     0,  1064,     0,     0,     0,
       0,     0,     0,     0,    79,   126,     0,    54,    79,     0,
    1107,     0,     0,     0,     0,     0,     2,     4,    15,    38,
       0,    22,    20,    33,    32,    93,    80,   128,    92,  1063,
      96,    30,    17,    18,    13,    36,    31,    26,     9,    29,
      37,     5,    24,    25,    19,     6,     7,    23,  1024,    34,
      10,    27,     0,    14,    35,     8,    11,    39,    12,    28,
      16,    21,    78,    77,    71,     0,     0,     0,     0,     0,
      72,   691,  1218,  1219,  1220,  1221,  1222,  1223,  1224,  1225,
    1226,  1227,  1228,  1229,  1230,  1231,  1232,  1233,  1568,  1234,
    1235,  1236,  1517,  1518,  1569,  1519,  1520,  1237,  1238,  1239,
    1240,  1241,  1242,  1243,  1244,  1521,  1522,  1245,  1246,  1247,
    1248,  1249,  1523,  1570,  1250,  1251,  1252,  1253,  1254,  1571,
    1255,  1256,  1257,  1258,  1259,  1260,  1261,  1262,  1263,  1572,
    1264,  1265,  1266,  1573,  1267,  1268,  1269,  1270,  1271,  1272,
    1273,  1524,  1525,  1274,  1275,  1276,  1277,  1278,  1279,  1280,
    1281,  1282,  1283,  1284,  1285,  1286,  1287,  1288,  1289,  1290,
    1291,  1292,  1293,  1294,  1295,  1296,  1297,  1298,  1299,  1300,
    1301,  1526,  1302,  1303,  1304,  1305,  1527,  1306,  1307,  1308,
    1528,  1309,  1310,  1311,  1574,  1575,  1312,  1313,  1314,  1576,
    1315,  1316,  1529,  1317,  1318,  1319,  1320,  1321,  1322,  1323,
    1577,  1324,  1325,  1326,  1327,  1328,  1329,  1330,  1331,  1332,
    1333,  1334,  1578,  1530,  1335,  1336,  1337,  1338,  1531,  1532,
    1533,  1339,  1579,  1580,  1340,  1581,  1341,  1342,  1343,  1344,
    1345,  1346,  1582,  1347,  1583,  1348,  1349,  1350,  1351,  1352,
    1353,  1354,  1355,  1534,  1356,  1357,  1358,  1359,  1360,  1361,
    1362,  1363,  1364,  1365,  1366,  1367,  1368,  1369,  1370,  1371,
    1372,  1373,  1535,  1585,  1536,  1374,  1375,  1376,  1537,  1377,
    1378,  1586,  1379,  1538,  1380,  1539,  1381,  1382,  1383,  1384,
    1385,  1386,  1387,  1388,  1389,  1540,  1587,  1390,  1588,  1541,
    1391,  1392,  1393,  1394,  1395,  1396,  1397,  1398,  1399,  1400,
    1401,  1402,  1542,  1403,  1404,  1543,  1405,  1406,  1407,  1408,
    1409,  1410,  1411,  1412,  1413,  1414,  1415,  1416,  1544,  1417,
    1418,  1419,  1420,  1421,  1422,  1423,  1424,  1425,  1426,  1427,
    1428,  1429,  1430,  1431,  1432,  1433,  1434,  1589,  1435,  1436,
    1437,  1545,  1438,  1439,  1440,  1441,  1442,  1443,  1444,  1445,
    1446,  1447,  1448,  1449,  1450,  1451,  1452,  1453,  1454,  1546,
    1455,  1456,  1457,  1590,  1458,  1459,  1547,  1460,  1461,  1462,
    1463,  1464,  1465,  1466,  1467,  1468,  1469,  1470,  1471,  1548,
    1472,  1549,  1473,  1474,  1475,  1592,  1476,  1477,  1478,  1479,
    1480,  1550,  1551,  1481,  1482,  1552,  1483,  1553,  1484,  1485,
    1554,  1486,  1487,  1488,  1489,  1490,  1491,  1492,  1493,  1494,
    1495,  1496,  1497,  1498,  1499,  1500,  1555,  1556,  1501,  1593,
    1502,  1503,  1504,  1505,  1506,  1507,  1508,  1509,  1510,  1511,
    1512,  1557,  1558,  1559,  1560,  1561,  1562,  1563,  1564,  1565,
    1566,  1567,  1513,  1514,  1515,  1516,   892,     0,     0,   673,
     692,   693,   701,    74,  1140,  1064,     0,     0,  1092,     0,
       0,  1093,     0,     0,   849,   848,   890,   854,     0,     0,
       0,     0,   691,   928,  1534,  1405,  1548,   926,   671,   692,
       0,  1196,  1197,     0,  1205,     0,  1190,  1194,  1191,     0,
    1215,  1207,  1216,  1208,  1189,  1209,  1198,  1188,     0,  1217,
    1192,     0,     0,     0,    75,    62,   855,  1064,     0,  1031,
    1028,  1019,  1024,  1030,  1029,  1032,     0,  1050,     0,   690,
    1177,  1176,   893,   720,   860,  1550,  1481,   859,    56,   861,
     858,    76,   125,   123,     0,   658,  1350,  1442,  1453,  1550,
       0,   896,   899,    73,   695,     0,    97,   264,   694,   667,
    1106,     0,  1111,     0,  1419,   101,   104,   710,   102,    93,
       0,     0,     1,  1064,    53,  1550,  1481,  1555,    50,    49,
     122,   122,     0,   122,     0,    85,    93,    88,    92,     0,
    1023,  1112,     0,     0,     0,  1323,     0,     0,  1323,     0,
    1323,     0,  1323,     0,     0,   650,     0,   651,   674,   724,
     721,     0,   723,   722,   822,     0,   853,   852,   851,   850,
     855,  1323,    44,     0,     0,     0,     0,     0,   885,     0,
     929,   927,  1203,  1204,     0,  1195,  1193,     0,  1323,   705,
    1210,  1214,  1323,  1214,   669,  1323,     0,     0,    58,     0,
    1021,  1033,  1619,  1620,  1621,  1622,  1624,  1623,  1625,  1626,
    1627,  1628,  1629,  1630,  1631,  1632,  1635,  1633,  1634,  1636,
    1637,  1638,  1639,  1640,  1641,  1642,  1643,  1644,  1645,  1646,
    1647,  1648,  1649,  1650,  1651,  1652,  1653,  1654,  1655,  1656,
    1657,  1658,  1659,  1660,  1661,  1662,  1663,  1664,  1665,  1666,
    1667,  1668,  1669,  1047,     0,  1048,  1038,  1027,  1034,  1035,
    1064,  1139,   925,     0,     0,     0,     0,   862,     0,     0,
       0,   676,   678,   679,   580,   689,   653,     0,  1518,  1519,
    1520,   642,     0,  1521,  1522,  1523,  1570,   514,   501,   510,
     515,   502,   504,   511,  1524,  1525,   453,  1289,  1526,  1527,
     687,  1528,  1531,  1532,  1533,   506,   508,  1535,  1536,     0,
     688,  1538,  1539,  1386,  1541,  1542,  1544,  1545,   512,  1547,
    1549,  1550,  1551,  1552,  1553,   686,  1554,   513,  1556,     0,
       0,     0,   664,   597,     0,     0,     0,   653,   486,     0,
     306,   307,   328,   329,   308,   334,   335,   337,   309,     0,
     663,   386,   530,   653,   497,   558,   429,     0,   484,   478,
     108,   659,     0,   479,   675,   653,   643,   108,   657,   897,
     902,   898,     0,     0,     0,     0,     0,   266,   265,   668,
    1105,  1103,  1104,  1102,  1101,  1108,     0,  1110,  1024,   594,
       0,   103,     0,     0,     0,    83,    82,     3,    51,     0,
     120,   121,     0,     0,     0,     0,     0,     0,     0,     0,
     195,   142,   143,   145,   192,   196,   204,     0,    89,     0,
     710,     0,     0,     0,    64,     0,     0,   878,   878,     0,
       0,     0,     0,     0,  1013,   962,  1006,     0,     0,     0,
       0,   943,   956,     0,     0,     0,     0,     0,   953,     0,
       0,   936,   930,   932,   964,     0,   878,     0,   960,     0,
       0,     0,   966,   691,     0,  1568,  1569,  1570,  1571,  1572,
     515,     0,  1574,  1575,  1576,  1577,  1578,  1579,  1580,  1581,
    1582,  1583,  1534,  1585,  1586,  1587,  1588,  1589,  1590,  1548,
    1592,  1554,     0,  1593,     0,   489,   600,   128,   598,   711,
       0,   692,   698,   649,     0,   712,  1697,  1698,  1699,  1700,
    1701,  1702,  1703,  1704,  1705,  1706,  1707,  1708,  1709,  1710,
    1711,  1712,  1713,  1714,  1715,  1716,  1717,  1718,  1719,  1720,
    1721,  1722,  1723,  1724,  1725,  1726,  1727,  1728,  1729,  1730,
    1731,  1732,  1733,  1734,  1735,  1736,  1737,  1738,  1739,  1740,
    1741,  1742,  1743,  1744,  1745,  1746,  1747,  1748,  1749,  1750,
    1751,  1752,  1753,  1754,  1755,  1756,  1757,  1758,  1759,  1760,
    1761,  1762,  1763,  1764,  1765,  1766,  1767,  1768,  1769,  1657,
    1770,  1771,  1772,  1773,  1774,  1775,   646,   645,   672,   714,
     713,   715,   652,     0,     0,  1137,     0,     0,     0,    41,
       0,     0,  1323,  1181,  1323,   822,     0,   822,   884,   887,
       0,     0,  1206,  1202,  1200,  1199,  1201,     0,     0,   706,
    1212,  1213,     0,  1183,     0,     0,  1185,     0,     0,     0,
       0,  1064,     0,   937,  1043,  1044,  1042,     0,     0,   957,
    1037,  1026,   940,  1046,  1036,  1045,  1025,  1020,     0,   924,
    1128,   916,   894,   908,   907,     0,   702,  1594,   316,  1595,
     345,   323,   345,   345,  1596,  1597,  1598,  1599,   312,   312,
     325,  1600,  1601,  1602,  1603,  1604,   313,   314,   350,  1605,
    1606,  1607,  1608,  1609,     0,     0,  1610,   345,  1611,   312,
    1612,  1613,   317,  1614,   286,     0,  1615,   315,   287,  1616,
     353,   353,  1617,   340,  1618,     0,   603,   298,   299,   300,
     301,   326,   327,   302,   332,   333,   303,   385,     0,   312,
     703,   704,  1064,   863,    57,     0,   482,   597,   344,   331,
     641,     0,     0,   339,   338,     0,     0,     0,     0,     0,
     321,   320,   319,   488,   606,     0,   318,     0,     0,   345,
     345,   343,   409,     0,   322,     0,     0,   621,     0,   627,
       0,     0,     0,   349,     0,   347,     0,     0,     0,   410,
     390,   391,   596,     0,   486,   594,     0,   561,     0,   694,
       0,   480,   481,   487,   682,     0,     0,   385,   385,   662,
     580,     0,   577,   578,   579,     0,     0,     0,   656,     0,
     588,   590,     0,     0,   425,   586,     0,   428,     0,     0,
       0,     0,   574,   575,   576,   568,   569,   570,   571,   572,
     573,   584,   567,   406,     0,     0,   532,   485,     0,     0,
     405,     0,     0,     0,   211,     0,   680,   677,   644,   211,
     910,   914,   915,     0,   909,   901,   913,   900,   905,   903,
     906,   904,     0,  1099,     0,  1096,   208,     0,   105,     0,
       0,    52,   100,    99,   129,   130,   136,    98,   181,   182,
       0,     0,     0,     0,   201,   199,   172,   146,   171,     0,
       0,   150,     0,   173,   386,   194,    87,   140,   141,   144,
      86,     0,   197,     0,   207,   195,   145,     0,  1113,    70,
    1058,     0,     0,     0,    65,     0,     0,     0,     0,     0,
    1323,     0,     0,     0,   997,   978,   774,   877,     0,     0,
       0,     0,     0,     0,     0,  1005,  1002,  1003,  1004,     0,
       0,     0,     0,   941,   942,   955,     0,   946,   947,   944,
     948,   949,     0,     0,   934,   935,     0,     0,     0,     0,
     933,     0,     0,     0,     0,     0,     0,     0,     0,   128,
     128,   128,   495,     0,     0,   127,     0,     0,   647,   650,
    1127,   820,   830,     0,     0,     0,     0,     0,     0,     0,
     855,    43,    45,    46,    48,    47,   727,     0,     0,  1180,
    1178,     0,   819,   793,     0,   889,  1323,   810,   886,     0,
    1094,     0,     0,  1214,   707,     0,  1211,  1214,   670,     0,
    1214,    61,  1323,   822,     0,  1022,  1039,   938,   958,   939,
     959,  1134,  1160,     0,  1142,  1147,  1125,     0,  1125,     0,
    1144,  1148,  1125,  1143,  1125,  1138,     0,   895,     0,     0,
     298,     0,   292,   288,   358,   359,   360,   361,   368,   369,
     366,   367,   362,   363,   356,   357,   364,   365,   354,   355,
       0,   370,   371,   372,   373,   374,   375,   376,   377,   304,
     719,     0,   310,   718,     0,   654,     0,     0,     0,   640,
     636,     0,     0,     0,     0,     0,     0,   607,   608,   609,
     610,   611,   612,   613,   614,   615,     0,     0,   616,     0,
       0,     0,   342,   341,     0,   566,   577,   578,   579,   574,
     575,   576,   568,   569,   570,   571,   572,   573,   592,     0,
       0,     0,     0,     0,     0,     0,     0,   455,     0,     0,
     478,   557,     0,   594,   626,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   594,   632,     0,     0,   431,
     653,     0,     0,   430,     0,     0,     0,   684,   685,   387,
     401,   402,   403,   407,   717,   716,   661,     0,   655,     0,
       0,   388,   411,   416,     0,   633,   449,     0,   437,     0,
     424,     0,   435,   439,   412,   427,     0,   408,     0,   656,
     589,   591,     0,   587,     0,   398,   399,   400,   392,   393,
     394,   395,   396,   397,   404,   565,   563,   564,     0,     0,
       0,   540,   432,     0,     0,   434,   433,  1315,  1350,     0,
     119,   119,   119,   107,   117,   660,     0,   278,   128,   278,
       0,   385,   267,   710,  1109,  1097,  1098,   595,   709,  1064,
       0,   134,   135,     0,   139,  1545,  1438,     0,     0,     0,
       0,   174,   202,     0,   193,     0,   676,   175,   675,   176,
     179,   180,   151,   203,   665,   205,     0,   198,    91,    90,
     209,     0,    68,     0,     0,     0,     0,  1053,  1070,     0,
     653,  1086,   211,     0,    66,     0,   963,     0,  1323,   980,
       0,     0,     0,     0,     0,     0,   729,   765,   729,  1018,
    1323,  1214,  1323,  1214,  1222,  1290,  1454,   798,  1009,     0,
       0,   976,   871,   827,     0,   783,   999,  1014,   864,     0,
       0,   931,   965,   945,   950,   867,   954,   951,   920,   952,
     878,     0,   961,     0,   865,     0,   918,     0,     0,   967,
     869,   922,     0,     0,     0,     0,   599,   490,   601,   602,
     649,     0,  1126,     0,   821,     0,  1136,  1116,  1117,  1127,
       0,     0,   822,    44,     0,     0,     0,     0,     0,   820,
     813,   811,   841,     0,   818,   812,     0,     0,   769,     0,
    1174,     0,     0,     0,     0,  1095,  1091,  1182,   708,  1184,
       0,  1186,     0,     0,  1132,     0,  1131,  1130,  1135,  1129,
       0,  1124,     0,  1155,     0,     0,     0,     0,     0,     0,
     917,     0,   293,   289,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   604,   124,   454,     0,     0,     0,   637,
       0,     0,   528,     0,   503,   505,   311,   518,     0,   324,
     507,   509,     0,   581,     0,     0,     0,   519,   457,   458,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   473,   472,   520,
     556,     0,     0,   624,   625,   521,   352,   351,   353,   353,
       0,     0,   631,     0,     0,     0,   526,     0,   483,   595,
     562,   560,   336,   385,     0,     0,     0,     0,     0,     0,
       0,   438,   426,     0,   436,   440,     0,     0,     0,   420,
       0,     0,   418,   450,   414,     0,     0,   451,     0,     0,
       0,   496,   119,   119,   119,   119,   116,   118,     0,     0,
       0,     0,  1438,     0,   250,   210,   212,   237,   221,   219,
     250,   255,   498,   276,   499,   694,     0,   184,     0,   184,
       0,   911,  1100,     0,   131,     0,   582,   139,     0,   133,
     178,   177,     0,   149,   200,   147,     0,   206,    69,     0,
    1075,  1059,  1057,  1077,  1076,     0,   653,  1084,     0,     0,
    1075,     0,  1078,  1090,     0,    68,     0,     0,     0,     0,
     773,     0,     0,     0,   729,     0,     0,   837,     0,   824,
     998,     0,     0,     0,   972,  1017,   990,   982,   968,   996,
       0,     0,  1001,     0,   994,  1011,  1012,  1010,   739,   757,
    1015,     0,     0,     0,   770,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   493,   494,   491,   128,
     648,  1158,  1159,  1157,   936,   831,     0,     0,     0,   889,
      42,     0,     0,  1181,   822,     0,   797,   793,     0,   791,
     790,   792,     0,  1175,    62,     0,  1170,   888,     0,     0,
     883,  1214,     0,  1156,     0,  1120,  1161,  1145,  1150,     0,
    1154,  1152,  1151,  1146,  1149,   298,     0,   298,     0,   284,
       0,   296,     0,   305,   378,   379,   380,   381,   382,   383,
     384,   330,     0,   639,   635,     0,   500,   605,     0,   593,
     619,   618,   456,   468,   469,   470,   620,     0,     0,     0,
     465,   466,   467,   459,   460,   461,   462,   463,   464,   471,
     629,   628,   622,   623,   348,   346,     0,   523,   524,   525,
     630,     0,   559,   683,   389,     0,     0,   417,   634,   441,
       0,     0,     0,   413,   581,     0,     0,     0,     0,     0,
     422,     0,     0,     0,   543,   538,   539,     0,     0,     0,
       0,   110,   109,   115,   250,   255,     0,     0,    93,     0,
     219,   694,     0,   249,   168,   248,     0,     0,   261,   259,
       0,   261,     0,   261,     0,     0,     0,   235,   238,   168,
       0,   251,   168,   248,     0,   268,   668,   277,     0,   191,
     490,   191,     0,   106,     0,   132,   137,   138,   148,   666,
      67,     0,    63,     0,  1065,     0,     0,  1062,  1052,     0,
       0,  1087,  1075,  1066,   872,   729,     0,     0,   979,     0,
     839,   785,   817,   800,     0,     0,     0,   730,     0,   805,
       0,   971,   991,     0,   987,     0,  1016,     0,     0,     0,
       0,     0,   986,   974,     0,   969,     0,  1214,  1214,   977,
     702,  1594,  1595,  1596,  1597,  1598,  1599,  1600,  1601,  1602,
    1603,  1604,  1605,  1606,  1607,  1608,  1609,  1686,  1610,   736,
    1611,  1386,  1612,  1613,  1614,     0,  1615,   287,  1616,  1617,
    1618,   568,   569,   832,   733,   735,     0,   826,   731,   734,
     703,   732,   829,   784,   868,   921,     0,   866,     0,   919,
     875,   873,   870,   923,     0,  1139,  1119,     0,     0,     0,
    1323,     0,   889,  1179,   819,     0,   847,   769,   842,     0,
    1174,  1172,     0,  1169,     0,     0,     0,  1187,     0,  1133,
       0,  1153,   295,     0,   294,     0,   290,   297,   638,   516,
     527,   617,     0,     0,     0,     0,   522,   517,   447,   445,
     442,     0,   443,   421,     0,     0,   419,   415,     0,   452,
     529,     0,   545,   542,   114,   113,   112,   111,   218,   216,
       0,     0,   239,   223,     0,   694,   246,   161,   167,   217,
       0,   213,     0,   260,   256,     0,   257,     0,     0,   258,
       0,     0,     0,   236,   214,     0,   694,   215,     0,   275,
       0,     0,   534,   681,   534,   912,     0,  1074,  1054,     0,
    1055,  1085,     0,     0,     0,     0,  1079,  1049,   835,   981,
       0,   817,     0,   729,   802,   801,   804,   799,   803,   806,
       0,     0,     0,     0,     0,   786,     0,     0,     0,   750,
       0,     0,   817,   823,   746,   747,   856,     0,     0,     0,
     983,   973,   970,   975,   984,     0,     0,   985,   988,   283,
    1000,   993,  1686,  1693,     0,     0,     0,     0,     0,   492,
    1115,  1122,   936,     0,     0,     0,     0,     0,   819,     0,
       0,     0,  1174,     0,     0,   725,     0,   766,     0,    59,
    1173,     0,  1162,     0,   881,   882,     0,     0,  1121,   291,
     285,   474,     0,     0,     0,   444,   448,   446,   423,   531,
       0,   128,   271,     0,   274,   224,   220,     0,     0,     0,
     156,   163,     0,   166,   160,     0,   240,     0,     0,   242,
     244,     0,     0,     0,     0,     0,     0,     0,   279,     0,
       0,     0,   671,     0,   183,   185,   188,   187,   190,     0,
     159,   159,   583,     0,     0,     0,  1081,  1081,  1088,     0,
       0,  1067,     0,   729,     0,   816,   836,   764,     0,     0,
     748,     0,   754,     0,   788,   789,   787,   749,   817,   822,
     751,   857,     0,   992,     0,  1008,     0,     0,   828,   876,
     874,  1139,     0,     0,   889,  1169,     0,     0,   793,    62,
    1171,   782,   775,   776,   777,   778,   779,   780,   781,   796,
     795,   767,   768,     0,     0,     0,   883,     0,   475,     0,
     476,     0,   548,   276,     0,     0,   270,   222,     0,   154,
     152,   155,   157,   153,     0,     0,   247,   263,     0,   243,
     241,   225,     0,   225,     0,   252,     0,   283,     0,   254,
     189,     0,   533,   535,     0,     0,    95,    94,     0,  1061,
       0,     0,  1083,  1083,   278,     0,  1069,     0,   822,   838,
     815,     0,   808,   807,     0,     0,   745,     0,   752,   846,
     738,   282,     0,   995,     0,   833,  1114,  1118,     0,     0,
    1163,     0,  1169,   769,  1174,     0,  1166,     0,     0,   889,
     477,   544,     0,     0,     0,   269,   272,     0,   245,     0,
       0,     0,   226,     0,   225,     0,   225,   280,   281,   253,
     186,     0,     0,   161,  1056,  1081,  1080,  1082,   136,   136,
    1060,  1089,     0,   846,     0,   794,     0,   772,   738,     0,
     763,     0,   989,  1007,   834,     0,     0,   819,  1164,   726,
      60,  1167,  1168,     0,   278,  1517,  1266,  1488,     0,   546,
     549,   547,   541,     0,   164,     0,   170,   262,   227,     0,
       0,     0,     0,     0,   536,   537,   158,  1083,   139,   139,
     278,   763,   814,   809,     0,   753,   755,   843,   844,   845,
       0,   759,   756,   760,     0,     0,  1169,     0,   879,     0,
     553,   552,   551,   555,   554,   273,     0,     0,   162,   228,
     229,     0,     0,     0,     0,   136,  1072,  1071,  1068,   729,
     771,     0,     0,     0,   761,     0,   762,   737,     0,  1165,
     889,     0,   165,     0,   230,     0,   232,     0,   234,     0,
     139,   840,   742,     0,   741,     0,   825,   758,     0,   278,
     550,     0,     0,   231,   233,  1073,   740,   744,   743,   728,
     880,   169
};

  /* YYPGOTO[NTERM-NUM].  */
static const yytype_int16 yypgoto[] =
{
   -2552, -2552, -2552,  1862, -2552,   616, -2552, -2552, -2552,   818,
   -2552, -2032,    18,  1566,   398, -2552, -2552,  1320,     3,   177,
     -33,    41,    54,    49,    65,  1619,  1622, -2552,  -980,   678,
   -2552, -2552,  -587,   -34, -2552,   752, -2496, -1960,  -421,  1097,
    1585,  1596,  -257,  -172, -2552,  -340, -2552,  -801, -2552, -2552,
     753,  1140, -1170, -1221, -2552,   466, -2552,  -255, -2552,   206,
    -418,  1124, -2552,  1610, -2552, -2552, -2552, -2552, -1119,   751,
   -1883, -1632, -2428,   223, -2552, -2552,   490, -1897, -1790,   253,
     237,  -924,  -120,    39,   504,  -208, -2552, -2552,  -206, -1653,
   -2062,  -225,  -222, -2552, -2552, -1026, -1430,  -867, -2552, -2552,
    -630,  -487, -2552, -2552, -2552,  1556,  1783, -2552, -2552,  1796,
    2174, -2552,   231,  2225,  -703,  -735,  1310, -1135,  1315, -1130,
   -1140, -1149,  1316,  1319, -1171,  3229, -1517,  -776,    23, -2552,
   -2148,  -940, -2552, -2552,    29, -2552,  -289, -2552,  -284, -2552,
   -2552, -2552,  -261, -2551, -2552,  1235,   913, -2552, -2552, -1180,
   -2552,  3432,   825, -2552, -1562,  -561,  1345,  -639,  -894, -1448,
   -2552, -2552, -2552, -2552, -2552, -2552, -1163, -1698,  -912,   878,
   -2552, -2552,   992, -2552, -2552,  -975,  -579,  1100,  -537,  -753,
     885, -2552,  -536,  1244, -2552,   683,  -501,   264,  -962,    24,
   -2552,  -216,    28,    -6,  -788, -2020, -2552, -2552,  -507, -2111,
    -819, -2552,  -610, -2552, -2552, -2552, -1088, -1017, -2552, -2552,
   -1713, -2351,  -283, -2552,  -366, -2552,  -113, -1691,  -334,  -321,
   -2552, -2286,  -851, -2552,  1659,   -17, -2552,   797, -2552, -2018,
   -2552, -2552,   784, -2552,  -853, -2552, -2552, -1768,   435,  -262,
   -2198, -2280,   742,  -620, -2552,  -313,   476, -1677, -2552,   810,
   -2552,  -251, -2552,  -476, -2073, -2552, -2552, -2552, -2552,  -829,
   -1013, -2552,  -133, -2552, -2552, -2023, -2552, -2552, -2552, -2552,
     807, -2552,  1068, -2552,   897, -2552, -2552, -2552, -2552, -2552,
    -607,  -887,  -706,  -904, -2552,   246, -2552, -2552, -2552,   503,
   -2552,  1181, -2552,   494,  -504,   817, -2552, -2552,  -374, -2552,
    -438,  -433, -2552, -2552,    25,  -689,  1487, -2552,    37, -2552,
      38, -2552, -2552, -2552, -2552,   295,   538, -2552,  -162, -1835,
      95, -2552, -2394, -2486, -2552,  -227, -2372, -1648, -2552, -2552,
   -2552, -2552,  1272, -2552, -2552, -2552,  1276, -2552, -2552, -2552,
   -2552, -2552, -1106,   768, -2216, -2552,   729, -2552, -2552, -2552,
   -2552,   184,   489, -2552, -1007, -2034,    88, -2268, -1034, -2552,
   -2552, -1006,   488, -2552, -2552, -2552,  1535,  -599, -2552,  1709,
   -2552, -2552, -2552,  -503, -2552, -2019
};

  /* YYDEFGOTO[NTERM-NUM].  */
static const yytype_int16 yydefgoto[] =
{
      -1,    35,    36,    37,    38,  1059,  1441,    39,    40,   560,
      41,   658,   529,   883,  2030,  1732,    43,    84,   530,   798,
      46,    47,    48,   581,   575,   576,  1294,  1683,  1988,   862,
     554,   555,   594,  1425,  1324,  1325,  1704,  2019,  1349,  1350,
     871,   872,  2601,  2736,  2602,  2603,  2458,  2459,  2888,  1337,
    1341,  1342,  1717,  1710,  1330,  2269,  2624,  2625,  2626,  2482,
    1345,  1346,   874,   875,   876,  1354,  1727,    50,  1687,  1995,
    1996,  1997,  2793,  2257,  2258,  1998,  1999,  2243,  2244,  2262,
    2254,  2464,  2609,  2000,  2001,  2592,  2593,  2706,  2265,  2007,
    2617,  2618,  2665,  1874,  1165,  1166,  1503,  1167,   799,  1168,
    1200,   800,  1206,  1170,   801,   802,   803,  1173,   804,   805,
     806,   807,  1189,   808,   809,  1223,  1521,  1522,  1523,  1524,
    1525,  1526,  1527,  1528,  1529,   849,  1586,   811,   812,   813,
    2003,   814,  1286,  1671,  2630,  2732,  2733,  1981,  2225,  2442,
    2591,  2784,  2839,  2840,   815,   816,  1237,  1238,  1668,  1281,
    1282,   817,  2364,  1284,  1579,  1606,  1233,   957,   958,  1178,
    1556,  1557,  1582,  1906,  1589,  1595,  1933,  1934,  1607,  1636,
     818,  1539,  1540,  1890,  1191,   819,   617,   964,   618,  1186,
    1630,   827,   820,   821,  1723,   567,  2605,   654,  1047,   822,
     823,   824,   825,   826,   569,   959,   469,  1179,  2807,  1079,
     854,   960,  1767,  1626,    51,   726,   621,    52,    53,    54,
    2057,  2367,  2822,  2079,  2926,  2523,  2524,  1768,  2871,  2872,
    2059,  2123,  1388,  2865,  1830,  2689,  1774,  1756,  2525,  1838,
    2645,  2396,  1769,  2307,  1831,  2510,  2751,  1458,  1832,  2752,
    2503,  1833,  1432,  1453,  2309,  2873,  1775,  1433,  2368,  1376,
    1834,  2820,  1835,   489,  2528,    55,   549,   550,    56,  1379,
      57,  2575,  2406,  1069,  1459,  1842,   490,    58,    59,    60,
     561,   562,  1111,  1305,  1112,    61,    62,    63,    64,    65,
    1449,  1406,  1113,   913,  1396,  1102,    66,  2066,  2067,  2068,
    1770,   894,  2763,  1771,   895,   896,  2070,    67,   601,  1103,
     531,  1104,  1105,   714,    68,  1114,   716,   717,   533,    70,
     534,  1738,  1361,  2494,    72,  2037,  1741,  2040,  2638,  2282,
    2035,  2041,  2742,  2808,  2038,  1742,  2639,  1743,    73,   491,
    1071,    74,   845,   572,   846,   848,    75,    76,  1819,  2552,
    2134,  2553,  1862,  1813,  1109,  1858,  1482,  1435,  1110,   476,
    1495,  2135,  2104,  1483,    77,  2572,   535,  2126,  1066,    79,
     541,    80,  1450,    81,   521,   522,   651,  1083,   523,   499,
     471,   472,  1181,  1050,   962,  1051
};

  /* YYTABLE[YYPACT[STATE-NUM]] -- What to do in state STATE-NUM.  If
     positive, shift that token.  If negative, reduce the rule whose
     number is the opposite.  If YYTABLE_NINF, syntax error.  */
static const yytype_int16 yytable[] =
{
     468,   580,   912,    44,  1055,   498,  1048,  1240,  1410,   498,
     877,  1101,   850,   595,   650,   542,   498,   548,    42,   828,
     548,   653,  1177,   568,  1409,   719,   498,   498,  1106,   466,
     467,   839,  1393,  1375,   548,  1578,  2009,    69,    71,  1052,
    1385,   532,  1442,   589,  1242,  2060,  1443,  1225,   540,    49,
     659,  1871,  1444,  1445,  1086,  1553,  1474,  2275,  1421,  1381,
    1287,  1358,  2366,  2371,  1552,    49,  1908,  1909,   566,  1549,
    1873,  1928,  1297,  2075,  1551,  2077,  1617,  1618,  2056,   568,
     498,   568,   568,   568,  1968,  1115,  2389,  1414,    78,   660,
     597,  2042,  2400,  1344,  1533,   713,  1089,  1093,   578,  2397,
    2255,   735,   735,   598,  2261,   914,  -674,   918,   474,   922,
    2239,  2565,  1955,  1956,  2560,  -699,  1464,  1911,  -699, -1584,
    2741,  1722,  -345,  -696,  -696,  1201,  1306,   611, -1573,  1303,
    -353, -1584,  2569,   840, -1695, -1695, -1675, -1675,  1366, -1686,
   -1686, -1591,  1214,  -700, -1591,  1628,   526,  1839,  2112, -1693,
   -1693,  -697,  -697,  -350,  1057,   539,  1628,  -350,   720,  1686,
     539,  -700,     3,     4,   735, -1573,  -312,   602,  2507,  2550,
    1719,  -566,  1665,   870,  1073,  -585,   873,    45,  -566,  1666,
    1689,  -325,  -585,  -340,  1292,   539,  1649,  2922,   539,  2140,
    2142, -1123,  -353,    45,  1394,  2668,  1177,  1397,  1398,  1080,
    1888,  1817,   735,  1377,  2697,  2288,  1251,  1960,  1251,  1377,
    2259,   579,  2119,  1412,   719,   479,  2492,    45,  1074,  2088,
     719,  1300,  1093,   539,  1386,  1619,   596,   735,  2867,  1386,
     -81,   592,  1232,  1236,  1961,  2192,  1369,  1257,  1169,  1257,
     592,   644,  1590,  2743,  2711,  2533,  2709,  1437,   570,  1080,
    1080,  1701,  2566,   603,  2177,  2545,   866,  2809,  2693,  -936,
    1052,  1243,  1288,   -84,  -936,   536,  2694,  2567,  1331,  1259,
     552,  1259,   480,  2746,  2881,   497,   860,  1673,  1725,   525,
    2937,  2401,  1107,  1328,  2879,  1419,   543,  2301,  1500,  1298,
    2276,  2712,  1420,  1220,  2680,  2795,   577,   577,   841,  1251,
     842,    82,  2594,  2643,  2006,  2423,  2504,  1911,   537,  2082,
     866,  1650,  2858,  2859,  1332,  1221,   615,   590,  1357,  2033,
     616,  1754,  2083,   -81,  2660,  1651,   868,  2901,  1251,  1222,
    1652,   719,   719,  1301,   539,  2544,  1754,  1702,  2261,   833,
    1408,  2300,  2169,  1911,  2654,  2636,    83,  1757,  1962,  2044,
     607,  2277,  1319,  1963,  2034,  1590,   -84,  2868,    25,  1257,
    2930,  2404,  1259,  2461,  1438,  1653,  2851,  2465,  2853,  2559,
    1424,  2895,   553,  1333,  2297,   869,  2299,  2505,   861,  1755,
     868,   591,  1864,  1726,  1371,  1329,  1868,  2656,  1869,  1075,
    2178,  1259,  2923,    29,  2053,  2173,  2174,  2175,  2176,  2920,
    2179,  2180,  2181,  2182,  2183,  2184,  2185,  2186,  2187,  2188,
    2189,  2857,  1169,  1387,    25,  2655,  2621,  1674,  1387,  2453,
    2882,  1334,  1384,  2454,  2493,  2713,  1225,  2710,  2636,  1138,
    2695,  1461,  2869,  2666,    31,  2747,  2938,  1423,  2402,  1818,
     484,  1587,   485,  2653,  2448,  2568,  1498,  1455,    32,    29,
    1302,  2424,  1177,  2216,  2217,  2766,  1355,  2497,   592,  1356,
    2758,  2877,  2411,  2862,   538,  1293,  1578,   487,  1048,  2924,
     568,   568,    33,  2421,  1315,  1384,   604,   632,   620,  1335,
    1384,  1081,   568,  2044,  2508,   568,    34,  2829,  2022,   498,
      31,  1964,  1076,   619,  1372,   580,  2925,  1629,  1481,  1201,
    2551,  1099,  1965,  1848,    32,  1883,  2830,  1099,  1970,  1538,
    1654,   -81,   622,   623,  1749,   649,   498,   498,  2212,  1214,
    2011,  -566,  1667,  2016,    49,  -585,  2366,  2371,    33,  1806,
     645,  1081,  1081,   615,  1413,  2101,  2102,   616,  1719,  1289,
    2089,  2657,    34,   600,   -84,  1410,   475,  2560,  1177,  1532,
     548,  1565,   548,   715,  1711,  2596,  2594,  1188,  2728,   568,
    1566,  1567,  1568,   878,   721,  2256,   722,   571,   498,   573,
     650,   843,   -81,  1097,  1098,  1466,    49,   834,  1220,  2606,
    2151,  1470,  2498,  1467,  2610,   830,    44,  2612,   615,   719,
    -674,  1926,   616,  1247,   593,   568,   844,  2636,   568,  -699,
    1221,    42,  -699, -1584,  1806,   -84,  -345,  1535,  1590,  1590,
    1228,  2013, -1573,  1590,  1222, -1584,  1099,  2509,  1099,  1099,
      69,    71,   597,  2045,  1534, -1591,  1232,  -700, -1591,   568,
     568,   568,    49,  1082,  1542,   598,  2902,  -350,  1546,   851,
    1220,  2770,  2496,   884,  1246,  -700,  1625,  2774,   835, -1573,
    1199,  2769,    45,  1475,  1590,  1590,  1688,  1592,  1594,   713,
    2773,   729,  1221,  1535,  1052,  1205,  2064,  -340,  1169,  1295,
    1177,    78,  1690,  2535,  2536,  2563,  1224,  1277,  1278,  1279,
    1280,   -81,  1280,  1085,  1099,  2636,  1377,  1099,  1099,  1941,
    1783,  1943,  1944,    85,  2324,   582,  1378,  1243,  1097,  1098,
    1786,  1989,  1990,  1789,    45,   579,  1404,  1386,  1535,  2782,
    1399,  2555,  2486,  2561,   -84,  2412,  1331,  2414,  1535,  1052,
     -81,  2564,   -81,  1184,  1578,  2843,   583,  2667,  2719,  1386,
    1405,  2157,  2159,  2160,  1465,  -936,  -936,  2783,  2828,  2311,
    2156,  2158,  2303,  2171,  2154,  1100,  2004,  1377,     3,     4,
    2155,  1100,  1631,   -84,   723,   -84,  2834,  1380,   596,   641,
      45,   580,  1332,  2431,  1169,   724,   599,  1386,   606,    49,
     609,  2193,   613,  1251,  1773,  1856,  1921,  1922,  1923,  1924,
    1925,  1926,  2203,  1220,  1220,  1781,   614,   656,  2248,  1239,
    2646,  2004,  1857,  2115,  2366,  2371,  1177,  1275,  1276,  1277,
    1278,  1279,  1280,  1757,  1257,  1221,  1221,  1587,  1587,   526,
    2312,   626,  1587,   627,  1923,  1924,  1925,  1926,  1386,  1224,
    2249, -1672, -1672,  1415,  1240,  2304,  2015,  1244,  1177,   628,
     568,   629,  1802,  1803,  1804,  2467,  1259,  1248,   577,   630,
    1091,   547,  2909,  1092,  2251,  1418,   498,   498,  1400,  2149,
    1296,    86,   638,  1587,  1587,  1048,  1401,  1948,   588,    87,
    1304,  1746,  1100,  1100,  1847,  2165,  2764,  1865,  1849,  1334,
    1404,  1851,  1866,  1465,  2012,   568,   568,  1410,  1364,   568,
    1373,  1478,  1480,  2087,   642,  2172,  1169,  2929,  1782,  2305,
    2313,  2306,   568,    88,  1405,  1784,  1387,    45,  2896,  2897,
    1787,  2526,  2016,  1322,  1323,  2581,  1327,  1792,  2511,   568,
    1477,  2099,  1799,   568,  2196,   735,   598,   598,  1387,   598,
     884,  2201,  1867,   886,    25,  2527,  1637,  1335,   643,   887,
    2749,  1386,   634,    25,  2091,  1203,   646,  1590,  1590,  1590,
    1590,    89,   647,  1590,  1590,  1590,  1590,  1590,  1590,  1590,
    1590,  1590,  1590,  1638,  1411,  2514,  1387,  2753,  1384,    29,
    2935,  2090,   615,  2253,  1824,  2453,   616,   635,    29,  2454,
    1313,  1234,  1196,  1314,  1193,  1194,  1886,  2584,   719,  1479,
    1384,  1544,  1545,  1316,   735,  2120,  1317,  2043,   886,  1559,
    2127,  1560,  1561,   719,   887,  1590,  1590,  2652,   657,  1211,
      31,   636,  2227,  2228,  2229,  2230,  1598,  1387,  1599,    31,
    2020,   886,  1169,  2516,    32,   735,   727,   887,  1384,  1569,
    1570,  1571,   725,  1572,  1573,  1574,  1575,  1576,  1577,  1615,
    2599,  1209,  1210,  1612,   888,  2600,  1613,   728,    33,   596,
     596,  1942,   596,  1836,  1169,  1837,   -93,  2095,  1431,   637,
     568,  2004,    34,  2004,   568,   568,  2363,  1471,   730,   -93,
    1317,    34,  1639,  1457,   -93,  2698,   615,  1640,  -674,  1384,
     616,   649,  1641,  1958, -1670, -1670,   649,    25,   498,   498,
    1497,   498,   649,  1498,   568,  1530,  1698,  1730,  1531,  1085,
    1317,  2810,  1814,  1442,  1578,  1815,   838,  1443,  2408,   888,
     729,  2008,  1845,  1444,  1445,  1498,  2755,  2061,   832,   866,
     -93,  2519,    29,  1236,   867,   847,   577,   715,  1859,   852,
    1387,  1860,   888,  1718,  1718,  1884,  1177,  -127,  1317,   -93,
    1892,  1896,  -127,  1317,  1317,  2699,  1587,  1587,  1587,  1587,
      49,   853,  1587,  1587,  1587,  1587,  1587,  1587,  1587,  1587,
    1587,  1587,  1930,    31,  2520,  1317,  1982,   527,  1983,   624,
     625,  2323,  2072,   855,  2074,  2080,  2133,    32,  2081,  2521,
     886,   633,  1177,  1984,   639,  1985,   887,  2315,   -93,   868,
    1099,  2878,  1384,   858,   889,   620,  2921,   -93,  1177,  2084,
    1099,    33,  2085,  1099,  1587,  1587,   856,  -127,  2145,  2298,
     619,  1531,  2109,  2194,  2195,   528,   859,  2898,  1177,  1580,
    1642,   864,  2314,  1734,  2322, -1671, -1671,  2385,  2062,   622,
     623,  1643,   899,   634,   734,   881,  2147,  1911,   869,  2148,
     879,    49,  1558,  1912,  1913,  1914,   882,  1177,   891,   886,
    2161,   900,   885,  1317,  1177,   887,  -127,   897,   837,   889,
    1481,  2208,  2848,   649,  1317,  2849,   898,  2681,   635,  2916,
     886,  2918,   915,  1177,  2522,  1099,   887,   892,    45,   863,
     919,   865,   889,  1512,  1513,  2285,  2940,  1053,  2286,  2289,
    1099,   888,  2290,  2284,   880,  2933,   568,  2934, -1673, -1673,
    2302,   901,  2111,  1815,  2392,  2409,  1056,  1815,  2410,   890,
    2539,  1054,   734,   891,  1878,  1911,  2004,   568,  2682,   568,
    2004, -1697, -1697, -1697,  2432,  1058,  2683,  1531,  1063,  1065,
    1067,  1060,   916,   -93,   886,    90,   891,  2466,   473,  2469,
     887,  1691,   892,   893,   524,  2500,  1061,   479,  1815,   844,
     637,  1068,  1169,  2131,   551,  2684,  1070,   568,   563,  1468,
     888,  1469,   719,  1193,  1194,   917,  1740,  1744,  -891,    45,
    2489,  1373,   498,   829,  1737,   831,  2016,  2501,   889,  1535,
    1815,   888,   498,  1759,   498,  1763,  2369,   498,  1211,  1177,
     902,  1516,  1517,   498,  2200,   498,  1072,   615,  1169,  2580,
     855,   616,  1735,  1077,   480,  1078,   649,   498,   893,  1084,
    2585,   649,   498,  1531,  1169,  1087,   498,   498,   498,   498,
    2647,   498,   498,  2648,  1088,  2685,  1506,  1507, -1674, -1674,
    2323,   893,  2063,  2064,  1169,  2674,  2686,    25,  1815,   903,
    1916,   889,   568,  1823,  1108,   888,  1182,   904,  1090,  1635,
    1562,  1563,  2700,  2499,  1183,  1531,  1829,  1590,   482,   905,
    1185,  2065,  2703,  1169,  2456,  2704,  1187,  1840,  2474,    25,
    1169,  2477,    29,  2716,  1535,  -316,  1085,  -323,  2266,  1192,
      25,  1195,  2456,  2372,  2010,  1773, -1676, -1676,  1196,  1169,
     906,   920,  1512,  1513,  2725,   891,  2729,  2726,  1500,  2726,
    2744,  2021,  2021,  2745,    29,  1875, -1677, -1677,  2779,  1917,
     889,  2745,  1197,    31,  2780,    29,  1198,  1531,  1177,  1100,
    2004,  1202,  2384,  -313,   921,  1863,    34,    32,  2247,  1312,
    2363,   889,  2004,  2788,  1100,   908,  1085,  2004,  2799,  -314,
    2004,  2726,  2407,  2815,  2844,    31,  2816,  2845,    45,  1590,
    2847,    33,  2885,  1085,  1204,  2726,    31,   909,  2910,    32,
    1745,  2745,   580,  2004,   891,    34, -1678, -1678, -1679, -1679,
      32,  1207,   484,  1208,   485,  1360,  1213,   911,  1365,  1720,
    1721,  1790,  -317,    33,  1215,   891,  1216,  1917, -1680, -1680,
     893,  1392,  1217,   892,    33,   889,   486,  1736,  1218,   487,
    1516,  1517,  -315,  2727,  2248,  1169,  2727,  1219,    34, -1681,
   -1681,   580,  1416,  1226,  1791,  1227,  1239,  1590,  1241,  2531,
   -1682, -1682,  1228,  2687, -1683, -1683,  2688, -1684, -1684, -1685,
   -1685, -1687, -1687,  1177, -1688, -1688,  2249, -1689, -1689, -1690,
   -1690,    45,  1750,  1245,  2016,  1797,  2004, -1691, -1691,   891,
    1580,  2250,  1758,  1285,  1761,  1291,  1587,  1772,  1292,   893,
    2251,  1293,  1177,  1776,  1307,  1778, -1692, -1692, -1694, -1694,
    2150,  2152, -1696, -1696,  1320,  2671,  1321,  1785,  1798,   867,
     893,  2004,  1788,   568,   869,  2907,  1793,  1794,  1795,  1796,
    2005,  1800,  1801,  1351,  2252,  -174,  -174,  1052,  1426,  1427,
    -178,  -178,  1918,  1919,  1920,  1353,  1921,  1922,  1923,  1924,
    1925,  1926,   620,   580,  2266,  1535,  -177,  -177,  1362,  2002,
     467,  1382,  1177,  1514,  1515,   470,  1383,   619,  1516,  1517,
    1384,  2133,  1177,  1389,  1169,  2005,  1390,  2031,  2540,  2541,
    2036,  1309,  1311,  1740,   893,  1391,   622,   623,  1587,  1436,
    1395,  1402,  1403,  1446,  1447,  2487,  1407,  1422,    49,  1431,
    1417,  1430,  1429,  1434,  2002,   467,  1439,  1440,  1448,  1451,
    1452,  1454,  1234,  1462,  2004,  1465,  1496,  1188,  1199,  2253,
   -1697, -1697, -1697,  1473,  1921,  1922,  1923,  1924,  1925,  1926,
    1205,  1499,  1501,  1250,  1502,  1537,  1251,  1543,  2363,  1538,
     735,  1596,  1252,  1253,  1254,  1597,  1251,  2078,  1317,  1609,
    1611,  1634,  1614,  1627,  1645,  2004,  1587,  1646,  1648,  1431,
    2511,  1234,  1669,  1670,  1692,   568,  2512,  1257,   590,  1431,
     568,   568,   568,  1686,  1258,   591,  1699,  1700,  2513,  1635,
    1713,  -128,  1712,   498,  1714,  1731,  -128,  1733,   568,  1169,
    2369,  2103,  1715,  1177,   649,  1977,  1751,  1747,  1752,  1259,
    1753,   592,  1807,  1812,  1816,  1820,  1840,  2514,  1821,  2515,
    1431,  1431,  1825,  1994,   734,  1826,  1099,  1911,  1169,  1827,
    1844,  1841,  1850,  1912,  1913,  1914,    45,  1853,  1861,  1843,
    1177,  1872,   591,  1100,  1852,  1879,  1880,  1876,  1881,   886,
    2137,  1882,  2138,  2004,  1877,   887,  2143,  2144,  1580,  1885,
     734,  -128,   899,  1911,  1898,  1894,  1895,   719,  1994,  1912,
    1913,  1914,  1897,   579,  1904,  2516,  1177,  1899,  1900,  1177,
    1901,   900,  1903,  1907,  1929,  1935,  2205,  1936,  1169,  1937,
    2413,  1938,  1939,  1946,  1952,  1959,  1954,   734,  1169,  1966,
    1911,  1976,  2517,   580,  2222,  1975,  1912,  1913,  1914,  1260,
    -128,  1980,  2006,  -179,  1978,  1979,  2018,  2024,   899,   592,
     580,  -180,   899,  1261,  2023,  2026,  2027,  2032,  1262,  2029,
    1410,   901,  2039,  2046,  2226,  1684,  2047,   900,  2049,  2051,
    2052,   900,   568,   568,   568,   468,  2055,  2241,  2245, -1697,
   -1697,  2058,  2247,  2071,  2245,  2263,  1693,  2073,  1695,  2086,
     888,  2092,  2093,  1265,  2702,  2650,  2096,  2094,  2518,  2121,
    2097,  2100,  2098,  2519,  2002,   467,  2002,   467,  2107,  2117,
     568,  2122,  2125,  2128,  2118,  2129,  2132,   901,  2139,  2146,
      45,   901,  2164,  1932,  2750,  1911,  1724,  2153,  1740,  2759,
    1931,   498,  2210,  2197, -1697,  1431,  1373,  1431,  2198,  1457,
    2199,  2211,  1987,  2214,  2236,  2223,  2520,  2268,  1268,  1169,
     902,  2246,  1236,  2264,  2270,   498,  2272,  2328,  2248,  2273,
   -1697,  2521,  2274,  2278,  2281,  2283,  2287,  2296,  2310,  2308,
     498,   498,   498,   498,   498,   498,   498,   498,   498,   498,
    2395,  2326,  2388,  2399,  2318,   593,  1169,  2708,  2394,  1099,
    2249,   568,  2422,  2124,  1099,   568,  1916,  2405,  2369,   903,
    2365,  1177,  1373,  1815,  2416,  2250,   902,   904,  2425,  2708,
     902,  1822,  1915,  1457,  2251,  2419,   568,  2450,  2813,   905,
    2417,  2403,  1169,  1431,  2103,  1169,  2426,  2427,  2440,  1917,
    2781,  2452,  2415,  1916,  2457,  1478,  1480,  2460,  1270,  2462,
     889,  2463,  2470,  1234,  2471,  2472,  2479,  2761,  2252,  2478,
     906,  2480,  2481,  2506,  2502,   903,  2522,  2495,  2234,   903,
    2238,  2529,  2530,   904,  2534,  1917,  2546,   904,  -696,  2607,
    2547, -1670,  2554, -1671, -1672,   905, -1673, -1674, -1675,   905,
   -1676, -1677, -1678, -1679, -1680, -1681, -1682,  2556, -1683, -1684,
     907, -1685, -1687,  2557,   891,   908,  2750, -1688, -1689,  2548,
   -1690, -1691,  1917, -1692,  2874,  2549,   906,  2791,  2443, -1693,
     906,   568,   568,   568,   568, -1694,  2558,   909,  2245,  2263,
   -1695,  2451,  2245,   910,  2806, -1696,  2455,   718,  -697,  2570,
    2005,  2573,  2576,  2253,  2005,  2571,  2577,   911,  1271,  2579,
    2582,  1272,  1273,  1274,  2476,  1275,  1276,  1277,  1278,  1279,
    1280,   908,  2590,   470,   470,   908,  2583,  2598,  1580,  2002,
     467,  2611,  2595,  2002,   467,  2620,  2629,  2632,  2634,  2640,
    2036,  1171,   470,   909,  1740,  2642,  2488,   909,  2490,  2658,
    1373,  2661,  2644,  2649,  2662,  2663,  2664,  2672,  2483,   893,
    2485,  2676,  2677,   911,  2678,    45,  2701,   911,  2691,  2692,
    2705,  2294,  2707,  2714,  2715,  2538,  2718,  2722,  2735,  1478,
    1480,  2741,  2724,   961,   470,  1049,  2731,  1169,  2757,  2608,
    1099,  2738,  1918,  1919,  1920,  2327,  1921,  1922,  1923,  1924,
    1925,  1926,  2760,  2762,  2768,  2765,  2775,  2776,  2777,  2787,
    2374,  2375,  2376,  2377,  2378,  2379,  2380,  2381,  2382,  2383,
    2792,  2802,  1986,  2801,  2803,  2812,   470,  2814,  1918,  1919,
    1920,  2657,  1921,  1922,  1923,  1924,  1925,  1926,  2819,  2818,
    2821,  2824,  1431,  2825,  2826,  2827,  2831, -1477,  1829,  2832,
    2842,  2833,  2864,  2870,  2846,  2850,  2852,  2880,  2562,  2574,
    2224,  2886,  2887,  2889,  2890,  1918,  1919,  1920,  2892,  1921,
    1922,  1923,  1924,  1925,  1926,  2891,  2893,  2900,  2894,  2903,
    2905,  2908,  2911,  1994,  2914,  2913,   718,  1994,  2912,  2915,
    2917,  2919,   718,   961,  1180,  2901,  2902,  2931,  1100,  2110,
    2936,  2939,  2941,  2292,   468,   857,  2245,  1359,  2597,  1299,
     470,  2604,  2014,  1729,   498,  1171,  2005,  1348,  2790,  2737,
      45,  2005,    45,  2856,  2005,  2614,  2616,  1347,  2025,  2619,
    1709,  1318,  2622,  2002,   467,  2271,  2800,  2484,   470,  1728,
   -1477,  2473,  2028,  2240,  1352,  2002,   467,  2637,  2449,  2468,
    2002,   467,  2720,  2002,   467,  2235,  2786,  2785,   470,   470,
     470,  2797,   470,   470,  2108,  2798,   649,   498,  1172,  2113,
    2114,  2116,  2854,  2631,  1548,   568,  2002,   467,  2855,  1550,
    1554,  1174,  2841,  1555,  1675,  1950,   470,  2130,  2017,  1811,
    1973,  1889,  1536, -1477,  1971,  2866,  2927,  1685,  2756,  2906,
    2899,   498,   498,   718,   718,  1374, -1477,  2690,  2673,  2076,
    2054, -1477,  1373,  2398,  2863,   498, -1477,  2105,  2904,  2675,
    2050,  2373,  2861,  2778,  1870, -1477,  2537,   568, -1477,  2325,
    2637,  1777,    45,   470,  2365,  2329,  2069,   470,   470,  1476,
    2562,  2491,  2291,  2811,  2633,  2860,  1694,  2106,   470,  2136,
     580,  1696,   498,   734,  2578,  2386,  1911, -1477,  1099,  2002,
     467,  2393,  1912,  1913,  1914,  2005,     0,  2721,  1180,  2723,
       0,     0,  1463,     0,  2622,     0, -1477,     0,     0,  2206,
       0,     0,     0,  2734,     0,     0,     0,     0,   498,     0,
       0,     0,     0,   961,  2002,   467,   568,     0,     0,  1994,
     961,     0,     0,     0,  1994,     0,     0,  1994,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,   649,     0,
       0,   961,     0,     0,     0, -1477,     0,     0, -1477,     0,
     568,  2231,  2232,  2233, -1477,     0,     0,     0,     0,     0,
    2772,     0,  1172,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1174,     0,     0,   468,     0,
    2767,     0,     0,     0,     0,     0,     0,     0,  2789,  2279,
       0,  1171,   498,     0,     0,     0,  2794,     0,  2796,     0,
    2619,     0,     0,     0,     0,     0,     0,  2002,   467, -1477,
       0,     0,     0,    45,     0,   649,   649,   649,     0,  2637,
       0,  2804,     0,     0,     0,     0,   734,     0,     0,  1911,
       0,     0,  1484,     0,    45,  1912,  1913,  1914,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2002,   467,
       0,     0,  2434,     0,     0,     0,     0,  2651,     0,   961,
       0,  2619,     0,  1987,     0,     0,     0,  1049,  1994,     0,
    2387,     0,     0,     0,  2391,  2734,  1485,  2604,     0,  1916,
    1234,   718,     0,     0,     0,     0,  1740,  1171,     0,     0,
   -1477,  2669,  2670,     0,     0,  1473,     0,  1049, -1477,   568,
       0,  1373,  1486,     0,     0,  2679,     0,  2637,     0,  2876,
       0,     0,     0,     0,     0, -1477,     0, -1477, -1477,     0,
       0,  1487,  2365,     0,     0,  1488,     0,     0,     0,     0,
       0,   649,     0,     0,    45,     0,  2002,   467,     0,     0,
       0,     0,     0,     0,  1180,     0,  1489,     0,  1917,  1490,
       0,     0,  1504,  1505, -1477,     0,     0, -1477, -1477, -1477,
       0,     0,     0,  1491,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   470,     0,   470,     0,  2739,  1175,
       0,   470,  2928,     0,   470,     0,     0,     0,   470,  2932,
    2444,  2445,  2446,  2447,     0,    45,     0,     0,     0,     0,
       0,     0,   470,     0,     0,   470,   470,   470,   470,  1171,
       0,     0,     0,     0,     0,   470,   470,   470,  1172,     0,
       0,     0,     0,     0,     0,     0,     0,  1506,  1507,     0,
    1176,  1174,  1916,     0,     0,   470,     0,     0,     0,     0,
    1180,   470,   470,   470,   470,  1049,     0,     0,     0,   470,
     470,     0,  1492,     0,   470,     0,     0,     0,   470,     0,
    1493,   470,   470,   470,   470,   470,   470,   470,   470,   470,
       0,     0,   470,     0,     0,   -40,     0,   470,     0,     0,
     470,     0,   470,    45,   961,     0,     0,     0,     0,  1508,
    1509,  1510,  1511,  1512,  1513,     1,     0,  1514,  1515,     0,
       0,  1917,  1494,     0,     0,     2,   470,     3,     4,     0,
       0,     0,   500,     0,  1172,     0,     0,     0,     0,   470,
       0,     0,     0,     5,     0,     0,     0,  1174,   470,   470,
       0,     0,     6,     0,     0,  1171,     0,     0,     0,     0,
       0,  1918,  1919,  1920,     7,  1921,  1922,  1923,  1924,  1925,
    1926,     0,     0,  1175,     0,     8,     0,     0,     0,     0,
       0,     0,  1180,     0,     0,   501,     9,  1171,    10,     0,
       0,  1049,     0,  1049,     0, -1479,     0,     0,     0,     0,
     502,     0,     0,     0,     0,     0,    11,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      12,  1516,  1517,     0,  1176,     0,     0,     0,     0,     0,
      13,     0,   961,     0,     0,   470,   470,    14,   470,     0,
       0,     0,     0,     0,     0,    15,     0,    16,    17,     0,
       0,     0,     0,     0,     0,   503,  1172,     0,     0,     0,
      18,     0,     0,     0,   504,     0,     0,     0,     0,  1174,
       0,   470,     0,     0,  1049,     0,   505,     0,     0,   477,
       0,   506,     0,     0,     0,     0,     0,    19, -1479,     0,
     718,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  2659,   718,   507,   961,  1180,     0,
       0,     0,     0,   478,  1918,  1919,  1920,   479,  1921,  1922,
    1923,  1924,  1925,  1926,     0,     0,    20,     0,     0,     0,
       0,     0,  1518,  1519,     0,     0,     0,     0,  -891,     0,
    1180, -1479,     0,     0,     0,     0,   470,   470,     0,   508,
       0,     0,   470,   509, -1479,     0,  2696,     0,     0, -1479,
       0,     0,     0,     0, -1479,     0,     0,     0,     0,     0,
       0,     0,     0, -1479,   480,     0, -1479,     0,     0,     0,
       0,   481,  1172,     0,     0,     0,     0,     0,     0,     0,
       0,     0,   470,   470,   470,  1174,     0,   470,     0,     0,
       0,     0,     0,    21,     0, -1479,    22,     0,     0,     0,
     470,   470,   470,   470,  1172,     0,   510,     0,     0,     0,
     470,     0,     0,   470, -1479,  2748,     0,  1174,   482,  1175,
     511,     0,     0,     0,    23,     0,     0,     0,   470,   470,
       0,     0,    24,   470,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    25,   470,     0,  2771,
     470,   512,   470,    26,   513,     0,     0,    27,     0,     0,
   -1493,     0,   514, -1479,     0,   515, -1479,    28,     0,     0,
    1176,     0, -1479,   470,     0,  1171,     0,     0,     0,     0,
       0,    29,     0,     0,   516,   470,   483,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   517,     0,     0,   470,
       0,     0,     0,   518,     0,     0,     0,     0,     0,     0,
       0,     0,   519,  1250,   470,  1175,  1251,    30,     0,     0,
       0,  1171,    31,     0,     0,     0,     0, -1479,     0,     0,
     470,     0,   484,     0,   485,     0,    32,  1171,     0,     0,
       0,     0,     0,     0,   520,     0,   470,  1257,     0,     0,
       0,     0,     0, -1493, -1697,     0,   486,  1171,     0,   487,
      33,     0,     0,  1049,  1049,  1049,  1176,     0,     0,     0,
       0,     0,     0,     0,    34,   488,     0,   -40,     0,  1259,
       0,  1987,     0,   886,     0,     0,  1171,     0,     0,   887,
       0,     0,     0,  1171,     0,     0,   899,     0,  2875,     0,
       0,     0,     0,     0,   961,     0, -1493,     0, -1479,     0,
       0,     0,  1171,     0,     0,   900, -1479,     0,     0, -1493,
       0,     0,     0,     0, -1493,     0,     0,     0,  1180, -1493,
       0,     0,     0, -1479,     0, -1479, -1479,  1175, -1493,     0,
       0, -1493,     0,     0,     0,     0,     0,     0,     0,  1957,
       0,     0,     0,     0,   718,     0,     0,     0,     0,  1049,
       0,     0,     0,     0,     0,   901,     0,     0,     0,     0,
   -1493,     0, -1479,     0,  1180, -1479, -1479, -1479,     0, -1697,
       0,     0,     0,     0,     0,     0,     0,   470,  1176, -1493,
    1180,     0,     0, -1697,   888,     0,     0,   470, -1697,     0,
       0,   470,  1172,     0,   470,     0,     0,     0,     0,     0,
    1180,   470,   470,   470,   470,  1174,     0,   470,   470,   470,
     470,   470,   470,   470,   470,   470,   470,     0,  1171,     0,
     470,   470,     0, -1697,     0,     0,     0,     0, -1493,  1180,
       0, -1493,     0,     0,   470,     0,  1180, -1493,  1172,     0,
       0,     0,     0,   470,   902,     0,   470,     0,   470,     0,
       0,  1174,     0,  1175,  1172,  1180,   470,     0,     0,   470,
     470,     0,     0,     0,   470,   470,     0,  1174,     0,     0,
       0,     0,     0,     0,  1172,     0,     0,     0,  1268,     0,
     470,     0,   470,     0,     0,  1175,     0,  1174,     0,     0,
       0,     0, -1493,   903,     0,   470,     0,     0,     0,     0,
       0,   904,     0,  1172,  1176,     0,     0,     0,     0,     0,
    1172,     0,     0,   905,     0,     0,  1174,     0,   470,     0,
       0,     0,     0,  1174,     0,     0,     0,     0,     0,  1172,
       0,     0,     0,     0,   889,   470,  1176,     0,     0,     0,
       0,     0,  1174,     0,   906,     0,  1987,  1171,     0,     0,
       0,     0,     0,     0,     0,     0,  1250,     0,     0,  1251,
       0,     0,     0,   810,   810,  1252,  1253,  1254, -1697,     0,
    1049,  2370,  1049, -1493,  1049,     0,     0,     0,     0,     0,
       0, -1493,  1255,   734,  1779,     0,  1911,     0,   891,   908,
    1257,     0,  1912,  1913,  1914,     0,     0,  1258, -1493,     0,
   -1493, -1493,     0,     0,     0,     0,     0,     0,     0,  2435,
       0,   909,     0,     0,     0,     0,  1250,  1780,     0,  1251,
       0,     0,  1259,   956,   963, -1697, -1697, -1697,     0,     0,
       0,   911,     0,     0,     0,     0,     0, -1493,     0,     0,
   -1493, -1493, -1493,     0,     0,  1172,     0,     0,     0,     0,
    1257,   470,     0,     0,     0,     0,     0,  1258,  1174,     0,
       0,     0,  1171,     0,     0,     0,     0,     0, -1697,     0,
       0,     0,     0,     0,     0,  1275,  1276,  1277,  1278,  1279,
    1280,     0,  1259,   893,     0,     0,     0,     0,     0,     0,
       0,  1171,     0,     0,   470,   470,     0,     0,     0,   470,
    1180,     0,     0,     0,   470,     0,     0,   470,   470,     0,
       0,     0,   470,     0,     0,  1504,  1505,     0,     0,     0,
       0,     0,  1260,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,   956,     0,   470,  1261,     0,     0,   470,
       0,  1262,     0,     0,     0,     0,     0,     0,     0,     0,
    1190,  1171,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1171,  1263,  1264,     0,     0,     0,     0,     0,     0,
     470,     0,     0,     0,  1172,     0,  1265,     0,  1212,     0,
       0,     0,  1260,  1175,     0,     0,     0,  1174,     0,  1916,
    1506,  1507,     0,     0,     0,     0,  1261,  1049,  1229,  1230,
    1231,  1262,     0,  1235,     0,     0,   470,     0,     0,     0,
       0,     0,     0,     0,  1266,  1180,     0,  1267,     0,     0,
       0,     0,     0,     0,     0,     0,  1290,     0,     0,  1175,
       0,  1268,     0,     0,  1176,     0,  1265,     0,     0,     0,
       0,     0,     0,     0,  2370,  1175,     0,     0,     0,     0,
       0,     0,  1508,  1509,  1510,  1511,  1512,  1513,  1917,     0,
    1514,  1515,     0,     0,     0,  1175,     0,     0,     0,     0,
       0,     0,     0,  1326,     0,     0,     0,  1338,  1343,     0,
    1176,     0,  1171,     0,     0,     0,     0,     0,     0,  1172,
       0,  1268,     0,     0,  1175,     0,  1176,     0,     0,   718,
       0,  1175,  1174,     0,  1180,     0,     0,     0,     0,     0,
       0,   470,     0,     0,  1180,     0,  1176,     0,  1172,  1171,
    1175,  1270,     0,   470,   470,     0,     0,   470,     0,     0,
       0,  1174,     0,   956,     0,     0,     0,     0,     0,   470,
     956,     0,     0,     0,     0,  1176,     0,     0,     0,     0,
       0,   470,  1176,     0,     0,  1171,   470,     0,  1171,   470,
       0,   956,     0,     0,  1516,  1517,     0,     0,     0,   470,
     470,  1176,     0,     0,     0,     0,     0,     0,  1172,     0,
       0,  1270,   470,     0,   470,     0,     0,     0,  1172,     0,
       0,  1174,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1174,     0,   470,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1271,  1283,     0,  1272,  1273,  1274,     0,  1275,  1276,
    1277,  1278,  1279,  1280,     0,  2370,  1175,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1918,  1919,  1920,     0,  1921,  1922,  1923,  1924,  1925,
    1926,  1283,     0,     0,     0,   470,     0,     0,     0,     0,
       0,   470,  1180,     0,     0,  1518,  1519,     0,     0,   956,
       0,  1271,     0,     0, -1697, -1697, -1697,  1176,  1275,  1276,
    1277,  1278,  1279,  1280,     0,  1520,   470,     0,     0,     0,
     470,     0,     0,     0,     0,     0,     0,     0,  1180,  1172,
    1250,  1180,   470,  1251,     0,     0,     0,     0,     0,  1252,
    1253,  1254,  1174,     0,   470,     0,     0,     0,     0,     0,
       0,     0,     0,  1049,     0,     0,  1255,  1049,   470,     0,
       0,     0,     0,     0,  1257,     0,  1172,     0,     0,     0,
    1171,  1258,     0,     0,     0,     0,     0,     0,     0,  1174,
       0,     0,     0,     0,     0,  1175,     0,     0,  1283,     0,
       0,     0,     0,     0,     0,  1283,  1259,     0,  1250,     0,
       0,  1251,  1172,     0,     0,  1172,     0,     0,     0,     0,
     470,     0,     0,   470,     0,  1174,     0,     0,  1174,     0,
       0,  1541,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1257,     0,     0,     0,  1176,     0,     0, -1697,
     470,     0,  1564,     0,     0,  1581,     0,     0,  1593,     0,
       0,     0,     0,     0,   470,  1600,  1605,  1608,     0,     0,
       0,     0,     0,     0,  1259,     0,     0,     0,     0,     0,
       0,   470,     0,     0,     0,  1616,     0,     0,     0,     0,
       0,  1620,  1621,  1622,  1623,     0,     0,     0,     0,  1632,
    1633,   470,   470,     0,  1644,     0,  1260,     0,  1647,     0,
    1175,  1655,  1656,  1657,  1658,  1659,  1660,  1661,  1662,  1663,
    1261,     0,  1664,     0,     0,  1262,     0,  1672,     0,     0,
    1676,     0,   810,  2370,   956,  1049,     0,     0,     0,  1175,
       0,     0,     0,     0,  1967,     0,  1263,  1264,     0,     0,
       0,     0,   470,     0,   470,     0,  1697,     0,     0,     0,
    1265,  1176,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0, -1697,     0,     0,     0,  1230,  1231,
    1250,     0,     0,  1251,     0,     0,     0,     0, -1697,     0,
    1176,     0,     0, -1697,     0,     0,     0,     0,  1266,  1175,
       0,  1267,     0,     0,     0,     0,     0,  1172,     0,  1175,
       0,     0,     0,     0,  1257,  1268,     0,     0,  1269,     0,
    1174, -1697,     0,     0,     0,     0,     0,     0, -1697,     0,
     470,     0,  1283,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1259,     0,     0,     0,
    1176,     0,     0,     0,  1283,     0,  1547,     0,   539,  1588,
    1176,     0,   956,     0,     0,  1808,  1809,     0,  1810,     0,
       0,  1283,  1283,  1283,     0,     0,     0,  1283,     0,     0,
       0,     0,     0,  1268,     0,     0,  1250,     0,     0,  1251,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1846,     0,     0,     0,  1270,     0,     0,  1249,     0,
       0,     0,     0,  1250,     0,     0,  1251,     0,     0,     0,
    1257,     0,  1252,  1253,  1254,     0,     0, -1697,     0,     0,
    1175,     0,  1283,     0,     0,     0,     0,   956,     0,  1255,
       0,     0,  1256,     0,     0,     0, -1697,  1257,     0,     0,
       0,     0,  1259,     0,  1258,     0,     0,     0,     0,     0,
   -1697,  1250,  1504,  1505,  1251, -1697,     0,  1175,  1283,     0,
    1252,  1253,  1254, -1697,     0,     0,     0,  1887,     0,  1259,
    1283,  1176,  1893,     0,     0,  1283,     0,  1255,     0,     0,
       0,     0,     0,     0,     0,  1257,     0,     0,     0,     0,
   -1697,     0,  1258,  1175,     0,  1271,  1175,     0,  1272,  1273,
    1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,  1176,     0,
       0,     0,  2215,     0,  1910,  1902,     0,  1259,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1506,  1507,     0,
    1605,     0,  1605,  1605,     0,     0,     0,     0,     0,     0,
    1949,     0, -1697,  1951,  1176,  1268,     0,  1176,     0,     0,
       0,     0,     0,     0,     0,     0, -1697,     0,     0,     0,
       0, -1697,     0, -1697,     0,     0,     0,     0,     0,  1260,
    1275,  1276,  1277,  1278,  1279,  1280,     0,  1969,     0,     0,
    1972,     0,  1974,  1261,     0,     0,     0,     0,  1262,  1508,
    1509,  1510,  1511,  1512,  1513,     0, -1697,  1514,  1515,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1263,
    1264,     0,     0,     0,     0,     0,     0,  1260,     0,     0,
       0,     0,     0,  1265,     0,     0,     0,     0,     0,  1326,
       0,  1261,     0,     0,     0, -1697,  1262,     0,     0,     0,
       0,     0,     0,     0,  1343,     0,     0,     0,     0,     0,
       0,  1268,     0,     0,     0,     0,     0,  1263,  1264,     0,
       0,  1266,     0,     0,  1267,     0,     0,     0,     0,     0,
       0,  1265,     0,  1283,     0,     0,  2048,     0,  1268,     0,
       0,  1269,     0,     0,     0,     0,     0,     0,  1175,     0,
       0,     0,     0,     0,     0,     0,  1283,     0,     0,     0,
       0,  1516,  1517,     0,     0,     0,     0,     0,     0,  1266,
       0,     0,  1267,  1283,     0,  1588,  1588,     0,  1927,     0,
    1588,     0,     0,     0,     0,  1283,  1268,     0,     0,  1269,
       0,     0,  1283,     0,   956, -1697,     0,  1283,     0,  1176,
    1283, -1697,  1275,  1276,  1277,  1278,  1279,  1280,  1283,     0,
       0,     0,  1283,  1283,  1283,  1283,     0,     0,     0,     0,
       0,  1588,  1588,     0,  1283,  1283,     0,     0,  1270,     0,
       0,     0,     0,     0,     0,     0,  1283,     0,     0,  1283,
       0,     0,     0,     0,     0,     0,     0,  1283,  1283,  1283,
    1283,  1283,  1283,  1283,  1283,  1283,  1283,     0,     0,     0,
       0,     0,     0,     0,  1283,     0,     0,     0,  1283,     0,
       0,     0,  1518,  1519,     0,     0,  1270,  2163,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2167,     0,  1283,
       0,  2168,     0,     0,  2170,     0,     0,     0,     0,     0,
       0, -1697,     0,     0,     0,     0,     0,     0,  1275,  1276,
    1277,  1278,  1279,  1280,     0,     0,     0,     0,     0,     0,
    2190,  2191,     0,     0,     0,     0,     0,     0,  1271,     0,
       0,  1272,  1273,  1274,     0,  1275,  1276,  1277,  1278,  1279,
    1280,     0,     0,  2204,     0,     0,  2207,     0,  2209,     0,
       0,     0,     0,     0,     0,     0,  2213,     0,     0,     0,
       0,     0,     0,     0,  2220,  2221,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1271,     0,     0,  1272,
    1273,  1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,     0,
       0,     0,     0,  1610,     0,  2267,     0,     0,     0,     0,
    1283,  1283,  1283,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  2280,     0,
       0,  1250,     0,     0,  1251,     0,     0,     0,     0,     0,
    1252,  1253,  1254,     0,     0,  2293,     0,     0,  1283,     0,
       0,     0,     0,     0,     0,     0,     0,  1255,     0,     0,
       0,     0,     0,     0,     0,  1257,     0,  1250,     0,     0,
    1251,     0,  1258,     0,     0,     0,  1252,  1253,  1254,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1283,
       0,     0,     0,  1255,     0,  1283,     0,  1259,     0,     0,
       0,  1257,     0,     0,     0,     0,     0,     0,  1258,     0,
    1927,  1927,  1283,     0,  1588,  1588,  1588,  1588,     0,     0,
    1588,  1588,  1588,  1588,  1588,  1588,  1588,  1588,  1588,  1588,
    1927,     0,     0,  1259,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1283,     0,  1283,     0,     0,     0,  1927,  1927,     0,
       0,  2418,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1283,  1588,  1588,  1283,     0,  1283,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1260,     0,     0,
       0,     0,     0,     0,  2428,  2429,     0,     0,     0,  2430,
       0,  1261,     0,     0,  2433,     0,  1262,  2436,  2437,     0,
       0,     0,  2441,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1260,     0,     0,     0,  1263,  1264,     0,
       0,     0,     0,     0,     0,     0,     0,  1261,     0,     0,
    1283,  1265,  1262,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1250,     0,     0,  1251,     0,     0,     0,
       0,     0,     0,  1263,  1264,     0,     0,     0,     0,     0,
     810,     0,     0,     0,     0,     0,     0,  1265,     0,  1266,
       0,     0,  1267,     0,     0,     0,     0,  1257,     0,     0,
       0,     0,     0,     0, -1697,     0,  1268,     0,     0,  1269,
       0,     0,     0,     0,     0,     0,  2532,     0,     0,     0,
       0,     0,     0,     0,     0,  1266,     0,     0,  1267,  1259,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1268,     0,     0,  1269,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1283,     0,     0,     0,  1283,
    1283,     0,  1283,     0,     0,  1927,  1927,  1927,  1927,     0,
       0,     0,  1927,  1927,  1927,  1927,  1927,  1927,  1927,  1927,
    1927,  1927,  1283,  1283,  1250,     0,  1270,  1251,     0,  2218,
       0,     0,     0,  1252,  1253,  1254,  1283,     0,     0,  1283,
       0,  1283,     0,     0,     0,  1283,     0,     0,  1927,  1927,
    1255,     0,  1283,  1283,     0,     0,     0,     0,  1257, -1697,
       0,     0,  1270,  2586,  2587,  1258,     0,  2588,     0,     0,
       0,     0,     0, -1697,     0,     0,     0,     0, -1697,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1259,     0,     0,     0,     0,     0,     0,     0,     0,  1283,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  2627,
    2628,     0,  1283, -1697,     0,  1250,     0,     0,  1251,     0,
       0,     0,     0,     0,  2641,  1283,  1271,     0,     0,  1272,
    1273,  1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,     0,
       0,     0,  1250,  1953,     0,  1251,     0,     0,     0,  1257,
       0,  1252,  1253,  1254,     0,     0, -1697,  1250,     0,     0,
    1251,     0,  1271,     0,     0,  1272,  1273,  1274,  1268,  1275,
    1276,  1277,  1278,  1279,  1280,     0,  1257,     0,     0,  2166,
       0,  1259,     0,  1258,     0,     0,     0,     0,     0,     0,
    1260,  1257,     0,     0,     0,     0,     0,     0, -1697,     0,
       0,     0,     0,     0,  1261,     0,     0,     0,  1259,  1262,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1259,     0,     0,     0,     0,     0,     0,
    1263,  1264,     0,     0,     0,     0,  2717,     0,     0,     0,
       0,     0,     0,     0,  1265,     0,     0,     0,     0,     0,
    1283,  2219,  1235,     0,  1588,     0,     0,     0, -1697,     0,
    1283,  1283,  1283,     0,  2740,  1283,     0,     0,  1283,  1283,
       0,     0,     0,  1283,     0,     0,     0,     0,  2754,     0,
       0, -1697,  1266,     0,     0,  1267,     0,     0,     0,     0,
       0,     0,     0,  2438,     0, -1697,     0,     0,     0,  1268,
   -1697,     0,  1269,     0,     0,     0,     0,     0,  1260,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1261, -1697,     0,     0,     0,  1262,     0,     0,
       0,     0,     0,     0,     0, -1697,     0, -1697,     0,     0,
       0,     0, -1697,     0,     0,     0,  1588,     0,  1263,  1264,
       0,     0,     0,     0,     0,     0,     0,     0, -1697,     0,
    2627,     0,  1265,     0,  1283,  1275,  1276,  1277,  1278,  1279,
    1280,     0,     0,     0,     0,     0,     0, -1697,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1270,
    1268,  2823,     0,     0,     0,     0,     0,     0,     0,     0,
    1266,     0,     0,  1267,     0,     0,     0,     0,     0,     0,
       0,  2838,  2838,  1927,  1588,     0,     0,  1268,  1283,  1283,
    1283,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1268,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1283,
    1283,     0,     0,     0,  2838,     0,     0,     0,     0,     0,
       0,     0,     0,  1283,     0,     0,     0,     0,     0,     0,
   -1697,     0,     0,     0,  1927,     0,     0,     0,     0,  1271,
       0,     0,  1272,  1273,  1274,     0,  1275,  1276,  1277,  1278,
    1279,  1280,     0,     0,     0,     0,  2202,  1270,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0, -1697,     0,     0,     0,     0,     0,     0,     0,
    1927,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2838,     0,     0,     0,     0,     0,     0,     0,     0,  1283,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1283,     0,     0,     0,     0,     0,     0,     0,
   -1697,     0,     0,     0,     0,     0,  1283,  1275,  1276,  1277,
    1278,  1279,  1280,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1271,     0,     0,
    1272,  1273,  1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,
       0,     0, -1697,     0,     0,     0,     0,     0,     0,  1275,
    1276,  1277,  1278,  1279,  1280,     0,     0,     0,     0,   923,
     731,   539,   732,   733,   734,   735,   736,     0,     0,     0,
       0,     0,     0,     0,     0,  1283,    92,    93,    94,    95,
      96,    97,    98,    99,   924,   100,   101,   102,     0,     0,
    1283,     0,   737,     0,     0,   103,   104,     0,   105,   106,
     107,   925,   109,   110,   111,   112,   738,   926,   739,   740,
       0,   117,   118,   119,   120,   121,   122,   741,   742,   123,
     124,   743,   744,   127,     0,   128,   129,   130,   131,   745,
       0,   927,     0,   134,   135,   136,   137,   138,   928,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
     929,   150,   151,   152,   747,   748,   749,   930,   751,   752,
     753,   154,   155,   156,   157,   158,   159,   160,   754,   755,
     163,   756,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,   931,     0,   176,   177,
     757,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   758,   192,   193,
     194,   195,   759,   760,   197,     0,   198,   199,   761,   201,
       0,   202,     0,   203,   932,     0,   933,   206,   207,   208,
     934,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   935,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,   936,   233,
     234,   235,   236,   237,   762,   763,     0,   764,     0,   241,
     937,   938,   244,   939,   246,   247,   248,   249,   250,     0,
       0,   251,   940,   253,   941,     0,   255,   256,   257,   765,
     766,   258,   259,   260,   261,   262,   942,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   767,   943,   768,   285,   286,
     287,   288,   769,   289,   290,   944,   292,   770,   771,   294,
     772,   296,   297,   298,     0,   299,   300,     0,     0,   773,
     302,   303,     0,     0,   304,   305,   945,   307,   946,   774,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   775,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     776,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   947,   358,   359,   360,   777,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   778,   378,   379,   380,   381,   382,   948,
     384,   385,   779,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   949,   400,   780,     0,
     402,   403,     0,   404,   950,   406,   407,   408,   409,   410,
       0,   781,   782,     0,     0,   413,   414,   783,   416,   784,
     785,   418,   419,   951,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,   787,     0,   431,   432,
     433,   434,   435,   436,   788,   952,   438,   953,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   789,
       0,     0,     0,     0,     0,     0,   790,   791,   954,     0,
       0,     0,     0,   793,     0,   794,   955,     0,     0,     0,
       0,   795,     0,   796,   797,    91,   731,   539,   732,   733,
     734,   735,   736,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,   737,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   738,   114,   739,   740,     0,   117,   118,   119,
     120,   121,   122,   741,   742,   123,   124,   743,   744,   127,
       0,   128,   129,   130,   131,   745,     0,   746,     0,   134,
     135,   136,   137,   138,   139,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,   149,   150,   151,   152,
     747,   748,   749,   750,   751,   752,   753,   154,   155,   156,
     157,   158,   159,   160,   754,   755,   163,   756,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,     0,     0,   176,   177,   757,   179,   180,     0,
       0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,   190,   758,   192,   193,   194,   195,   759,   760,
     197,     0,   198,   199,   761,   201,     0,   202,     0,   203,
     204,     0,   205,   206,   207,   208,   209,   210,     0,   211,
       0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,   232,   233,   234,   235,   236,   237,
     762,   763,     0,   764,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,     0,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   765,   766,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   767,   283,   768,   285,   286,   287,   288,   769,   289,
     290,   291,   292,   770,   771,   294,   772,   296,   297,   298,
       0,   299,   300,     0,     0,   773,   302,   303,     0,     0,
     304,   305,   306,   307,   308,   774,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   320,   321,   775,
     323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   776,   339,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   777,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,    25,   373,   374,   375,   376,   377,   778,
     378,   379,   380,   381,   382,   383,   384,   385,   779,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   780,     0,   402,   403,    29,   404,
     405,   406,   407,   408,   409,   410,     0,   781,   782,     0,
       0,   413,   414,   783,   416,   784,   785,   418,   419,   786,
     421,   422,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,   787,     0,   431,   432,   433,   434,   435,   587,
     788,     0,   438,   439,   440,     0,   441,   442,   443,     0,
       0,   444,     0,    32,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   789,     0,    33,     0,     0,
       0,     0,   790,   791,     0,     0,     0,     0,     0,   793,
       0,   794,  2730,     0,     0,     0,     0,   795,     0,   796,
     797,    91,   731,   539,   732,   733,   734,   735,   736,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,   737,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   738,   114,
     739,   740,     0,   117,   118,   119,   120,   121,   122,   741,
     742,   123,   124,   743,   744,   127,     0,   128,   129,   130,
     131,   745,     0,   746,     0,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   747,   748,   749,   750,
     751,   752,   753,   154,   155,   156,   157,   158,   159,   160,
     754,   755,   163,   756,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
     176,   177,   757,   179,   180,     0,     0,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,   190,   758,
     192,   193,   194,   195,   759,   760,   197,     0,   198,   199,
     761,   201,     0,   202,     0,   203,   204,     0,   205,   206,
     207,   208,   209,   210,     0,   211,     0,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
     232,   233,   234,   235,   236,   237,   762,   763,     0,   764,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   765,   766,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   767,   283,   768,
     285,   286,   287,   288,   769,   289,   290,   291,   292,   770,
     771,   294,   772,   296,   297,   298,     0,   299,   300,     0,
       0,   773,   302,   303,     0,     0,   304,   305,   306,   307,
     308,   774,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   320,   321,   775,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   776,   339,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   777,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    25,
     373,   374,   375,   376,   377,   778,   378,   379,   380,   381,
     382,   383,   384,   385,   779,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     780,     0,   402,   403,    29,   404,   405,   406,   407,   408,
     409,   410,     0,   781,   782,     0,     0,   413,   414,   783,
     416,   784,   785,   418,   419,   786,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,   787,     0,
     431,   432,   433,   434,   435,   587,   788,     0,   438,   439,
     440,     0,   441,   442,   443,     0,     0,   444,     0,    32,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   789,     0,    33,     0,     0,     0,     0,   790,   791,
       0,     0,     0,     0,     0,   793,     0,   794,     0,     0,
       0,     0,     0,   795,     0,   796,   797,    91,   731,   539,
     732,   733,   734,   735,   736,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
     737,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   738,   114,   739,   740,  1601,   117,
     118,   119,   120,   121,   122,   741,   742,   123,   124,   743,
     744,   127,     0,   128,   129,   130,   131,   745,     0,   746,
       0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   747,   748,   749,   750,   751,   752,   753,   154,
     155,   156,   157,   158,   159,   160,   754,   755,   163,   756,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,     0,     0,   176,   177,   757,   179,
     180,     0,     0,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,   190,   758,   192,   193,   194,   195,
     759,   760,   197,     0,   198,   199,   761,   201,     0,   202,
       0,   203,   204,  1602,   205,   206,   207,   208,   209,   210,
       0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
     236,   237,   762,   763,     0,   764,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,     0,  1603,   251,
     252,   253,   254,     0,   255,   256,   257,   765,   766,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   767,   283,   768,   285,   286,   287,   288,
     769,   289,   290,   291,   292,   770,   771,   294,   772,   296,
     297,   298,     0,   299,   300,     0,     0,   773,   302,   303,
       0,     0,   304,   305,   306,   307,   308,   774,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
     321,   775,   323,   324,   325,   326,   327,   328,     0,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   776,   339,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   777,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   778,   378,   379,   380,   381,   382,   383,   384,   385,
     779,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   780,     0,   402,   403,
       0,   404,   405,   406,   407,   408,   409,   410,     0,   781,
     782,     0,  1604,   413,   414,   783,   416,   784,   785,   418,
     419,   786,   421,   422,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,   787,     0,   431,   432,   433,   434,
     435,   436,   788,     0,   438,   439,   440,     0,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   789,     0,     0,
       0,     0,     0,     0,   790,   791,     0,     0,     0,     0,
       0,   793,     0,   794,     0,     0,     0,     0,     0,   795,
       0,   796,   797,    91,   731,   539,   732,   733,   734,   735,
     736,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,   737,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     738,   114,   739,   740,     0,   117,   118,   119,   120,   121,
     122,   741,   742,   123,   124,   743,   744,   127,     0,   128,
     129,   130,   131,   745,     0,   746,     0,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   747,   748,
     749,   750,   751,   752,   753,   154,   155,   156,   157,   158,
     159,   160,   754,   755,   163,   756,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
       0,     0,   176,   177,   757,   179,   180,     0,     0,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
     190,   758,   192,   193,   194,   195,   759,   760,   197,     0,
     198,   199,   761,   201,     0,   202,     0,   203,   204,     0,
     205,   206,   207,   208,   209,   210,     0,   211,     0,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,   231,   232,   233,   234,   235,   236,   237,   762,   763,
       0,   764,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   765,   766,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   767,
     283,   768,   285,   286,   287,   288,   769,   289,   290,   291,
     292,   770,   771,   294,   772,   296,   297,   298,     0,   299,
     300,     0,     0,   773,   302,   303,     0,     0,   304,   305,
     306,   307,   308,   774,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,     0,   320,   321,   775,   323,   324,
     325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   776,   339,   340,   341,   342,     0,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   777,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   778,   378,   379,
     380,   381,   382,   383,   384,   385,   779,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   780,     0,   402,   403,     0,   404,   405,   406,
     407,   408,   409,   410,     0,   781,   782,     0,     0,   413,
     414,   783,   416,   784,   785,   418,   419,   786,   421,   422,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
     787,     0,   431,   432,   433,   434,   435,   436,   788,     0,
     438,   439,   440,     0,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   789,     0,     0,     0,     0,     0,     0,
     790,   791,   792,     0,     0,     0,     0,   793,     0,   794,
       0,     0,     0,     0,     0,   795,     0,   796,   797,    91,
     731,   539,   732,   733,   734,   735,   736,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,  1336,   100,   101,   102,     0,     0,
       0,     0,   737,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   738,   114,   739,   740,
       0,   117,   118,   119,   120,   121,   122,   741,   742,   123,
     124,   743,   744,   127,     0,   128,   129,   130,   131,   745,
       0,   746,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   747,   748,   749,   750,   751,   752,
     753,   154,   155,   156,   157,   158,   159,   160,   754,   755,
     163,   756,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     757,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   758,   192,   193,
     194,   195,   759,   760,   197,     0,   198,   199,   761,   201,
       0,   202,     0,   203,   204,     0,   205,   206,   207,   208,
     209,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
     234,   235,   236,   237,   762,   763,     0,   764,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   765,
     766,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   767,   283,   768,   285,   286,
     287,   288,   769,   289,   290,   291,   292,   770,   771,   294,
     772,   296,   297,   298,     0,   299,   300,     0,     0,   773,
     302,   303,     0,     0,   304,   305,   306,   307,   308,   774,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   775,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     776,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   777,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   778,   378,   379,   380,   381,   382,   383,
     384,   385,   779,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   780,     0,
     402,   403,     0,   404,   405,   406,   407,   408,   409,   410,
       0,   781,   782,     0,     0,   413,   414,   783,   416,   784,
     785,   418,   419,   786,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,   787,     0,   431,   432,
     433,   434,   435,   436,   788,     0,   438,   439,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   789,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,   793,     0,   794,     0,     0,     0,     0,
       0,   795,     0,   796,   797,   923,   731,   539,   732,   733,
     734,   735,   736,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,   737,     0,
       0,   103,   104,     0,   105,   106,   107,   925,   109,   110,
     111,   112,   738,   926,   739,   740,     0,   117,   118,   119,
     120,   121,   122,   741,   742,   123,   124,   743,   744,   127,
       0,   128,   129,   130,   131,   745,     0,   927,     0,   134,
     135,   136,   137,   138,   928,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,   929,   150,   151,   152,
     747,   748,   749,   930,   751,   752,   753,   154,   155,   156,
     157,   158,   159,   160,   754,   755,   163,   756,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,     0,     0,   176,   177,   757,   179,   180,     0,
       0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,   190,   758,   192,   193,   194,   195,   759,   760,
     197,     0,   198,   199,   761,   201,     0,   202,     0,   203,
     932,     0,   933,   206,   207,   208,   934,   210,     0,   211,
       0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     935,   221,   222,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,   936,   233,   234,   235,   236,   237,
     762,   763,     0,   764,     0,   241,   937,   938,   244,   939,
     246,   247,   248,   249,   250,     0,     0,   251,   940,   253,
     941,     0,   255,   256,   257,   765,   766,   258,   259,   260,
     261,   262,   942,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   767,   943,   768,   285,   286,   287,   288,   769,   289,
     290,   944,   292,   770,   771,   294,   772,   296,   297,   298,
       0,   299,   300,     0,     0,   773,   302,   303,     0,     0,
     304,   305,   945,   307,   946,   774,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   320,   321,   775,
     323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   776,   339,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   947,   358,   359,
     360,   777,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   778,
     378,   379,   380,   381,   382,   948,   384,   385,   779,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   949,   400,   780,     0,   402,   403,     0,   404,
     950,   406,   407,   408,   409,   410,     0,   781,   782,     0,
       0,   413,   414,   783,   416,   784,   785,   418,   419,   951,
     421,   422,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,   787,     0,   431,   432,   433,   434,   435,   436,
     788,     0,   438,   953,   440,     0,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   789,     0,     0,     0,     0,
       0,     0,   790,   791,     0,     0,     0,     0,     0,   793,
       0,   794,  1460,     0,     0,     0,     0,   795,     0,   796,
     797,    91,   731,   539,   732,   733,   734,   735,   736,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,   737,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   738,   114,
     739,   740,     0,   117,   118,   119,   120,   121,   122,   741,
     742,   123,   124,   743,   744,   127,     0,   128,   129,   130,
     131,   745,     0,   746,     0,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   747,   748,   749,   750,
     751,   752,   753,   154,   155,   156,   157,   158,   159,   160,
     754,   755,   163,   756,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
     176,   177,   757,   179,   180,     0,     0,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,   190,   758,
     192,   193,   194,   195,   759,   760,   197,     0,   198,   199,
     761,   201,     0,   202,     0,   203,   204,     0,   205,   206,
     207,   208,   209,   210,     0,   211,     0,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
     232,   233,   234,   235,   236,   237,   762,   763,     0,   764,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   765,   766,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   767,   283,   768,
     285,   286,   287,   288,   769,   289,   290,   291,   292,   770,
     771,   294,   772,   296,   297,   298,     0,   299,   300,     0,
       0,   773,   302,   303,     0,     0,   304,   305,   306,   307,
     308,   774,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   320,   321,   775,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   776,   339,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   777,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   778,   378,   379,   380,   381,
     382,   383,   384,   385,   779,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     780,     0,   402,   403,     0,   404,   405,   406,   407,   408,
     409,   410,     0,   781,   782,     0,     0,   413,   414,   783,
     416,   784,   785,   418,   419,   786,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,   787,     0,
     431,   432,   433,   434,   435,   436,   788,     0,   438,   439,
     440,     0,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   789,     0,     0,     0,     0,     0,     0,   790,   791,
       0,     0,     0,     0,     0,   793,     0,   794,  1591,     0,
       0,     0,     0,   795,     0,   796,   797,   923,   731,   539,
     732,   733,   734,   735,   736,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
     737,     0,     0,   103,   104,     0,   105,   106,   107,   925,
     109,   110,   111,   112,   738,   926,   739,   740,     0,   117,
     118,   119,   120,   121,   122,   741,   742,   123,   124,   743,
     744,   127,     0,   128,   129,   130,   131,   745,     0,   927,
       0,   134,   135,   136,   137,   138,   928,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,   929,   150,
     151,   152,   747,   748,   749,   930,   751,   752,   753,   154,
     155,   156,   157,   158,   159,   160,   754,   755,   163,   756,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,     0,     0,   176,   177,   757,   179,
     180,     0,     0,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,   190,   758,   192,   193,   194,   195,
     759,   760,   197,     0,   198,   199,   761,   201,     0,   202,
       0,   203,   932,     0,   933,   206,   207,   208,   934,   210,
       0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   935,   221,   222,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,   231,   936,   233,   234,   235,
     236,   237,   762,   763,     0,   764,     0,   241,   937,   938,
     244,   939,   246,   247,   248,   249,   250,     0,     0,   251,
     940,   253,   941,     0,   255,   256,   257,   765,   766,   258,
     259,   260,   261,   262,   942,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   767,   943,   768,   285,   286,   287,   288,
     769,   289,   290,   944,   292,   770,   771,   294,   772,   296,
     297,   298,     0,   299,   300,     0,     0,   773,   302,   303,
       0,     0,   304,   305,   945,   307,   946,   774,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
     321,   775,   323,   324,   325,   326,   327,   328,     0,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   776,   339,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   947,
     358,   359,   360,   777,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   778,   378,   379,   380,   381,   382,   948,   384,   385,
     779,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   949,   400,   780,     0,   402,   403,
       0,   404,   950,   406,   407,   408,   409,   410,     0,   781,
     782,     0,     0,   413,   414,   783,   416,   784,   785,   418,
     419,   951,   421,   422,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,   787,     0,   431,   432,   433,   434,
     435,   436,   788,  1805,   438,   953,   440,     0,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   789,     0,     0,
       0,     0,     0,     0,   790,   791,     0,     0,     0,     0,
       0,   793,     0,   794,     0,     0,     0,     0,     0,   795,
       0,   796,   797,    91,   731,   539,   732,   733,   734,   735,
     736,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,   737,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     738,   114,   739,   740,     0,   117,   118,   119,   120,   121,
     122,   741,   742,   123,   124,   743,   744,   127,     0,   128,
     129,   130,   131,   745,     0,   746,     0,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   747,   748,
     749,   750,   751,   752,   753,   154,   155,   156,   157,   158,
     159,   160,   754,   755,   163,   756,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
       0,     0,   176,   177,   757,   179,   180,     0,     0,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
     190,   758,   192,   193,   194,   195,   759,   760,   197,     0,
     198,   199,   761,   201,     0,   202,     0,   203,   204,  1602,
     205,   206,   207,   208,   209,   210,     0,   211,     0,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,   231,   232,   233,   234,   235,   236,   237,   762,   763,
       0,   764,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   765,   766,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   767,
     283,   768,   285,   286,   287,   288,   769,   289,   290,   291,
     292,   770,   771,   294,   772,   296,   297,   298,     0,   299,
     300,     0,     0,   773,   302,   303,     0,     0,   304,   305,
     306,   307,   308,   774,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,     0,   320,   321,   775,   323,   324,
     325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   776,   339,   340,   341,   342,     0,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   777,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   778,   378,   379,
     380,   381,   382,   383,   384,   385,   779,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   780,     0,   402,   403,     0,   404,   405,   406,
     407,   408,   409,   410,     0,   781,   782,     0,     0,   413,
     414,   783,   416,   784,   785,   418,   419,   786,   421,   422,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
     787,     0,   431,   432,   433,   434,   435,   436,   788,     0,
     438,   439,   440,     0,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   789,     0,     0,     0,     0,     0,     0,
     790,   791,     0,     0,     0,     0,     0,   793,     0,   794,
       0,     0,     0,     0,     0,   795,     0,   796,   797,    91,
     731,   539,   732,   733,   734,   735,   736,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,   737,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   738,   114,   739,   740,
       0,   117,   118,   119,   120,   121,   122,   741,   742,   123,
     124,   743,   744,   127,     0,   128,   129,   130,   131,   745,
       0,   746,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   747,   748,   749,   750,   751,   752,
     753,   154,   155,   156,   157,   158,   159,   160,   754,   755,
     163,   756,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     757,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   758,   192,   193,
     194,   195,   759,   760,   197,     0,   198,   199,   761,   201,
       0,   202,     0,   203,   204,     0,   205,   206,   207,   208,
     209,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
     234,   235,   236,   237,   762,   763,     0,   764,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   765,
     766,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   767,   283,   768,   285,   286,
     287,   288,   769,   289,   290,   291,   292,   770,   771,   294,
     772,   296,   297,   298,     0,   299,   300,     0,     0,   773,
     302,   303,     0,     0,   304,   305,   306,   307,   308,   774,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   775,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     776,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   777,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   778,   378,   379,   380,   381,   382,   383,
     384,   385,   779,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   780,     0,
     402,   403,     0,   404,   405,   406,   407,   408,   409,   410,
       0,   781,   782,     0,     0,   413,   414,   783,   416,   784,
     785,   418,   419,   786,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,   787,     0,   431,   432,
     433,   434,   435,   436,   788,     0,   438,   439,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   789,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,   793,     0,   794,     0,     0,     0,     0,
       0,   795,     0,   796,   797,   923,   731,   539,   732,   733,
     734,   735,   736,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,   737,     0,
       0,   103,   104,     0,   105,   106,   107,   925,   109,   110,
     111,   112,   738,   926,   739,   740,     0,   117,   118,   119,
     120,   121,   122,   741,   742,   123,   124,   743,   744,   127,
       0,   128,   129,   130,   131,   745,     0,   927,     0,   134,
     135,   136,   137,   138,   928,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,   929,   150,   151,   152,
     747,   748,   749,   930,   751,   752,   753,   154,   155,   156,
     157,   158,   159,   160,   754,   755,   163,   756,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,     0,     0,   176,   177,   757,   179,   180,     0,
       0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,   190,   758,   192,   193,   194,   195,   759,   760,
     197,     0,   198,   199,   761,   201,     0,   202,     0,   203,
     932,     0,   933,   206,   207,   208,   934,   210,     0,   211,
       0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     935,   221,   222,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,   936,   233,   234,   235,   236,   237,
     762,   763,     0,   764,     0,   241,   937,   938,   244,   939,
     246,   247,   248,   249,   250,     0,     0,   251,   940,   253,
     941,     0,   255,   256,   257,   765,   766,   258,   259,   260,
     261,   262,   942,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   767,   943,   768,   285,   286,   287,   288,   769,   289,
     290,   944,   292,   770,   771,   294,   772,   296,   297,   298,
       0,   299,   300,     0,     0,   773,   302,   303,     0,     0,
     304,   305,   945,   307,   946,   774,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   320,   321,   775,
     323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   776,   339,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   947,   358,   359,
     360,   777,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   778,
     378,   379,   380,   381,   382,   948,   384,   385,   779,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   949,   400,   780,     0,   402,   403,     0,   404,
     950,   406,   407,   408,   409,   410,     0,   781,   782,     0,
       0,   413,   414,   783,   416,   784,   785,   418,   419,   951,
     421,   422,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,   787,     0,   431,   432,   433,   434,   435,   436,
     788,     0,   438,   953,   440,     0,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   789,     0,     0,     0,     0,
       0,     0,   790,   791,     0,     0,     0,     0,     0,   793,
       0,   794,     0,     0,     0,     0,     0,   795,     0,   796,
     797,    91,   731,   539,   732,   733,   734,   735,   736,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,   737,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111,   112,   738,   114,
     739,   740,     0,   117,   118,   119,   120,   121,   122,   741,
     742,   123,   124,   743,   744,   127,     0,   128,   129,   130,
     131,   745,     0,   746,     0,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,   149,   150,   151,   152,   747,   748,   749,   750,
     751,   752,   753,   154,   155,   156,   157,   158,   159,   160,
     754,   755,   163,   756,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
     176,   177,   757,   179,   180,     0,     0,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,   190,   758,
     192,   193,   194,   195,   759,   760,   197,     0,   198,   199,
     761,   201,     0,   202,     0,   203,   204,     0,   205,   206,
     207,   208,   209,   210,     0,   211,     0,   212,   213,     0,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
     232,   233,   234,   235,   236,   237,   762,   763,     0,   764,
       0,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,     0,     0,   251,   252,   253,   254,     0,   255,   256,
     257,   765,   766,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   767,   283,   768,
     285,   286,   287,   288,   769,   289,   290,   291,   292,   770,
     771,   294,   772,   296,   297,   298,     0,   299,   300,     0,
       0,   773,   302,   303,     0,     0,   304,   305,   306,   307,
     308,   774,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   320,   321,   775,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   776,   339,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   777,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   778,   378,   379,   380,   381,
     382,   383,   384,   385,   779,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     780,     0,   402,   403,     0,   404,   405,   406,   407,   408,
     409,   410,     0,   781,   782,     0,     0,   413,   414,   783,
     416,   784,   785,   418,   419,   786,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,   787,     0,
     431,   432,   433,   434,   435,   436,   788,     0,   438,   439,
     440,     0,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   789,     0,     0,     0,     0,     0,     0,  1339,  1340,
       0,     0,     0,     0,     0,   793,     0,   794,     0,     0,
       0,     0,     0,   795,     0,   796,   797,    91,  1716,   539,
     732,   733,   734,   735,   736,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
     737,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   738,   114,   739,   740,     0,   117,
     118,   119,   120,   121,   122,   741,   742,   123,   124,   743,
     744,   127,     0,   128,   129,   130,   131,   745,     0,   746,
       0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   747,   748,   749,   750,   751,   752,   753,   154,
     155,   156,   157,   158,   159,   160,   754,   755,   163,   756,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,     0,     0,   176,   177,   757,   179,
     180,     0,     0,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,   190,   758,   192,   193,   194,   195,
     759,   760,   197,     0,   198,   199,   761,   201,     0,   202,
       0,   203,   204,     0,   205,   206,   207,   208,   209,   210,
       0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
     236,   237,   762,   763,     0,   764,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,     0,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   765,   766,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   767,   283,   768,   285,   286,   287,   288,
     769,   289,   290,   291,   292,   770,   771,   294,   772,   296,
     297,   298,     0,   299,   300,     0,     0,   773,   302,   303,
       0,     0,   304,   305,   306,   307,   308,   774,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
     321,   775,   323,   324,   325,   326,   327,   328,     0,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   776,   339,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   777,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   778,   378,   379,   380,   381,   382,   383,   384,   385,
     779,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   780,     0,   402,   403,
       0,   404,   405,   406,   407,   408,   409,   410,     0,   781,
     782,     0,     0,   413,   414,   783,   416,   784,   785,   418,
     419,   786,   421,   422,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,   787,     0,   431,   432,   433,   434,
     435,   436,   788,     0,   438,   439,   440,     0,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   789,     0,     0,
       0,     0,     0,     0,   790,   791,     0,     0,     0,     0,
       0,   793,     0,   794,     0,     0,     0,     0,     0,   795,
       0,   796,   797,    91,   731,   539,   732,   733,   734,   735,
     736,     0,     0,     0,     0,     0,     0,     0,     0,     0,
      92,    93,    94,    95,    96,    97,    98,    99,     0,   100,
     101,   102,     0,     0,     0,     0,   737,     0,     0,   103,
     104,     0,   105,   106,   107,   108,   109,   110,   111,   112,
     738,   114,   739,   740,     0,   117,   118,   119,   120,   121,
     122,   741,   742,   123,   124,   743,   744,   127,     0,   128,
     129,   130,   131,   745,     0,   746,     0,   134,   135,   136,
     137,   138,   139,   140,   141,   142,     0,   143,   144,   145,
     146,   147,   148,     0,   149,   150,   151,   152,   747,   748,
     749,   750,   751,   752,   753,   154,   155,   156,   157,   158,
     159,   160,   754,   755,   163,   756,   164,     0,   165,   166,
     167,   168,   169,   170,     0,   171,   172,   173,   174,   175,
       0,     0,   176,   177,   757,   179,   180,     0,     0,   181,
     182,   183,     0,   184,   185,   186,     0,   187,   188,   189,
     190,   758,   192,   193,   194,   195,   759,   760,   197,     0,
     198,   199,   761,   201,     0,   202,     0,   203,   204,     0,
     205,   206,   207,   208,   209,   210,     0,   211,     0,   212,
     213,     0,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   223,   224,     0,   225,   226,   227,   228,   229,   230,
       0,   231,   232,   233,   234,   235,   236,   237,   762,   763,
       0,   764,     0,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,     0,     0,   251,   252,   253,   254,     0,
     255,   256,   257,   765,   766,   258,   259,   260,   261,   262,
     263,   264,   265,   266,   267,   268,   269,   270,   271,   272,
     273,   274,   275,   276,   277,   278,   279,   280,   281,   767,
     283,   768,   285,   286,   287,   288,   769,   289,   290,   291,
     292,   770,   771,   294,   772,   296,   297,   298,     0,   299,
     300,     0,     0,   773,   302,   303,     0,     0,   304,   305,
     306,   307,   308,   774,   310,   311,   312,   313,   314,   315,
     316,   317,   318,   319,     0,   320,   321,   775,   323,   324,
     325,   326,   327,   328,     0,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   776,   339,   340,   341,   342,     0,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,     0,   355,   356,   357,   358,   359,   360,   777,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,     0,   373,   374,   375,   376,   377,   778,   378,   379,
     380,   381,   382,   383,   384,   385,   779,   387,     0,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,   398,
     399,   400,   780,     0,   402,   403,     0,   404,   405,   406,
     407,   408,   409,   410,     0,   781,   782,     0,     0,   413,
     414,   783,   416,   784,   785,   418,   419,   786,   421,   422,
     423,   424,   425,     0,     0,   426,   427,   428,   429,   430,
     787,     0,   431,   432,   433,   434,   435,   436,   788,     0,
     438,   439,   440,     0,   441,   442,   443,     0,     0,   444,
       0,     0,   445,   446,   447,   448,   449,   450,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   789,     0,     0,     0,     0,     0,     0,
     790,   791,     0,     0,     0,     0,     0,   793,     0,  2623,
       0,     0,     0,     0,     0,   795,     0,   796,   797,    91,
     731,   539,   732,   733,   734,   735,   736,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,   737,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,  2835,   738,   114,   739,   740,
       0,   117,   118,   119,   120,   121,   122,   741,   742,   123,
     124,   743,   744,   127,     0,   128,   129,   130,   131,   745,
       0,   746,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
     149,   150,   151,  2836,   747,   748,   749,   750,   751,   752,
     753,   154,   155,   156,   157,   158,   159,   160,   754,   755,
     163,   756,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     757,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   758,   192,   193,
     194,   195,   759,   760,   197,     0,   198,   199,   761,   201,
       0,   202,     0,   203,   204,     0,   205,   206,   207,   208,
     209,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
     234,   235,   236,   237,   762,   763,     0,   764,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   765,
     766,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   767,   283,   768,   285,   286,
     287,   288,   769,   289,   290,   291,   292,   770,   771,   294,
     772,   296,   297,   298,     0,   299,   300,     0,     0,   773,
     302,   303,     0,     0,   304,   305,   306,   307,   308,   774,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   775,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     776,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   777,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   778,   378,   379,   380,   381,   382,   383,
     384,   385,   779,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   780,     0,
     402,   403,     0,   404,   405,   406,   407,   408,   409,   410,
       0,   781,   782,     0,     0,   413,   414,   783,   416,   784,
     785,   418,   419,   786,   421,   422,  2837,   424,   425,     0,
       0,   426,   427,   428,   429,   430,   787,     0,   431,   432,
     433,   434,   435,   436,   788,     0,   438,   439,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   789,
       0,     0,     0,     0,     0,     0,   790,   791,     0,     0,
       0,     0,     0,   793,     0,   794,     0,     0,     0,     0,
       0,   795,     0,   796,   797,    91,   731,   539,   732,   733,
     734,   735,   736,     0,     0,     0,     0,     0,     0,     0,
       0,     0,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,   737,     0,
       0,   103,   104,     0,   105,   106,   107,   108,   109,   110,
     111,   112,   738,   114,   739,   740,     0,   117,   118,   119,
     120,   121,   122,   741,   742,   123,   124,   743,   744,   127,
       0,   128,   129,   130,   131,   745,     0,   746,     0,   134,
     135,   136,   137,   138,   139,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,   149,   150,   151,  2836,
     747,   748,   749,   750,   751,   752,   753,   154,   155,   156,
     157,   158,   159,   160,   754,   755,   163,   756,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,     0,     0,   176,   177,   757,   179,   180,     0,
       0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,   190,   758,   192,   193,   194,   195,   759,   760,
     197,     0,   198,   199,   761,   201,     0,   202,     0,   203,
     204,     0,   205,   206,   207,   208,   209,   210,     0,   211,
       0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
     220,   221,   222,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,   232,   233,   234,   235,   236,   237,
     762,   763,     0,   764,     0,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,     0,     0,   251,   252,   253,
     254,     0,   255,   256,   257,   765,   766,   258,   259,   260,
     261,   262,   263,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   767,   283,   768,   285,   286,   287,   288,   769,   289,
     290,   291,   292,   770,   771,   294,   772,   296,   297,   298,
       0,   299,   300,     0,     0,   773,   302,   303,     0,     0,
     304,   305,   306,   307,   308,   774,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   320,   321,   775,
     323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   776,   339,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,   357,   358,   359,
     360,   777,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,   778,
     378,   379,   380,   381,   382,   383,   384,   385,   779,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   399,   400,   780,     0,   402,   403,     0,   404,
     405,   406,   407,   408,   409,   410,     0,   781,   782,     0,
       0,   413,   414,   783,   416,   784,   785,   418,   419,   786,
     421,   422,  2837,   424,   425,     0,     0,   426,   427,   428,
     429,   430,   787,     0,   431,   432,   433,   434,   435,   436,
     788,     0,   438,   439,   440,     0,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,   789,     0,     0,     0,     0,
       0,     0,   790,   791,     0,     0,     0,     0,     0,   793,
       0,   794,     0,     0,     0,     0,     0,   795,     0,   796,
     797,    91,   731,   539,   732,   733,   734,   735,   736,     0,
       0,     0,     0,     0,     0,     0,     0,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,   737,     0,     0,   103,   104,     0,
     105,   106,   107,   108,   109,   110,   111, -1697,   738,   114,
     739,   740,     0,   117,   118,   119,   120,   121,   122,   741,
     742,   123,   124,   743,   744,   127,     0,   128,   129,   130,
     131,   745,     0,   746,     0,   134,   135,   136,   137,   138,
     139,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,   149,   150,   151,  2836,   747,   748,   749,   750,
     751,   752,   753,   154,   155,   156,   157,   158,   159,   160,
     754,   755,   163,   756,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
     176,   177,   757,   179,   180,     0,     0,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,   190,   758,
     192,   193,   194,   195,   759,   760,   197,     0,   198,   199,
     761,   201,     0,   202,     0,   203,   204,     0,   205,   206,
     207,   208, -1697,   210,     0,   211,     0,   212,   213,     0,
     214,   215,   216,   217,   218,   219, -1697,   221,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
     232,   233,   234,   235,   236,   237,   762,   763,     0,   764,
       0,   241,     0,     0,   244,   245,   246,   247,   248,   249,
     250,     0,     0,   251,   252,   253, -1697,     0,   255,   256,
     257,   765,   766,   258,   259,   260,   261,   262,   263,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   767,   283,   768,
     285,   286,   287,   288,     0,   289,   290,     0,   292,   770,
     771,   294,   772,   296,   297,   298,     0,   299,   300,     0,
       0,   773,   302,   303,     0,     0,   304,   305,   306,   307,
     308,   774,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   320,   321,   775,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   776,   339,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,   357,   358,   359,   360,   777,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,   778,   378,   379,   380,   381,
     382, -1697,   384,   385,   779,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   399,   400,
     780,     0,   402,   403,     0,   404,   405,   406,   407,   408,
     409,   410,     0,   781,   782,     0,     0,   413,   414,   783,
     416,   784,   785,   418,   419,   786,   421,   422,  2837,   424,
     425,     0,     0,   426,   427,   428,   429,   430,   787,     0,
     431,   432,   433,   434,   435,   436,   788,     0,   438,   439,
     440,     0,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465, -1697,     0,     0,     0,     0,     0,     0,   790,   791,
       0,     0,     0,     0,     0,   793,     0,   794,     0,     0,
       0,     0,     0,   795,     0,   796,   797,    91,   731,   539,
     732,   733,   734,   735,   736,     0,     0,     0,     0,     0,
       0,     0,     0,     0,    92,    93,    94,    95,    96,    97,
      98,    99,     0,   100,   101,   102,     0,     0,     0,     0,
       0,     0,     0,   103,   104,     0,   105,   106,   107,   108,
     109,   110,   111,   112,   738,   114,   739,   740,     0,   117,
     118,   119,   120,   121,   122,   741,   742,   123,   124,   743,
     744,   127,     0,   128,   129,   130,   131,   745,     0,   746,
       0,   134,   135,   136,   137,   138,   139,   140,   141,   142,
       0,   143,   144,   145,   146,   147,   148,     0,   149,   150,
     151,   152,   747,   748,   749,   750,   751,   752,   753,   154,
     155,   156,   157,   158,   159,   160,   754,   755,   163,     0,
     164,     0,   165,   166,   167,   168,   169,   170,     0,   171,
     172,   173,   174,   175,     0,     0,   176,   177,   757,   179,
     180,     0,     0,   181,   182,   183,     0,   184,   185,   186,
       0,   187,   188,   189,   190,   758,   192,   193,   194,   195,
     759,   760,   197,     0,   198,   199,   761,   201,     0,   202,
       0,   203,   204,     0,   205,   206,   207,   208,   209,   210,
       0,   211,     0,   212,   213,     0,   214,   215,   216,   217,
     218,   219,   220,   221,   222,   223,   224,     0,   225,   226,
     227,   228,   229,   230,     0,   231,   232,   233,   234,   235,
     236,   237,   762,   763,     0,   764,     0,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,     0,     0,   251,
     252,   253,   254,     0,   255,   256,   257,   765,   766,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   767,   283,   768,   285,   286,   287,   288,
       0,   289,   290,   291,   292,   770,   771,   294,   772,   296,
     297,   298,     0,   299,   300,     0,     0,   773,   302,   303,
       0,     0,   304,   305,   306,   307,   308,   774,   310,   311,
     312,   313,   314,   315,   316,   317,   318,   319,     0,   320,
     321,   775,   323,   324,   325,   326,   327,   328,     0,   329,
     330,   331,   332,   333,   334,   335,   336,   337,   776,   339,
     340,   341,   342,     0,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,     0,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,     0,   373,   374,   375,   376,
     377,   778,   378,   379,   380,   381,   382,   383,   384,   385,
     779,   387,     0,   388,   389,   390,   391,   392,   393,   394,
     395,   396,   397,   398,   399,   400,   780,     0,   402,   403,
       0,   404,   405,   406,   407,   408,   409,   410,     0,   781,
     782,     0,     0,   413,   414,   783,   416,   784,   785,   418,
     419,   786,   421,   422,   423,   424,   425,     0,     0,   426,
     427,   428,   429,   430,   787,     0,   431,   432,   433,   434,
     435,   436,   788,     0,   438,   439,   440,     0,   441,   442,
     443,     0,     0,   444,     0,     0,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,     0,     0,     0,
       0,     0,     0,     0,  1583,  1584,     0,     0,    91,   731,
     539,   732,   733,  1585,   735,   736,     0,     0,     0,     0,
       0,   796,   797,     0,     0,    92,    93,    94,    95,    96,
      97,    98,    99,     0,   100,   101,   102,     0,     0,     0,
       0,     0,     0,     0,   103,   104,     0,   105,   106,   107,
     108,   109,   110,   111,   112,   738,   114,   739,   740,     0,
     117,   118,   119,   120,   121,   122,   741,   742,   123,   124,
     743,   744,   127,     0,   128,   129,   130,   131,   745,     0,
     746,     0,   134,   135,   136,   137,   138,   139,   140,   141,
     142,     0,   143,   144,   145,   146,   147,   148,     0,   149,
     150,   151,   152,   747,   748,   749,   750,   751,   752,   753,
     154,   155,   156,   157,   158,   159,   160,   754,   755,   163,
       0,   164,     0,   165,   166,   167,   168,   169,   170,     0,
     171,   172,   173,   174,   175,     0,     0,   176,   177,   757,
     179,   180,     0,     0,   181,   182,   183,     0,   184,   185,
     186,     0,   187,   188,   189,   190,   758,   192,   193,   194,
     195,   759,   760,   197,     0,   198,   199,   761,   201,     0,
     202,     0,   203,   204,     0,   205,   206,   207,   208,   209,
     210,     0,   211,     0,   212,   213,     0,   214,   215,   216,
     217,   218,   219,   220,   221,   222,   223,   224,     0,   225,
     226,   227,   228,   229,   230,     0,   231,   232,   233,   234,
     235,   236,   237,   762,   763,     0,   764,     0,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,     0,     0,
     251,   252,   253,   254,     0,   255,   256,   257,   765,   766,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
     278,   279,   280,   281,   767,   283,   768,   285,   286,   287,
     288,     0,   289,   290,   291,   292,   770,   771,   294,   772,
     296,   297,   298,     0,   299,   300,     0,     0,   301,   302,
     303,     0,     0,   304,   305,   306,   307,   308,   774,   310,
     311,   312,   313,   314,   315,   316,   317,   318,   319,     0,
     320,   321,   775,   323,   324,   325,   326,   327,   328,     0,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   776,
     339,   340,   341,   342,     0,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,     0,   355,   356,
     357,   358,   359,   360,  1705,  1706,   363,   364,   365,   366,
     367,   368,   369,   370,   371,   372,     0,   373,   374,   375,
     376,   377,   778,   378,   379,   380,   381,   382,   383,   384,
     385,   779,   387,     0,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,   398,   399,   400,   780,     0,   402,
     403,     0,   404,   405,   406,   407,   408,   409,   410,     0,
     781,   782,     0,     0,   413,   414,   783,   416,   784,   785,
     418,   419,   786,   421,   422,   423,   424,   425,     0,     0,
     426,   427,   428,   429,   430,   787,     0,   431,   432,   433,
     434,   435,   436,   788,     0,   438,   439,   440,     0,   441,
     442,   443,     0,     0,   444,     0,     0,   445,   446,   447,
     448,   449,   450,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,     0,     0,
       0,     0,     0,     0,     0,  1707,  1708,     0,     0,     0,
       0,     0,     0,     0,  1585,     0,     0,     0,     0,     0,
       0,     0,   796,   797,    91,   731,   539,   732,   733,   734,
     735,   736,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,   108,   109,   110,   111,
     112,   738,   114,   739,   740,     0,   117,   118,   119,   120,
     121,   122,   741,   742,   123,   124,   743,   744,   127,     0,
     128,   129,   130,   131,   745,     0,   746,     0,   134,   135,
     136,   137,   138,   139,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,   149,   150,   151,   152,   747,
     748,   749,   750,   751,   752,   753,   154,   155,   156,   157,
     158,   159,   160,   754,   755,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,     0,     0,   176,   177,   757,   179,   180,     0,     0,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,   190,   758,   192,   193,   194,   195,   759,   760,   197,
       0,   198,   199,   761,   201,     0,   202,     0,   203,   204,
       0,   205,   206,   207,   208,   209,   210,     0,   211,     0,
     212,   213,     0,   214,   215,   216,   217,   218,   219,   220,
     221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,   232,   233,   234,   235,   236,   237,   762,
     763,     0,   764,     0,   241,     0,   243,   244,   245,   246,
     247,   248,   249,   250,     0,     0,   251,   252,   253,   254,
       0,   255,   256,   257,   765,   766,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     767,   283,   768,   285,   286,   287,   288,     0,   289,   290,
     291,   292,   770,   771,   294,   772,   296,   297,   298,     0,
     299,   300,     0,     0,   773,   302,   303,     0,     0,   304,
     305,   306,   307,   308,   774,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   320,   321,   775,   323,
     324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   776,   339,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,   357,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,   778,   378,
     379,   380,   381,   382,   383,   384,   385,   779,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   399,   400,   780,     0,   402,   403,     0,   404,   405,
     406,   407,   408,   409,   410,     0,   781,   782,     0,     0,
     413,   414,   783,   416,   784,   785,   418,   419,   786,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,   787,     0,   431,   432,   433,   434,   435,   436,   788,
       0,   438,   439,   440,     0,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,     0,
       0,  1583,  1584,     0,     0,     0,     0,     0,     0,     0,
    1585,     0,     0,     0,     0,     0,     0,     0,   796,   797,
      91,   731,   539,   732,   733,   734,   735,   736,     0,     0,
       0,     0,     0,     0,     0,     0,     0,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,   737,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,     0,   738,   114,   739,
     740,     0,   117,   118,   119,   120,   121,   122,   741,   742,
     123,   124,   743,   744,   127,     0,   128,   129,   130,   131,
     745,     0,   746,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   747,   748,   749,   750,   751,
     752,   753,   154,   155,   156,   157,   158,   159,   160,   754,
     755,   163,   756,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
     177,   757,   179,   180,     0,     0,   181,   182,   183,     0,
     184,     0,   186,     0,   187,   188,   189,   190,   758,   192,
     193,   194,   195,   759,   760,   197,     0,   198,   199,   761,
     201,     0,   202,     0,   203,   204,     0,   205,   206,   207,
     208,     0,   210,     0,   211,     0,   212,   213,     0,   214,
     215,   216,   217,   218,   219,     0,   221,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,   232,
     233,   234,   235,   236,   237,   762,   763,     0,   764,     0,
     241,     0,     0,   244,   245,   246,   247,   248,   249,   250,
       0,     0,   251,   252,   253,     0,     0,   255,   256,   257,
     765,   766,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   767,   283,   768,   285,
     286,   287,   288,     0,   289,   290,     0,   292,   770,   771,
     294,   772,   296,   297,   298,     0,   299,   300,     0,     0,
     773,   302,   303,     0,     0,   304,   305,   306,   307,   308,
     774,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   320,   321,   775,   323,   324,   325,   326,   327,
     328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   776,   339,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   777,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   778,   378,   379,   380,   381,   382,
       0,   384,   385,   779,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   780,
       0,   402,   403,     0,   404,   405,   406,   407,   408,   409,
     410,     0,   781,   782,     0,     0,   413,   414,   783,   416,
     784,   785,   418,   419,   786,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,   787,     0,   431,
     432,   433,   434,   435,   436,   788,     0,   438,   439,   440,
       0,   441,   442,   443,     0,     0,   444,     0,     0,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
       0,     0,     0,     0,     0,     0,     0,   790,   791,    91,
       0,   564,     0,     0,   793,     0,   794,     0,     0,     0,
       0,     0,   795,     0,   796,   797,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,   742,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   745,
       0,   746,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   747,   748,   749,   750,   751,   752,
     753,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   759,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,   204,     0,   205,   206,   207,   208,
     209,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,  1991,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   765,
     766,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,     0,   289,   290,   291,   292,     0,   771,   294,
     295,   296,   297,   298,     0,   299,   300,     0,   565,   301,
     302,   303,     0,     0,   304,   305,   306,   307,   308,   774,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   775,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,  1992,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,    25,   373,   374,
     375,   376,   377,   778,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   780,     0,
     402,   403,    29,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   783,   416,   784,
       0,   418,   419,   786,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,   787,     0,   431,   432,
     433,   434,   435,   587,   437,     0,   438,   439,   440,     0,
     441,   442,   443,     0,     0,   444,     0,    32,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,     0,
       0,    33,     0,     0,   492,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1993,     0,     0,     0,     0,
    2237,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
     112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
     128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
     136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
       0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,     0,     0,   176,   177,   178,   179,   180,     0,     0,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
       0,   198,   199,   200,   201,     0,   202,     0,   203,     0,
       0,     0,   206,   207,   208,     0,   210,     0,   211,     0,
     212,   213,     0,   214,   215,   216,   217,   218,   219,     0,
     221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,   233,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,   244,     0,   246,
     247,   248,   249,   250,     0,     0,   251,     0,   253,     0,
       0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
     262,   494,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,     0,   284,   285,   286,   287,   288,     0,   289,   290,
       0,   292,     0,   293,   294,   295,   296,   297,   298,     0,
     299,   300,     0,     0,   301,   302,   303,     0,     0,   304,
     305,     0,   307,     0,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,     0,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,     0,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   496,   400,   401,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   437,
       0,   438,     0,   440,     0,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2613,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,     0,
       0,     0,     0,     0,   492,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    2615,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
     112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
     128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
     136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
       0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,     0,     0,   176,   177,   178,   179,   180,     0,     0,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
       0,   198,   199,   200,   201,     0,   202,     0,   203,     0,
       0,     0,   206,   207,   208,     0,   210,     0,   211,     0,
     212,   213,     0,   214,   215,   216,   217,   218,   219,     0,
     221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,   233,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,   244,     0,   246,
     247,   248,   249,   250,     0,     0,   251,     0,   253,     0,
       0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
     262,   494,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,     0,   284,   285,   286,   287,   288,     0,   289,   290,
       0,   292,     0,   293,   294,   295,   296,   297,   298,     0,
     299,   300,     0,     0,   301,   302,   303,     0,     0,   304,
     305,     0,   307,     0,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,     0,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,     0,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   496,   400,   401,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   437,
       0,   438,     0,   440,     0,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,     0,     0,     0,     0,     0,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  2237,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,  2242,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
    -250,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,  -250,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,  -250,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,  -250,   246,   247,   248,   249,   250,     0,
       0,   251,  -250,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,  -250,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,  -250,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,  -250,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,     0,
      91,     0,   564,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,   855,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,   120,   121,   122,     0,   742,
     123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
     745,     0,   746,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   747,   748,   749,   750,   751,
     752,   753,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
     177,   178,   179,   180,     0,     0,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   759,     0,   197,     0,   198,   199,   200,
     201,     0,   202,     0,   203,   204,     0,   205,   206,   207,
     208,   209,   210,     0,   211,     0,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,   232,
     233,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
    1991,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     765,   766,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   771,
     294,   295,   296,   297,   298,     0,   299,   300,     0,   565,
     301,   302,   303,     0,     0,   304,   305,   306,   307,   308,
     774,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   320,   321,   775,   323,   324,   325,   326,   327,
     328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,  1992,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   778,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   780,
       0,   402,   403,     0,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   783,   416,
     784,     0,   418,   419,   786,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,   787,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
       0,   441,   442,   443,     0,     0,   444,     0,     0,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1993,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,   120,   121,   122,     0,   742,
     123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
     745,     0,   746,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   747,   748,   749,   750,   751,
     752,   753,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
     177,   178,   179,   180,     0,     0,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   759,     0,   197,     0,   198,   199,   200,
     201,     0,   202,     0,   203,   204,     0,   205,   206,   207,
     208,   209,   210,     0,   211,     0,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,   232,
     233,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     765,   766,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   771,
     294,   295,   296,   297,   298,     0,   299,   300,     0,     0,
     301,   302,   303,     0,     0,   304,   305,   306,   307,   308,
     774,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   320,   321,   775,   323,   324,   325,   326,   327,
     328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,  1992,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   778,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   780,
       0,   402,   403,     0,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   783,   416,
     784,     0,   418,   419,   786,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,   787,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
       0,   441,   442,   443,     0,     0,   444,     0,     0,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
      91,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    34,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,     0,   117,   118,   119,   120,   121,   122,     0,   742,
     123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
     745,     0,   746,     0,   134,   135,   136,   137,   138,   139,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,   149,   150,   151,   152,   747,   748,   749,   750,   751,
     752,   753,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
     177,   178,   179,   180,     0,     0,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   759,     0,   197,     0,   198,   199,   200,
     201,     0,   202,     0,   203,   204,     0,   205,   206,   207,
     208,   209,   210,     0,   211,     0,   212,   213,     0,   214,
     215,   216,   217,   218,   219,   220,   221,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,   232,
     233,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     241,   242,   243,   244,   245,   246,   247,   248,   249,   250,
       0,     0,   251,   252,   253,   254,     0,   255,   256,   257,
     765,   766,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,   283,   284,   285,
     286,   287,   288,     0,   289,   290,   291,   292,     0,   771,
     294,   295,   296,   297,   298,     0,   299,   300,     0,     0,
     301,   302,   303,     0,     0,   304,   305,   306,   307,   308,
     774,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   320,   321,   775,   323,   324,   325,   326,   327,
     328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,   357,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,   778,   378,   379,   380,   381,   382,
     383,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   399,   400,   780,
       0,   402,   403,     0,   404,   405,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   783,   416,
     784,     0,   418,   419,   786,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,   787,     0,   431,
     432,   433,   434,   435,   436,   437,     0,   438,   439,   440,
       0,   441,   442,   443,     0,     0,   444,     0,     0,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     661,  1093,   539,     0,     0,     0,   735,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  2635,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,     0,   109,   110,   111,   662,   663,     0,   664,
     665,     0,   117,   118,   119,   120,   121,   122,     0,     0,
     123,   124,   666,   667,   127,     0,   128,   129,   130,   131,
     668,     0,     0,     0,   134,   135,   136,   137,   138,     0,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
       0,     0,   154,   155,   156,   157,   158,   159,   160,   669,
     670,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
     177,   178,   179,   180,     0,     0,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,   190,   671,   192,
     193,   194,   195,   672,  1094,   197,     0,   198,   199,   673,
     201,     0,   202,     0,   203,     0,     0,     0,   206,   207,
     208,     0,   210,     0,   211,     0,   674,   213,     0,   214,
     215,   216,   217,   218,   219,     0,   221,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,
     675,   234,   235,   236,   237,   676,   677,     0,   678,     0,
     241,     0,     0,   244,     0,   246,   247,   248,   249,   250,
       0,     0,   251,     0,   253,     0,     0,   255,   256,   257,
       0,     0,   258,   259,   260,   261,   262,   679,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   680,     0,   681,   285,
     286,   287,   682,     0,   289,   290,     0,   292,     0,   683,
     294,   684,   296,   297,   298,     0,   299,   300,  1095,     0,
     301,   302,   303,     0,     0,   304,   685,     0,   307,     0,
     686,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   320,   321,   687,   323,   324,   688,   326,   327,
     328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   689,   339,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,     0,   358,   359,   360,   690,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,     0,   373,
     374,   375,   376,   377,     0,   378,   691,   380,   381,   382,
       0,   384,   385,   692,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   693,   400,   694,
       0,   402,   403,     0,   404,     0,   406,   407,   408,   409,
     410,     0,   695,   696,     0,     0,   413,   414,   697,   416,
     698,  1096,   418,   419,   699,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,  1039,   701,     0,   438,     0,   440,
       0,   441,   442,   443,     0,     0,   444,     0,     0,   445,
     446,   447,   448,   449,   450,   702,   703,   704,   705,   706,
     707,   708,   709,   710,   711,   712,   462,   463,   464,   465,
     661,     0,     0,     0,     0,     0,     0,  1097,  1098,  1854,
       0,     0,     0,     0,     0,     0,  1855,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     3,
       4,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,     0,   109,   110,   111,   662,   663,     0,   664,
     665,     0,   117,   118,   119,   120,   121,   122,     0,     0,
     123,   124,   666,   667,   127,     0,   128,   129,   130,   131,
     668,     0,     0,     0,   134,   135,   136,   137,   138,     0,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
       0,     0,   154,   155,   156,   157,   158,   159,   160,   669,
     670,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
     177,   178,   179,   180,     0,     0,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,   190,   671,   192,
     193,   194,   195,   672,     0,   197,     0,   198,   199,   673,
     201,     0,   202,     0,   203,     0,     0,     0,   206,   207,
     208,     0,   210,     0,   211,     0,   674,   213,     0,   214,
     215,   216,   217,   218,   219,     0,   221,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,
     675,   234,   235,   236,   237,   676,   677,     0,   678,     0,
     241,     0,     0,   244,     0,   246,   247,   248,   249,   250,
       0,     0,   251,     0,   253,     0,     0,   255,   256,   257,
       0,     0,   258,   259,   260,   261,   262,   679,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   680,     0,   681,   285,
     286,   287,   682,     0,   289,   290,     0,   292,     0,   683,
     294,   684,   296,   297,   298,     0,   299,   300,     0,     0,
     301,   302,   303,     0,     0,   304,   685,     0,   307,     0,
     686,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   320,   321,   687,   323,   324,   688,   326,   327,
     328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   689,   339,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,     0,   358,   359,   360,   690,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    25,   373,
     374,   375,   376,   377,     0,   378,   691,   380,   381,   382,
       0,   384,   385,   692,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   693,   400,   694,
       0,   402,   403,    29,   404,     0,   406,   407,   408,   409,
     410,     0,   695,   696,     0,     0,   413,   414,   697,   416,
     698,     0,   418,   419,   699,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   700,   701,     0,   438,     0,   440,
       0,   441,   442,   443,     0,     0,   444,     0,    32,   445,
     446,   447,   448,   449,   450,   702,   703,   704,   705,   706,
     707,   708,   709,   710,   711,   712,   462,   463,   464,   465,
     492,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    34,    92,    93,    94,
      95,    96,    97,    98,    99,   584,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,     0,   109,   110,   111,   112,   113,     0,   115,
     116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
     123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
     132,     0,     0,     0,   134,   135,   136,   137,   138,     0,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
       0,     0,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
     177,   178,   179,   180,     0,     0,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,     0,   198,   199,   200,
     201,     0,   202,     0,   203,     0,     0,     0,   206,   207,
     208,     0,   210,     0,   211,     0,   212,   213,     0,   214,
     215,   216,   217,   218,   219,     0,   221,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,
     233,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,   244,     0,   246,   247,   248,   249,   250,
       0,     0,   251,     0,   253,     0,     0,   255,   256,   257,
       0,     0,   258,   259,   260,   261,   262,   494,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,     0,   284,   285,
     286,   287,   288,     0,   289,   290,     0,   292,     0,   293,
     294,   295,   296,   297,   298,     0,   299,   300,     0,     0,
     301,   302,   303,     0,     0,   304,   305,     0,   307,     0,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
     328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    25,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
       0,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   496,   400,   401,
       0,   402,   403,    29,   404,     0,   406,   407,   408,   409,
     410,     0,   585,   412,     0,     0,   586,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   587,   437,     0,   438,     0,   440,
       0,   441,   442,   443,     0,     0,   444,     0,    32,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     492,     0,    33,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    34,    92,    93,    94,
      95,    96,    97,    98,    99,     0,   100,   101,   102,     0,
       0,     0,     0,     0,     0,     0,   103,   104,     0,   105,
     106,   107,     0,   109,   110,   111,   112,   113,     0,   115,
     116,     0,   117,   118,   119,   120,   121,   122,     0,     0,
     123,   124,   125,   126,   127,     0,   128,   129,   130,   131,
     132,     0,     0,     0,   134,   135,   136,   137,   138,     0,
     140,   141,   142,     0,   143,   144,   145,   146,   147,   148,
       0,     0,   150,   151,   152,     0,     0,     0,     0,     0,
       0,     0,   154,   155,   156,   157,   158,   159,   160,   161,
     162,   163,     0,   164,     0,   165,   166,   167,   168,   169,
     170,     0,   171,   172,   173,   174,   175,     0,     0,   176,
     177,   178,   179,   180,     0,     0,   181,   182,   183,     0,
     184,   185,   186,     0,   187,   188,   189,   190,   191,   192,
     193,   194,   195,   196,     0,   197,     0,   198,   199,   200,
     201,     0,   202,     0,   203,     0,     0,     0,   206,   207,
     208,     0,   210,     0,   211,     0,   212,   213,     0,   214,
     215,   216,   217,   218,   219,     0,   221,   222,   223,   224,
       0,   225,   226,   227,   228,   229,   230,     0,   231,     0,
     233,   234,   235,   236,   237,   238,   239,     0,   240,     0,
     241,     0,     0,   244,     0,   246,   247,   248,   249,   250,
       0,     0,   251,     0,   253,     0,     0,   255,   256,   257,
       0,     0,   258,   259,   260,   261,   262,   494,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,   278,   279,   280,   281,   282,     0,   284,   285,
     286,   287,   288,     0,   289,   290,     0,   292,     0,   293,
     294,   295,   296,   297,   298,     0,   299,   300,     0,     0,
     301,   302,   303,     0,     0,   304,   305,     0,   307,     0,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,     0,   320,   321,   322,   323,   324,   325,   326,   327,
     328,     0,   329,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   342,     0,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,     0,
     355,   356,     0,   358,   359,   360,   361,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,    25,   373,
     374,   375,   376,   377,     0,   378,   379,   380,   381,   382,
       0,   384,   385,   386,   387,     0,   388,   389,   390,   391,
     392,   393,   394,   395,   396,   397,   398,   496,   400,   401,
       0,   402,   403,    29,   404,     0,   406,   407,   408,   409,
     410,     0,   411,   412,     0,     0,   413,   414,   415,   416,
     417,     0,   418,   419,   420,   421,   422,   423,   424,   425,
       0,     0,   426,   427,   428,   429,   430,     0,     0,   431,
     432,   433,   434,   435,   587,   437,     0,   438,     0,   440,
       0,   441,   442,   443,     0,     0,   444,     0,    32,   445,
     446,   447,   448,   449,   450,   451,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
       0,   492,    33,   564,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    34,     0,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
     176,   177,   178,   179,   180,     0,     0,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
     207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
     214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
       0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
     250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
     257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
     285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
     293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
       0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
       0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
     401,     0,   402,   403,     0,   404,     0,   406,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
     416,   417,     0,   418,   419,   420,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,     0,
     431,   432,   433,   434,   435,   436,   437,     0,   438,     0,
     440,     0,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   492,     0,   564,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,   836,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
     176,   177,   178,   179,   180,     0,     0,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
     207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
     214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
       0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
     250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
     257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
     285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
     293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
       0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
       0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
     401,     0,   402,   403,     0,   404,     0,   406,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
     416,   417,     0,   418,   419,   420,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,     0,
     431,   432,   433,   434,   435,   436,   437,     0,   438,     0,
     440,     0,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   492,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2475,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
     176,   177,   178,   179,   180,     0,     0,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
     207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
     214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
       0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
     250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
     257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
     285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
     293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
       0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
       0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
     401,     0,   402,   403,     0,   404,     0,   406,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
     416,   417,     0,   418,   419,   420,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,     0,
     431,   432,   433,   434,   435,   436,   437,     0,   438,     0,
     440,     0,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   492,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1739,    92,    93,
      94,    95,    96,    97,    98,    99,     0,   100,   101,   102,
       0,     0,     0,     0,     0,     0,     0,   103,   104,     0,
     105,   106,   107,     0,   109,   110,   111,   112,   113,     0,
     115,   116,     0,   117,   118,   119,   120,   121,   122,     0,
       0,   123,   124,   125,   126,   127,     0,   128,   129,   130,
     131,   132,     0,     0,     0,   134,   135,   136,   137,   138,
       0,   140,   141,   142,     0,   143,   144,   145,   146,   147,
     148,     0,     0,   150,   151,   152,     0,     0,     0,     0,
       0,     0,     0,   154,   155,   156,   157,   158,   159,   160,
     161,   162,   163,     0,   164,     0,   165,   166,   167,   168,
     169,   170,     0,   171,   172,   173,   174,   175,     0,     0,
     176,   177,   178,   179,   180,     0,     0,   181,   182,   183,
       0,   184,   185,   186,     0,   187,   188,   189,   190,   191,
     192,   193,   194,   195,   196,     0,   197,     0,   198,   199,
     200,   201,     0,   202,     0,   203,     0,     0,     0,   206,
     207,   208,     0,   210,     0,   211,     0,   212,   213,     0,
     214,   215,   216,   217,   218,   219,     0,   221,   222,   223,
     224,     0,   225,   226,   227,   228,   229,   230,     0,   231,
       0,   233,   234,   235,   236,   237,   238,   239,     0,   240,
       0,   241,     0,     0,   244,     0,   246,   247,   248,   249,
     250,     0,     0,   251,     0,   253,     0,     0,   255,   256,
     257,     0,     0,   258,   259,   260,   261,   262,   494,   264,
     265,   266,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,   278,   279,   280,   281,   282,     0,   284,
     285,   286,   287,   288,     0,   289,   290,     0,   292,     0,
     293,   294,   295,   296,   297,   298,     0,   299,   300,     0,
       0,   301,   302,   303,     0,     0,   304,   305,     0,   307,
       0,   309,   310,   311,   312,   313,   314,   315,   316,   317,
     318,   319,     0,   320,   321,   322,   323,   324,   325,   326,
     327,   328,     0,   329,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,   342,     0,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
       0,   355,   356,     0,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,     0,
     373,   374,   375,   376,   377,     0,   378,   379,   380,   381,
     382,     0,   384,   385,   386,   387,     0,   388,   389,   390,
     391,   392,   393,   394,   395,   396,   397,   398,   496,   400,
     401,     0,   402,   403,     0,   404,     0,   406,   407,   408,
     409,   410,     0,   411,   412,     0,     0,   413,   414,   415,
     416,   417,     0,   418,   419,   420,   421,   422,   423,   424,
     425,     0,     0,   426,   427,   428,   429,   430,     0,     0,
     431,   432,   433,   434,   435,   436,   437,     0,   438,     0,
     440,     0,   441,   442,   443,     0,     0,   444,     0,     0,
     445,   446,   447,   448,   449,   450,   451,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,     0,     0,     0,  2330,  1093,   539,     0,     0,  1565,
     735,     0,     0,     0,     0,     0,     0,  2224,  1566,  1567,
    1568,    92,    93,    94,    95,    96,    97,    98,    99,   966,
     100,   101,   102,   967,   968,   969,   970,   971,   972,   973,
     103,   104,   974,   105,   106,   107,  2331,   109,   110,   111,
       0,  1118,  2332,  1120,  1121,   975,   117,   118,   119,   120,
     121,   122,   976,   977,   123,   124,  1122,  1123,   127,   978,
     128,   129,   130,   131,     0,   979,  2333,   980,   134,   135,
     136,   137,   138,  2334,   140,   141,   142,   981,   143,   144,
     145,   146,   147,   148,   982,  2335,   150,   151,   152,   983,
     984,   985,  2336,   986,   987,   988,   154,   155,   156,   157,
     158,   159,   160,  1128,  1129,   163,   989,   164,   990,   165,
     166,   167,   168,   169,   170,   991,   171,   172,   173,   174,
     175,   992,   993,   176,   177,   757,   179,   180,   994,   995,
     181,   182,   183,   996,   184,   185,   186,   997,   187,   188,
     189,   190,     0,   192,   193,   194,   195,     0,   998,   197,
     999,   198,   199,  1130,   201,  1000,   202,  1001,   203,  2337,
    1002,  2338,   206,   207,   208,  2339,   210,  1003,   211,  1004,
       0,   213,  1005,   214,   215,   216,   217,   218,   219,  2340,
     221,   222,   223,   224,  1006,   225,   226,   227,   228,   229,
     230,  1007,   231,  2341,     0,   234,   235,   236,   237,  1136,
    1137,  1008,  1138,  1009,   241,  2342,  2343,   244,  2344,   246,
     247,   248,   249,   250,  1010,  1011,   251,  2345,   253,  2346,
    1012,   255,   256,   257,  1013,  1014,   258,   259,   260,   261,
     262,  2347,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
    1145,  2348,  1147,   285,   286,   287,  2349,  1015,   289,   290,
    2350,   292,  1016,     0,   294,  1149,   296,   297,   298,  1017,
     299,   300,  1018,  1019,  2351,   302,   303,  1020,  1021,   304,
       0,  2352,   307,  2353,     0,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,  1022,   320,   321,     0,   323,
     324,     0,   326,   327,   328,  1023,   329,   330,   331,   332,
     333,   334,   335,   336,   337,  1152,   339,   340,   341,   342,
    1024,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,  1025,   355,   356,  2354,   358,   359,   360,
    1154,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,  1026,   373,   374,   375,   376,   377,  1027,   378,
    2355,   380,   381,   382,  2356,   384,   385,  1157,   387,  1028,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,  2357,   400,     0,  1029,   402,   403,  1030,   404,  2358,
     406,   407,   408,   409,   410,  1031,  1160,  1161,  1032,  1033,
     413,   414,     0,   416,     0,  1034,   418,   419,  2359,   421,
     422,   423,   424,   425,  1035,  1036,   426,   427,   428,   429,
     430,  1037,  1038,   431,   432,   433,   434,   435,     0,  1163,
    1040,   438,  2360,   440,  1041,   441,   442,   443,  1042,  1043,
     444,  1044,  1045,   445,   446,   447,   448,   449,   450,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     462,   463,   464,   465,     0,   492,     0,  1569,  1570,  1571,
    1565,  2361,  2362,  1574,  1575,  1576,  1577,     0,     0,  1566,
    1567,  1568,    92,    93,    94,    95,    96,    97,    98,    99,
       0,   100,   101,   102,     0,     0,     0,     0,     0,     0,
       0,   103,   104,     0,   105,   106,   107,     0,   109,   110,
     111,   112,   113,     0,   115,   116,     0,   117,   118,   119,
     120,   121,   122,     0,     0,   123,   124,   125,   126,   127,
       0,   128,   129,   130,   131,   132,     0,     0,     0,   134,
     135,   136,   137,   138,     0,   140,   141,   142,     0,   143,
     144,   145,   146,   147,   148,     0,     0,   150,   151,   152,
       0,     0,     0,     0,     0,     0,     0,   154,   155,   156,
     157,   158,   159,   160,   161,   162,   163,     0,   164,     0,
     165,   166,   167,   168,   169,   170,     0,   171,   172,   173,
     174,   175,     0,     0,   176,   177,   178,   179,   180,     0,
       0,   181,   182,   183,     0,   184,   185,   186,     0,   187,
     188,   189,   190,   191,   192,   193,   194,   195,   196,     0,
     197,     0,   198,   199,   200,   201,     0,   202,     0,   203,
       0,     0,     0,   206,   207,   208,     0,   210,     0,   211,
       0,   212,   213,     0,   214,   215,   216,   217,   218,   219,
       0,   221,   222,   223,   224,     0,   225,   226,   227,   228,
     229,   230,     0,   231,     0,   233,   234,   235,   236,   237,
     238,   239,     0,   240,     0,   241,     0,     0,   244,     0,
     246,   247,   248,   249,   250,     0,     0,   251,     0,   253,
       0,     0,   255,   256,   257,     0,     0,   258,   259,   260,
     261,   262,   494,   264,   265,   266,   267,   268,   269,   270,
     271,   272,   273,   274,   275,   276,   277,   278,   279,   280,
     281,   282,     0,   284,   285,   286,   287,   288,     0,   289,
     290,     0,   292,     0,   293,   294,   295,   296,   297,   298,
       0,   299,   300,     0,     0,   301,   302,   303,     0,     0,
     304,   305,     0,   307,     0,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,     0,   320,   321,   322,
     323,   324,   325,   326,   327,   328,     0,   329,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
     342,     0,   343,   344,   345,   346,   347,   348,   349,   350,
     351,   352,   353,   354,     0,   355,   356,     0,   358,   359,
     360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,     0,   373,   374,   375,   376,   377,     0,
     378,   379,   380,   381,   382,     0,   384,   385,   386,   387,
       0,   388,   389,   390,   391,   392,   393,   394,   395,   396,
     397,   398,   496,   400,   401,     0,   402,   403,     0,   404,
       0,   406,   407,   408,   409,   410,     0,   411,   412,     0,
       0,   413,   414,   415,   416,   417,     0,   418,   419,   420,
     421,   422,   423,   424,   425,     0,     0,   426,   427,   428,
     429,   430,     0,     0,   431,   432,   433,   434,   435,   436,
     437,     0,   438,     0,   440,     0,   441,   442,   443,     0,
       0,   444,     0,     0,   445,   446,   447,   448,   449,   450,
     451,   452,   453,   454,   455,   456,   457,   458,   459,   460,
     461,   462,   463,   464,   465,     0,     0,     0,  1569,  1570,
    1571,     0,  1572,  1573,  1574,  1575,  1576,  1577,  1250,     0,
       0,  1251,     0,     0,     0,     0,     0,  1252,  1253,  1254,
       0,     0,     0,     0,     0,     0,  1250,     0,     0,  1251,
       0,     0,     0,     0,  1255,  1252,  1253,  1254,     0,     0,
       0,     0,  1257,     0,  1250,     0,     0,  1251,     0,  1258,
       0,     0,  1255,  1252,  1253,  1254,     0,     0,     0,     0,
    1257,     0,     0,     0,     0,     0,     0,  1258,     0,     0,
    1255,     0,  1250,     0,  1259,  1251,     0,     0,  1257,     0,
       0,  1252,  1253,  1254,     0,  1258,     0,     0,     0,     0,
    1250,     0,  1259,  1251,     0,     0,     0,     0,  1255,  1252,
    1253,  1254,     0,     0,     0,     0,  1257,     0,     0,     0,
    1259,     0,     0,  1258,     0,     0,  1255,     0,     0,     0,
       0,     0,     0,     0,  1257,     0,     0,     0,     0,     0,
       0,  1258,  1250,     0,     0,  1251,     0,     0,  1259,     0,
       0,  1252,  1253,  1254,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1259,     0,  1255,     0,
    1250,     0,     0,  1251,     0,     0,  1257,     0,     0,  1252,
    1253,  1254,     0,  1258,  1260,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1255,     0,  1261,     0,
       0,     0,  1260,  1262,  1257,     0,     0,     0,  1259,     0,
       0,  1258,     0,     0,     0,     0,  1261,     0,     0,     0,
    1260,  1262,     0,     0,  1263,  1264,     0,     0,     0,     0,
       0,     0,     0,     0,  1261,     0,  1259,     0,  1265,  1262,
       0,     0,  1263,  1264,     0,     0,     0,     0,  1260,     0,
       0,     0,     0,     0,     0,     0,  1265,     0,     0,     0,
    1263,  1264,  1261,     0,     0,     0,  1260,  1262,     0,     0,
       0,     0,     0,     0,  1265,     0,  1266,     0,     0,  1267,
    1261,     0,     0,     0,     0,  1262,     0,     0,  1263,  1264,
       0,     0,     0,  1268,  1266,     0,  1269,  1267,     0,     0,
       0,     0,  1265,     0,     0,     0,  1263,  1264,  1260,     0,
       0,  1268,  1266,     0,  1269,  1267,     0,     0,     0,     0,
    1265,     0,  1261,     0,     0,     0,     0,  1262,     0,  1268,
       0,     0,  1269,     0,     0,     0,  1260,     0,     0,     0,
    1266,     0,     0,  1267,     0,     0,     0,     0,  1263,  1264,
    1261,     0,     0,     0,     0,  1262,     0,  1268,  1266,     0,
    1269,  1267,  1265,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1268,  1263,  1264,  1269,     0,
       0,     0,     0,  1270,     0,     0,     0,     0,     0,     0,
    1265,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1266,  1270,     0,  1267,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1268,     0,  1270,
    1269,     0,     0,     0,     0,     0,     0,     0,  1266,     0,
       0,  1267,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1268,     0,  1270,  1269,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1270,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,  1271,     0,     0,  1272,  1273,  1274,     0,
    1275,  1276,  1277,  1278,  1279,  1280,     0,     0,     0,     0,
    2295,  1271,     0,     0,  1272,  1273,  1274,  1270,  1275,  1276,
    1277,  1278,  1279,  1280,     0,     0,     0,     0,  2420,  1271,
       0,     0,  1272,  1273,  1274,     0,  1275,  1276,  1277,  1278,
    1279,  1280,     0,     0,     0,  1270,  2439,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1271,     0,     0,
    1272,  1273,  1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,
       0,     0,     0,     0,  2589,  1271,     0,     0,  1272,  1273,
    1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,     0,     0,
       0,     0,  2805,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1271,     0,     0,
    1272,  1273,  1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,
       0,     0,     0,     0,  2817,     0,     0,     0,     0,     0,
       0,     0,     0,     0,   965,  1271,     0,     0,  1272,  1273,
    1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,     0,     0,
    1428,    92,    93,    94,    95,    96,    97,    98,    99,   966,
     100,   101,   102,   967,   968,   969,   970,   971,   972,   973,
     103,   104,   974,   105,   106,   107,     0,   109,   110,   111,
     662,   663,     0,   664,   665,   975,   117,   118,   119,   120,
     121,   122,   976,   977,   123,   124,   666,   667,   127,   978,
     128,   129,   130,   131,   668,   979,     0,   980,   134,   135,
     136,   137,   138,     0,   140,   141,   142,   981,   143,   144,
     145,   146,   147,   148,   982,     0,   150,   151,   152,   983,
     984,   985,     0,   986,   987,   988,   154,   155,   156,   157,
     158,   159,   160,   669,   670,   163,   989,   164,   990,   165,
     166,   167,   168,   169,   170,   991,   171,   172,   173,   174,
     175,   992,   993,   176,   177,   178,   179,   180,   994,   995,
     181,   182,   183,   996,   184,   185,   186,   997,   187,   188,
     189,   190,   671,   192,   193,   194,   195,   672,   998,   197,
     999,   198,   199,   673,   201,  1000,   202,  1001,   203,     0,
    1002,     0,   206,   207,   208,     0,   210,  1003,   211,  1004,
     674,   213,  1005,   214,   215,   216,   217,   218,   219,     0,
     221,   222,   223,   224,  1006,   225,   226,   227,   228,   229,
     230,  1007,   231,     0,   675,   234,   235,   236,   237,   676,
     677,  1008,   678,  1009,   241,     0,     0,   244,     0,   246,
     247,   248,   249,   250,  1010,  1011,   251,     0,   253,     0,
    1012,   255,   256,   257,  1013,  1014,   258,   259,   260,   261,
     262,   679,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     680,     0,   681,   285,   286,   287,   682,  1015,   289,   290,
       0,   292,  1016,   683,   294,   684,   296,   297,   298,  1017,
     299,   300,  1018,  1019,   301,   302,   303,  1020,  1021,   304,
     685,     0,   307,     0,   686,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,  1022,   320,   321,   687,   323,
     324,   688,   326,   327,   328,  1023,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   689,   339,   340,   341,   342,
    1024,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,  1025,   355,   356,     0,   358,   359,   360,
     690,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,  1026,   373,   374,   375,   376,   377,  1027,   378,
     691,   380,   381,   382,     0,   384,   385,   692,   387,  1028,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   693,   400,   694,  1029,   402,   403,  1030,   404,     0,
     406,   407,   408,   409,   410,  1031,   695,   696,  1032,  1033,
     413,   414,   697,   416,   698,  1034,   418,   419,   699,   421,
     422,   423,   424,   425,  1035,  1036,   426,   427,   428,   429,
     430,  1037,  1038,   431,   432,   433,   434,   435,  1039,   701,
    1040,   438,     0,   440,  1041,   441,   442,   443,  1042,  1043,
     444,  1044,  1045,   445,   446,   447,   448,   449,   450,   702,
     703,   704,   705,   706,   707,   708,   709,   710,   711,   712,
     462,   463,   464,   465,   492,     0,     0,     0,     0,     0,
       0,     0,     0,  1046,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
     112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
     128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
     136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
       0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,     0,     0,   176,   177,   178,   179,   180,     0,     0,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
       0,   198,   199,   200,   201,     0,   202,     0,   203,     0,
       0,     0,   206,   207,   208,     0,   210,     0,   211,     0,
     212,   213,     0,   214,   215,   216,   217,   218,   219,     0,
     221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,   233,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,   244,     0,   246,
     247,   248,   249,   250,     0,     0,   251,     0,   253,     0,
       0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
     262,   494,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,     0,   284,   285,   286,   287,   288,     0,   289,   290,
       0,   292,     0,   293,   294,   295,   296,   297,   298,     0,
     299,   300,     0,     0,   301,   302,   303,     0,     0,   304,
     305,     0,   307,     0,   309,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,     0,   358,   359,   360,
     361,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,     0,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   496,   400,   401,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   437,
       0,   438,     0,   440,     0,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   661,  1093,   539,     0,     0,     0,
     735,     0,     0,  2141,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
     662,   663,     0,   664,   665,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   666,   667,   127,     0,
     128,   129,   130,   131,   668,     0,     0,     0,   134,   135,
     136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
       0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,   669,   670,   163,  1308,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,     0,     0,   176,   177,   178,   179,   180,     0,     0,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,   190,   671,   192,   193,   194,   195,   672,  1094,   197,
       0,   198,   199,   673,   201,     0,   202,     0,   203,     0,
       0,     0,   206,   207,   208,     0,   210,     0,   211,     0,
     674,   213,     0,   214,   215,   216,   217,   218,   219,     0,
     221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,   675,   234,   235,   236,   237,   676,
     677,     0,   678,     0,   241,     0,     0,   244,     0,   246,
     247,   248,   249,   250,     0,     0,   251,     0,   253,     0,
       0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
     262,   679,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     680,     0,   681,   285,   286,   287,   682,     0,   289,   290,
       0,   292,     0,   683,   294,   684,   296,   297,   298,     0,
     299,   300,  1095,     0,   301,   302,   303,     0,     0,   304,
     685,     0,   307,     0,   686,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   320,   321,   687,   323,
     324,   688,   326,   327,   328,     0,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   689,   339,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,     0,   358,   359,   360,
     690,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     691,   380,   381,   382,     0,   384,   385,   692,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   693,   400,   694,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   695,   696,     0,     0,
     413,   414,   697,   416,   698,  1096,   418,   419,   699,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,  1039,   701,
       0,   438,     0,   440,     0,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   702,
     703,   704,   705,   706,   707,   708,   709,   710,   711,   712,
     462,   463,   464,   465,   661,  1093,   539,     0,     0,     0,
     735,  1097,  1098,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
     662,   663,     0,   664,   665,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   666,   667,   127,     0,
     128,   129,   130,   131,   668,     0,     0,     0,   134,   135,
     136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
       0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,   669,   670,   163,  1310,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,     0,     0,   176,   177,   178,   179,   180,     0,     0,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,   190,   671,   192,   193,   194,   195,   672,  1094,   197,
       0,   198,   199,   673,   201,     0,   202,     0,   203,     0,
       0,     0,   206,   207,   208,     0,   210,     0,   211,     0,
     674,   213,     0,   214,   215,   216,   217,   218,   219,     0,
     221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,   675,   234,   235,   236,   237,   676,
     677,     0,   678,     0,   241,     0,     0,   244,     0,   246,
     247,   248,   249,   250,     0,     0,   251,     0,   253,     0,
       0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
     262,   679,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     680,     0,   681,   285,   286,   287,   682,     0,   289,   290,
       0,   292,     0,   683,   294,   684,   296,   297,   298,     0,
     299,   300,  1095,     0,   301,   302,   303,     0,     0,   304,
     685,     0,   307,     0,   686,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   320,   321,   687,   323,
     324,   688,   326,   327,   328,     0,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   689,   339,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,     0,   358,   359,   360,
     690,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     691,   380,   381,   382,     0,   384,   385,   692,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   693,   400,   694,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   695,   696,     0,     0,
     413,   414,   697,   416,   698,  1096,   418,   419,   699,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,  1039,   701,
       0,   438,     0,   440,     0,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   702,
     703,   704,   705,   706,   707,   708,   709,   710,   711,   712,
     462,   463,   464,   465,   661,  1093,   539,     0,     0,     0,
     735,  1097,  1098,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
     662,   663,     0,   664,   665,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   666,   667,   127,     0,
     128,   129,   130,   131,   668,     0,     0,     0,   134,   135,
     136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
       0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,   669,   670,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,     0,     0,   176,   177,   178,   179,   180,     0,     0,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,   190,   671,   192,   193,   194,   195,   672,  1094,   197,
       0,   198,   199,   673,   201,     0,   202,     0,   203,     0,
       0,     0,   206,   207,   208,     0,   210,     0,   211,     0,
     674,   213,     0,   214,   215,   216,   217,   218,   219,     0,
     221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,   675,   234,   235,   236,   237,   676,
     677,     0,   678,     0,   241,     0,     0,   244,     0,   246,
     247,   248,   249,   250,     0,     0,   251,     0,   253,     0,
       0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
     262,   679,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     680,     0,   681,   285,   286,   287,   682,     0,   289,   290,
       0,   292,     0,   683,   294,   684,   296,   297,   298,     0,
     299,   300,  1095,     0,   301,   302,   303,     0,     0,   304,
     685,     0,   307,     0,   686,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   320,   321,   687,   323,
     324,   688,   326,   327,   328,     0,   329,   330,   331,   332,
     333,   334,   335,   336,   337,   689,   339,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,     0,   358,   359,   360,
     690,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     691,   380,   381,   382,     0,   384,   385,   692,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   693,   400,   694,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   695,   696,     0,     0,
     413,   414,   697,   416,   698,  1096,   418,   419,   699,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,  1039,   701,
       0,   438,     0,   440,     0,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   702,
     703,   704,   705,   706,   707,   708,   709,   710,   711,   712,
     462,   463,   464,   465,  1250,     0,     0,  1251,     0,     0,
       0,  1097,  1098,  1252,  1253,  1254,     0,     0,     0,     0,
       0,     0,  1250,     0,     0,  1251,     0,     0,     0,     0,
    1255,  1252,  1253,  1254,  1701,     0,     0,     0,  1257,     0,
    1250,     0,     0,  1251,     0,  1258,     0,     0,  1255,  1252,
    1253,  1254,     0,     0,     0,     0,  1257,     0,     0,     0,
       0,     0,     0,  1258,     0,     0,  1255,     0,  1250,     0,
    1259,  1251,     0,     0,  1257,     0,     0,  1252,  1253,  1254,
       0,  1258,     0,     0,     0,     0,     0,     0,  1259,     0,
       0,     0,     0,     0,  1255,     0,     0,  1891,     0,     0,
       0,  1250,  1257,     0,  1251,     0,  1259,     0,     0,  1258,
    1252,  1253,  1254,     0,     0,     0,     0,     0,     0,     0,
    1702,     0,     0,     0,     0,     0,     0,  1255,     0,     0,
       0,     0,     0,     0,  1259,  1257,     0,     0,     0,     0,
       0,     0,  1258,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  1259,     0,     0,
    1260,     0,     0,     0,     0,     0,     0,     0,  1931,     0,
       0,   899,     0,  1932,  1261,     0,     0,     0,  1260,  1262,
       0,     0,     0,     0,     0,  2883,     0,     0,     0,     0,
     900,     0,  1261,     0,     0,     0,  1260,  1262,     0,     0,
    1263,  1264,     0,     0,     0,     0,     0,     0,     0,     0,
    1261,     0,     0,     0,  1265,  1262,     0,     0,  1263,  1264,
       0,     0,     0,     0,  1260,     0,     0,     0,     0,     0,
       0,     0,  1265,     0,     0,     0,  1263,  1264,  1261,     0,
     901,  2316,     0,  1262,     0,     0,     0,     0,     0,  2317,
    1265,     0,  1266,     0,     0,  1267,     0,  1260,     0,     0,
       0,     0,     0,     0,  1263,  1264,     0,     0,     0,  1268,
    1266,  1261,  1269,  1267,     0,     0,  1262,     0,  1265,     0,
       0,     0,     0,     0,     0,     0,     0,  1268,  1266,     0,
    1269,  1267,     0,     0,     0,     0,     0,  1263,  1264,     0,
       0,     0,     0,     0,     0,  1268,     0,  2318,  1269,     0,
       0,  1265,     0,     0,     0,     0,  1266,     0,     0,  1267,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   902,
       0,  2884,     0,  1268,     0,     0,  1269,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1266,
       0,     0,  1267,     0,     0,     0,     0,     0,     0,  1270,
       0,     0,     0,     0,     0,     0,  1268,     0,     0,  1269,
    1250,     0,     0,  1251,     0,     0,     0,  1270,   903,  1252,
    1253,  1254,     0,     0,     0,     0,   904,  1905,     0,     0,
       0,     0,     0,     0,     0,  1270,  1255,     0,   905,  1940,
    2319,     0,     0,     0,  1257,     0,     0,     0,     0,  1250,
       0,  1258,  1251,     0,     0,     0,     0,  1703,  1252,  1253,
    1254,     0,     0,  1270,     0,     0,     0,     0,     0,   906,
       0,     0,     0,     0,     0,  1255,  1259,     0,     0,     0,
       0,     0,     0,  1257,     0,     0,     0,     0,     0,     0,
    1258,     0,     0,     0,     0,     0,  1270,     0,     0,  1271,
       0,     0,  1272,  1273,  1274,     0,  1275,  1276,  1277,  1278,
    1279,  1280,     0,     0,   908,  1259,     0,  1271,     0,     0,
    1272,  1273,  1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,
       0,     0,     0,     0,     0,  1271,   909,     0,  1272,  1273,
    1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,     0,     0,
       0,     0,     0,     0,     0,     0,   911,     0,  2320,     0,
       0,  2321,     0,  1271,     0,     0,  1272,  1273,  1274,     0,
    1275,  1276,  1277,  1278,  1279,  1280,  1260,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
    1261,     0,     0,     0,     0,  1262,  1271,     0,     0,  1272,
    1273,  1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,     0,
    1945,     0,     0,     0,     0,  1260,  1263,  1264,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,  1261,
    1265,     0,  1250,     0,  1262,  1251,     0,     0,     0,     0,
       0,  1252,  1253,  1254,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1263,  1264,     0,  1255,     0,
       0,  1947,     0,  1384,     0,     0,  1257,     0,  1266,  1265,
       0,  1267,     0,  1258,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,  1268,     0,     0,  1269,     0,
       0,  1250,     0,     0,  1251,     0,     0,     0,  1259,     0,
    1252,  1253,  1254,     0,     0,     0,     0,  1266,     0,     0,
    1267,     0,     0,     0,     0,     0,     0,  1255,     0,     0,
       0,     0,     0,     0,  1268,  1257,     0,  1269,  1250,     0,
       0,  1251,  1258,     0,     0,     0,     0,  1252,  1253,  1254,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1255,     0,     0,  1259,     0,     0,
       0,     0,  1257,     0,     0,     0,     0,     0,     0,  1258,
       0,     0,     0,     0,     0,  1270,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,  1259,     0,     0,     0,  1260,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1261,     0,  1270,     0,     0,  1262,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1263,  1264,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,  1265,     0,     0,     0,     0,  1260,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,  1261,     0,     0,     0,  1271,  1262,     0,  1272,  1273,
    1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,     0,     0,
    1266,     0,     0,  1267,  1260,     0,     0,  1263,  1264,     0,
       0,     0,     0,     0,     0,     0,     0,  1268,  1261,     0,
    1269,  1265,     0,  1262,  1271,     0,     0,  1272,  1273,  1274,
       0,  1275,  1276,  1277,  1278,  1279,  1280,     0,     0,     0,
       0,     0,     0,     0,  1263,  1264,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,  1265,  1266,
       0,     0,  1267,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1268,     0,     0,  1269,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1266,     0,     0,  1267,
       0,     0,     0,     0,     0,     0,     0,  1270,     0,     0,
       0,     0,     0,  1268,     0,     0,  1269,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1270,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,  2162,     0,     0,
       0,     0,     0,  1270,     0,     0,     0,  1271,     0,     0,
    1272,  1273,  1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,  1271,     0,     0,  1272,
    1273,  1274,     0,  1275,  1276,  1277,  1278,  1279,  1280,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,   965,
       0,  1624,     0,  1271,     0,     0,  1272,  1273,  1274,     0,
    1275,  1276,  1277,  1278,  1279,  1280,    92,    93,    94,    95,
      96,    97,    98,    99,   966,   100,   101,   102,   967,   968,
     969,   970,   971,   972,   973,   103,   104,   974,   105,   106,
     107,     0,   109,   110,   111,   662,   663,     0,   664,   665,
     975,   117,   118,   119,   120,   121,   122,   976,   977,   123,
     124,   666,   667,   127,   978,   128,   129,   130,   131,   668,
     979,     0,   980,   134,   135,   136,   137,   138,     0,   140,
     141,   142,   981,   143,   144,   145,   146,   147,   148,   982,
       0,   150,   151,   152,   983,   984,   985,     0,   986,   987,
     988,   154,   155,   156,   157,   158,   159,   160,   669,   670,
     163,   989,   164,   990,   165,   166,   167,   168,   169,   170,
     991,   171,   172,   173,   174,   175,   992,   993,   176,   177,
     178,   179,   180,   994,   995,   181,   182,   183,   996,   184,
     185,   186,   997,   187,   188,   189,   190,   671,   192,   193,
     194,   195,   672,   998,   197,   999,   198,   199,   673,   201,
    1000,   202,  1001,   203,     0,  1002,     0,   206,   207,   208,
       0,   210,  1003,   211,  1004,   674,   213,  1005,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,  1006,
     225,   226,   227,   228,   229,   230,  1007,   231,     0,   675,
     234,   235,   236,   237,   676,   677,  1008,   678,  1009,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,  1010,
    1011,   251,     0,   253,     0,  1012,   255,   256,   257,  1013,
    1014,   258,   259,   260,   261,   262,   679,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   680,     0,   681,   285,   286,
     287,   682,  1015,   289,   290,     0,   292,  1016,   683,   294,
     684,   296,   297,   298,  1017,   299,   300,  1018,  1019,   301,
     302,   303,  1020,  1021,   304,   685,     0,   307,     0,   686,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
    1022,   320,   321,   687,   323,   324,   688,   326,   327,   328,
    1023,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     689,   339,   340,   341,   342,  1024,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,  1025,   355,
     356,     0,   358,   359,   360,   690,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,  1026,   373,   374,
     375,   376,   377,  1027,   378,   691,   380,   381,   382,     0,
     384,   385,   692,   387,  1028,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   693,   400,   694,  1029,
     402,   403,  1030,   404,     0,   406,   407,   408,   409,   410,
    1031,   695,   696,  1032,  1033,   413,   414,   697,   416,   698,
    1034,   418,   419,   699,   421,   422,   423,   424,   425,  1035,
    1036,   426,   427,   428,   429,   430,  1037,  1038,   431,   432,
     433,   434,   435,  1039,   701,  1040,   438,     0,   440,  1041,
     441,   442,   443,  1042,  1043,   444,  1044,  1045,   445,   446,
     447,   448,   449,   450,   702,   703,   704,   705,   706,   707,
     708,   709,   710,   711,   712,   462,   463,   464,   465,   965,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,   966,   100,   101,   102,   967,   968,
     969,   970,   971,   972,   973,   103,   104,   974,   105,   106,
     107,     0,   109,   110,   111,   662,   663,     0,   664,   665,
     975,   117,   118,   119,   120,   121,   122,   976,   977,   123,
     124,   666,   667,   127,   978,   128,   129,   130,   131,   668,
     979,     0,   980,   134,   135,   136,   137,   138,     0,   140,
     141,   142,   981,   143,   144,   145,   146,   147,   148,   982,
       0,   150,   151,   152,   983,   984,   985,     0,   986,   987,
     988,   154,   155,   156,   157,   158,   159,   160,   669,   670,
     163,   989,   164,   990,   165,   166,   167,   168,   169,   170,
     991,   171,   172,   173,   174,   175,   992,   993,   176,   177,
     178,   179,   180,   994,   995,   181,   182,   183,   996,   184,
     185,   186,   997,   187,   188,   189,   190,   671,   192,   193,
     194,   195,   672,   998,   197,   999,   198,   199,   673,   201,
    1000,   202,  1001,   203,     0,  1002,     0,   206,   207,   208,
       0,   210,  1003,   211,  1004,   674,   213,  1005,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,  1006,
     225,   226,   227,   228,   229,   230,  1007,   231,     0,   675,
     234,   235,   236,   237,   676,   677,  1008,   678,  1009,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,  1010,
    1011,   251,     0,   253,     0,  1012,   255,   256,   257,  1013,
    1014,   258,   259,   260,   261,   262,   679,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   680,     0,   681,   285,   286,
     287,   682,  1015,   289,   290,     0,   292,  1016,   683,   294,
     684,   296,   297,   298,  1017,   299,   300,  1018,  1019,   301,
     302,   303,  1020,  1021,   304,   685,     0,   307,     0,   686,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
    1022,   320,   321,   687,   323,   324,   688,   326,   327,   328,
    1023,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     689,   339,   340,   341,   342,  1024,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,  1025,   355,
     356,     0,   358,   359,   360,   690,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,  1026,   373,   374,
     375,   376,   377,  1027,   378,   691,   380,   381,   382,     0,
     384,   385,   692,   387,  1028,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   693,   400,   694,  1029,
     402,   403,  1030,   404,     0,   406,   407,   408,   409,   410,
    1031,   695,   696,  1032,  1033,   413,   414,   697,   416,   698,
    1034,   418,   419,   699,   421,   422,   423,   424,   425,  1035,
    1036,   426,   427,   428,   429,   430,  1037,  1038,   431,   432,
     433,   434,   435,  1039,   701,  1040,   438,     0,   440,  1041,
     441,   442,   443,  1042,  1043,   444,  1044,  1045,   445,   446,
     447,   448,   449,   450,   702,   703,   704,   705,   706,   707,
     708,   709,   710,   711,   712,   462,   463,   464,   465,   965,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
    1764,    97,    98,    99,   966,   100,   101,   102,   967,   968,
     969,   970,   971,   972,   973,   103,   104,   974,   105,   106,
     107,     0,   109,   110,   111,   662,   663,     0,   664,   665,
     975,   117,   118,   119,   120,   121,   122,   976,   977,   123,
     124,   666,   667,   127,   978,   128,   129,   130,   131,   668,
     979,     0,   980,   134,   135,   136,   137,   138,     0,   140,
     141,   142,   981,   143,   144,   145,   146,   147,   148,   982,
       0,   150,   151,   152,   983,   984,   985,     0,   986,   987,
     988,   154,   155,   156,   157,   158,   159,   160,   669,   670,
     163,   989,   164,   990,   165,   166,   167,   168,   169,   170,
     991,   171,   172,   173,   174,   175,   992,   993,   176,   177,
     178,  1765,   180,   994,   995,   181,   182,   183,   996,   184,
     185,   186,   997,   187,   188,   189,   190,   671,   192,   193,
     194,   195,   672,   998,   197,   999,   198,   199,   673,   201,
    1000,   202,  1001,   203,     0,  1002,     0,   206,   207,   208,
       0,   210,  1003,   211,  1004,   674,   213,  1005,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,  1006,
     225,   226,   227,   228,   229,   230,  1007,   231,     0,   675,
     234,   235,   236,   237,   676,   677,  1008,   678,  1009,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,  1010,
    1011,   251,     0,   253,     0,  1012,   255,   256,   257,  1013,
    1014,   258,   259,   260,   261,   262,   679,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   680,     0,   681,   285,   286,
     287,   682,  1015,   289,   290,     0,   292,  1016,   683,   294,
     684,   296,   297,   298,  1017,   299,   300,  1018,  1019,   301,
     302,   303,  1020,  1021,   304,   685,     0,   307,     0,   686,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
    1022,   320,   321,   687,   323,   324,   688,   326,   327,   328,
    1023,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     689,   339,   340,   341,   342,  1024,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,  1025,   355,
     356,     0,   358,   359,   360,   690,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,  1026,   373,   374,
     375,   376,   377,  1027,  1766,   691,   380,   381,   382,     0,
     384,   385,   692,   387,  1028,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   693,   400,   694,  1029,
     402,   403,  1030,   404,     0,   406,   407,   408,   409,   410,
    1031,   695,   696,  1032,  1033,   413,   414,   697,   416,   698,
    1034,   418,   419,   699,   421,   422,   423,   424,   425,  1035,
    1036,   426,   427,   428,   429,   430,  1037,  1038,   431,   432,
     433,   434,   435,  1039,   701,  1040,   438,     0,   440,  1041,
     441,   442,   443,  1042,  1043,   444,  1044,  1045,   445,   446,
     447,   448,   449,   450,   702,   703,   704,   705,   706,   707,
     708,   709,   710,   711,   712,   462,   463,   464,   465,    91,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,   742,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   745,
       0,   746,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,   747,   748,   749,   750,   751,   752,
     753,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   759,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,   204,     0,   205,   206,   207,   208,
     209,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,   765,
     766,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,     0,   289,   290,   291,   292,     0,   771,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,   306,   307,   308,   774,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   775,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,   778,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   780,     0,
     402,   403,     0,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   783,   416,   784,
       0,   418,   419,   786,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,   787,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,    91,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,   108,   109,   110,   111,   112,   113,   114,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,   133,     0,   134,   135,   136,   137,   138,   139,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
     149,   150,   151,   152,     0,     0,     0,   153,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,   204,     0,   205,   206,   207,   208,
     209,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,   220,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,   232,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,     0,
       0,   251,   252,   253,   254,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   263,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,   283,   284,   285,   286,
     287,   288,     0,   289,   290,   291,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,   306,   307,   308,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,   357,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   399,   400,   401,     0,
     402,   403,     0,   404,   405,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,   439,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,  1366,   128,   129,   130,   131,   132,
       0,     0,  1367,   134,   135,   136,   137,   138,     0,   140,
     141,   142,  1368,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,  1369,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,  1370,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    1371,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
    1372,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,  1366,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,  1368,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,  1369,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,  1828,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
    1371,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
    1372,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   661,
       0,   539,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   662,   663,     0,   664,   665,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   666,   667,   127,     0,   128,   129,   130,   131,   668,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   669,   670,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   671,   192,   193,
     194,   195,   672,  1094,   197,     0,   198,   199,   673,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   674,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   675,
     234,   235,   236,   237,   676,   677,     0,   678,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   679,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   680,     0,   681,   285,   286,
     287,   682,     0,   289,   290,     0,   292,     0,   683,   294,
     684,   296,   297,   298,     0,   299,   300,  1095,     0,   301,
     302,   303,     0,     0,   304,   685,     0,   307,     0,   686,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   687,   323,   324,   688,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     689,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   690,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   691,   380,   381,   382,     0,
     384,   385,   692,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   693,   400,   694,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   695,   696,     0,     0,   413,   414,   697,   416,   698,
    1096,   418,   419,   699,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,  1039,   701,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   702,   703,   704,   705,   706,   707,
     708,   709,   710,   711,   712,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     3,     4,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,   565,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   610,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,   565,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   661,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     3,     4,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   662,   663,     0,   664,   665,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   666,   667,   127,     0,   128,   129,   130,   131,   668,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   669,   670,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   671,   192,   193,
     194,   195,   672,     0,   197,     0,   198,   199,   673,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   674,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   675,
     234,   235,   236,   237,   676,   677,     0,   678,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   679,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   680,     0,   681,   285,   286,
     287,   682,     0,   289,   290,     0,   292,     0,   683,   294,
     684,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   685,     0,   307,     0,   686,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   687,   323,   324,   688,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     689,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   690,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   691,   380,   381,   382,     0,
     384,   385,   692,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   693,   400,   694,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   695,   696,     0,     0,   413,   414,   697,   416,   698,
       0,   418,   419,   699,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,  1039,   701,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   702,   703,   704,   705,   706,   707,
     708,   709,   710,   711,   712,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,  1677,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,  1678,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,  1679,   404,     0,   406,  1680,   408,  1681,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,  1682,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
    2599,     0,     0,     0,     0,  2600,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,   493,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   495,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,   544,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   545,   412,     0,     0,   546,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   605,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   608,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   612,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,   640,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,  1062,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,  1064,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,  1472,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,  2242,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,  2260,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,   564,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,  2390,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   556,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     557,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   558,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   559,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   574,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   631,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   648,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   652,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   655,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     557,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   559,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,  1363,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,   219,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,     0,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,  1456,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,  1748,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,  1760,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   492,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,     0,   109,   110,   111,   112,   113,     0,   115,   116,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,   125,   126,   127,     0,   128,   129,   130,   131,   132,
       0,     0,     0,   134,   135,   136,   137,   138,     0,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
       0,   150,   151,   152,     0,     0,     0,     0,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,   161,   162,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     178,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,   191,   192,   193,
     194,   195,   196,     0,   197,     0,   198,   199,   200,   201,
       0,   202,     0,   203,     0,     0,     0,   206,   207,   208,
       0,   210,     0,   211,     0,   212,   213,     0,   214,   215,
     216,   217,   218,  1762,     0,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,     0,   233,
     234,   235,   236,   237,   238,   239,     0,   240,     0,   241,
       0,     0,   244,     0,   246,   247,   248,   249,   250,     0,
       0,   251,     0,   253,     0,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,   494,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,   282,     0,   284,   285,   286,
     287,   288,     0,   289,   290,     0,   292,     0,   293,   294,
     295,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,   305,     0,   307,     0,   309,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,   322,   323,   324,   325,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,     0,   358,   359,   360,   361,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,   379,   380,   381,   382,     0,
     384,   385,   386,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,   496,   400,   401,     0,
     402,   403,     0,   404,     0,   406,   407,   408,   409,   410,
       0,   411,   412,     0,     0,   413,   414,   415,   416,   417,
       0,   418,   419,   420,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,   436,   437,     0,   438,     0,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   451,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,  1116,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,  1117,   109,   110,   111,     0,  1118,  1119,  1120,  1121,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,  1122,  1123,   127,     0,   128,   129,   130,   131,     0,
       0,  1124,     0,   134,   135,   136,   137,   138,  1125,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
    1126,   150,   151,   152,     0,     0,     0,  1127,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,  1128,  1129,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     757,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,     0,   192,   193,
     194,   195,     0,     0,   197,     0,   198,   199,  1130,   201,
       0,   202,     0,   203,  1131,     0,  1132,   206,   207,   208,
    1133,   210,     0,   211,     0,     0,   213,     0,   214,   215,
     216,   217,   218,   219,  1134,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,  1135,     0,
     234,   235,   236,   237,  1136,  1137,     0,  1138,     0,   241,
    1139,  1140,   244,  1141,   246,   247,   248,   249,   250,     0,
       0,   251,  1142,   253,  1143,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,  1144,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,  1145,  1146,  1147,   285,   286,
     287,     0,     0,   289,   290,  1148,   292,     0,     0,   294,
    1149,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,     0,  1150,   307,  1151,     0,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,     0,   323,   324,     0,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
    1152,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,  1153,   358,   359,   360,  1154,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,  1155,   380,   381,   382,  1156,
     384,   385,  1157,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,  1158,   400,     0,     0,
     402,   403,     0,   404,  1159,   406,   407,   408,   409,   410,
       0,  1160,  1161,     0,     0,   413,   414,     0,   416,     0,
       0,   418,   419,  1162,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,     0,  1163,     0,   438,  1164,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,   492,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   462,   463,   464,   465,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,     0,   109,   110,   111,
     112,   113,     0,   115,   116,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,   125,   126,   127,     0,
     128,   129,   130,   131,   132,     0,     0,     0,   134,   135,
     136,   137,   138,     0,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,     0,   150,   151,   152,     0,
       0,     0,     0,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,   161,   162,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,     0,     0,   176,   177,   178,   179,   180,     0,     0,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,     0,   197,
       0,   198,   199,   200,   201,     0,   202,     0,   203,     0,
       0,     0,   206,   207,   208,     0,   210,     0,   211,     0,
     212,   213,     0,   214,   215,   216,   217,   218,   219,     0,
     221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,     0,   233,   234,   235,   236,   237,   238,
     239,     0,   240,     0,   241,     0,     0,   244,     0,   246,
     247,   248,   249,   250,     0,     0,   251,     0,   253,     0,
       0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
     262,   494,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
     282,     0,   284,   285,   286,   287,   288,     0,   289,   290,
       0,   292,     0,   293,   294,   295,   296,   297,   298,     0,
     299,   300,     0,     0,   301,   302,   303,     0,     0,   304,
     305,     0,   307,     0,   309,   310,   311,   312,   313,   314,
     315,     0,   317,   318,   319,     0,   320,   321,   322,   323,
     324,   325,   326,   327,   328,     0,   329,   330,   331,   332,
     333,   334,   335,     0,   337,   338,   339,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,     0,   358,   359,   360,
     361,     0,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
     379,   380,   381,   382,     0,   384,   385,   386,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,   496,   400,   401,     0,   402,   403,     0,   404,     0,
     406,   407,   408,   409,   410,     0,   411,   412,     0,     0,
     413,   414,   415,   416,   417,     0,   418,   419,   420,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,   436,   437,
       0,   438,     0,   440,     0,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,  2330,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
       0,    92,    93,    94,    95,    96,    97,    98,    99,     0,
     100,   101,   102,     0,     0,     0,     0,     0,     0,     0,
     103,   104,     0,   105,   106,   107,  2331,   109,   110,   111,
       0,  1118,  2332,  1120,  1121,     0,   117,   118,   119,   120,
     121,   122,     0,     0,   123,   124,  1122,  1123,   127,     0,
     128,   129,   130,   131,     0,     0,  2333,     0,   134,   135,
     136,   137,   138,  2334,   140,   141,   142,     0,   143,   144,
     145,   146,   147,   148,     0,  2335,   150,   151,   152,     0,
       0,     0,  2336,     0,     0,     0,   154,   155,   156,   157,
     158,   159,   160,  1128,  1129,   163,     0,   164,     0,   165,
     166,   167,   168,   169,   170,     0,   171,   172,   173,   174,
     175,     0,     0,   176,   177,   757,   179,   180,     0,     0,
     181,   182,   183,     0,   184,   185,   186,     0,   187,   188,
     189,   190,     0,   192,   193,   194,   195,     0,     0,   197,
       0,   198,   199,  1130,   201,     0,   202,     0,   203,  2337,
       0,  2338,   206,   207,   208,  2339,   210,     0,   211,     0,
       0,   213,     0,   214,   215,   216,   217,   218,   219,  2340,
     221,   222,   223,   224,     0,   225,   226,   227,   228,   229,
     230,     0,   231,  2341,     0,   234,   235,   236,   237,  1136,
    1137,     0,  1138,     0,   241,  2342,  2343,   244,  2344,   246,
     247,   248,   249,   250,     0,     0,   251,  2345,   253,  2346,
       0,   255,   256,   257,     0,     0,   258,   259,   260,   261,
     262,  2542,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,   278,   279,   280,   281,
    1145,  2348,  1147,   285,   286,   287,     0,     0,   289,   290,
    2350,   292,     0,     0,   294,  1149,   296,   297,   298,     0,
     299,   300,     0,     0,   301,   302,   303,     0,     0,   304,
       0,  2352,   307,  2353,     0,   310,   311,   312,   313,   314,
     315,   316,   317,   318,   319,     0,   320,   321,     0,   323,
     324,     0,   326,   327,   328,     0,   329,   330,   331,   332,
     333,   334,   335,   336,   337,  1152,   339,   340,   341,   342,
       0,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,     0,   355,   356,  2354,   358,   359,   360,
       0,   362,   363,   364,   365,   366,   367,   368,   369,   370,
     371,   372,     0,   373,   374,   375,   376,   377,     0,   378,
       0,   380,   381,   382,  2356,   384,   385,  1157,   387,     0,
     388,   389,   390,   391,   392,   393,   394,   395,   396,   397,
     398,  2543,   400,     0,     0,   402,   403,     0,   404,  2358,
     406,   407,   408,   409,   410,     0,  1160,  1161,     0,     0,
     413,   414,     0,   416,     0,     0,   418,   419,  2359,   421,
     422,   423,   424,   425,     0,     0,   426,   427,   428,   429,
     430,     0,     0,   431,   432,   433,   434,   435,     0,  1163,
       0,   438,  2360,   440,     0,   441,   442,   443,     0,     0,
     444,     0,     0,   445,   446,   447,   448,   449,   450,  1116,
       0,     0,     0,     0,     0,     0,     0,     0,     0,     0,
     462,   463,   464,   465,     0,     0,    92,    93,    94,    95,
      96,    97,    98,    99,     0,   100,   101,   102,     0,     0,
       0,     0,     0,     0,     0,   103,   104,     0,   105,   106,
     107,  1117,   109,   110,   111,     0,  1118,  1119,  1120,  1121,
       0,   117,   118,   119,   120,   121,   122,     0,     0,   123,
     124,  1122,  1123,   127,     0,   128,   129,   130,   131,     0,
       0,  1124,     0,   134,   135,   136,   137,   138,  1125,   140,
     141,   142,     0,   143,   144,   145,   146,   147,   148,     0,
    1126,   150,   151,   152,     0,     0,     0,  1127,     0,     0,
       0,   154,   155,   156,   157,   158,   159,   160,  1128,  1129,
     163,     0,   164,     0,   165,   166,   167,   168,   169,   170,
       0,   171,   172,   173,   174,   175,     0,     0,   176,   177,
     757,   179,   180,     0,     0,   181,   182,   183,     0,   184,
     185,   186,     0,   187,   188,   189,   190,     0,   192,   193,
     194,   195,     0,     0,   197,     0,   198,   199,  1130,   201,
       0,   202,     0,   203,  1131,     0,  1132,   206,   207,   208,
    1133,   210,     0,   211,     0,     0,   213,     0,   214,   215,
     216,   217,   218,   219,  1134,   221,   222,   223,   224,     0,
     225,   226,   227,   228,   229,   230,     0,   231,  1135,     0,
     234,   235,   236,   237,  1136,  1137,     0,  1138,     0,   241,
    1139,  1140,   244,  1141,   246,   247,   248,   249,   250,     0,
       0,   251,  1142,   253,  1143,     0,   255,   256,   257,     0,
       0,   258,   259,   260,   261,   262,     0,   264,   265,   266,
     267,   268,   269,   270,   271,   272,   273,   274,   275,   276,
     277,   278,   279,   280,   281,  1145,  1146,  1147,   285,   286,
     287,     0,     0,   289,   290,  1148,   292,     0,     0,   294,
    1149,   296,   297,   298,     0,   299,   300,     0,     0,   301,
     302,   303,     0,     0,   304,     0,  1150,   307,  1151,     0,
     310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
       0,   320,   321,     0,   323,   324,     0,   326,   327,   328,
       0,   329,   330,   331,   332,   333,   334,   335,   336,   337,
    1152,   339,   340,   341,   342,     0,   343,   344,   345,   346,
     347,   348,   349,   350,   351,   352,   353,   354,     0,   355,
     356,  1153,   358,   359,   360,     0,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,     0,   373,   374,
     375,   376,   377,     0,   378,     0,   380,   381,   382,  1156,
     384,   385,  1157,   387,     0,   388,   389,   390,   391,   392,
     393,   394,   395,   396,   397,   398,     0,   400,     0,     0,
     402,   403,     0,   404,  1159,   406,   407,   408,   409,   410,
       0,  1160,  1161,     0,     0,   413,   414,     0,   416,     0,
       0,   418,   419,  1162,   421,   422,   423,   424,   425,     0,
       0,   426,   427,   428,   429,   430,     0,     0,   431,   432,
     433,   434,   435,     0,  1163,     0,   438,  1164,   440,     0,
     441,   442,   443,     0,     0,   444,     0,     0,   445,   446,
     447,   448,   449,   450,     0,     0,     0,     0,     0,     0,
       0,     0,     0,     0,     0,   462,   463,   464,   465
};

static const yytype_int16 yycheck[] =
{
       6,    34,   609,     0,   624,    11,   616,   795,   912,    15,
     597,   717,   573,    47,   521,    21,    22,    23,     0,   555,
      26,   522,   725,    29,   911,   528,    32,    33,   717,     6,
       6,   568,   899,   886,    40,  1215,  1689,     0,     0,   618,
     891,    16,  1059,    40,   797,  1758,  1059,   782,    20,     0,
     526,  1499,  1059,  1059,   653,  1204,  1090,  2017,   952,   888,
     813,   880,  2082,  2082,  1204,    16,  1583,  1584,    29,  1204,
    1500,  1588,   825,  1764,  1204,  1766,  1247,  1248,  1755,    85,
      86,    87,    88,    89,  1646,   724,  2109,   916,     0,   527,
      49,  1739,  2124,   869,  1182,   528,   657,     4,    33,  2117,
      16,     9,     9,    49,  2001,   609,     5,   611,    51,   613,
    1993,  2397,  1629,  1630,  2394,     5,  1078,    11,     5,     5,
      74,  1342,     5,    13,    14,   755,   832,    88,     5,   832,
       5,     5,  2400,     3,    13,    14,    13,    14,    68,    13,
      14,     5,   772,     5,     5,    41,    93,   150,  1825,    13,
      14,    13,    14,     5,   630,     5,    41,     9,   532,   169,
       5,     5,    32,    33,     9,     5,     5,   120,   117,  2385,
    1340,    28,    28,   594,    83,    28,   594,     0,    35,    35,
    1299,     5,    35,     5,   212,     5,    49,    59,     5,  1866,
    1867,   122,     5,    16,   900,  2546,   899,   903,   904,    59,
     138,   169,     9,    76,  2576,  2040,    11,   130,    11,    76,
    2000,    34,   279,    86,   717,   175,   281,    40,   127,    86,
     723,     3,     4,     5,   238,  1251,    49,     9,   170,   238,
       0,   287,   793,   794,   157,  1933,   166,    42,   725,    42,
     287,   107,  1217,  2637,   303,  2318,   303,   327,   170,    59,
      59,    38,   120,   206,   130,  2366,   159,  2743,    60,     4,
     839,   798,    15,     0,     9,   108,    68,   135,   218,    74,
      28,    74,   232,   267,   163,    11,    28,   349,   270,    15,
     115,   107,   720,   161,  2835,   924,    22,  2055,  1155,   826,
     161,   350,   931,   453,  2562,  2723,    32,    33,   168,    11,
     170,   409,  2450,  2501,   448,   130,   118,    11,    69,   478,
     159,   174,  2808,  2809,   264,   475,   487,   146,   879,   395,
     491,   431,   491,    93,  2522,   188,   229,   120,    11,   489,
     193,   834,   835,   115,     5,  2355,   431,   124,  2235,   169,
     354,  2054,  1904,    11,   118,  2493,   454,  1373,   271,   493,
      86,   222,   853,   276,   430,  1330,    93,   299,   361,    42,
    2911,  2129,    74,  2246,   444,   228,  2794,  2250,  2796,  2392,
     957,  2857,   130,   323,  2051,   278,  2053,   189,   130,   489,
     229,   210,  1488,   375,   314,   263,  1492,   117,  1494,   298,
     266,    74,   264,   396,   489,  1912,  1913,  1914,  1915,  2895,
     276,  1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,  1926,
    1927,  2805,   899,   427,   361,   189,  2478,   489,   427,   490,
     309,   371,   489,   494,   489,   484,  1161,   484,  2576,   211,
     232,  1070,   374,  2544,   437,   429,   271,   493,   264,   407,
     400,  1217,   402,  2516,  2234,   313,   493,  1067,   451,   396,
     232,   276,  1155,  1970,  1971,  2671,   877,  2292,   287,   877,
    2658,  2833,  2139,  2814,   108,   493,  1646,   427,  1078,   341,
     476,   477,   475,  2171,   848,   489,   429,   483,   475,   429,
     489,   341,   488,   493,   433,   491,   489,  2773,  1709,   495,
     437,   414,   401,   475,   424,   528,   368,   393,  1108,  1129,
     431,   717,   425,  1465,   451,  1531,  2774,   723,   393,   447,
     373,   281,   475,   475,  1367,   521,   522,   523,  1966,  1149,
    1691,   378,   378,  1703,   475,   378,  2546,  2546,   475,  1423,
     396,   341,   341,   487,   407,   385,   386,   491,  1708,   292,
     407,   271,   489,   441,   281,  1449,   489,  2827,  1251,  1179,
     556,     8,   558,   528,  1330,  2452,  2704,   440,  2620,   565,
      17,    18,    19,   597,   536,   481,   538,   489,   574,   489,
    1077,   441,   342,   480,   481,  1082,   527,   407,   453,  2462,
     488,  1088,  2295,  1084,  2467,   557,   583,  2470,   487,  1092,
     489,   485,   491,   809,   423,   601,   571,  2745,   604,   489,
     475,   583,   489,   489,  1498,   342,   489,  1186,  1583,  1584,
     489,  1699,   489,  1588,   489,   489,   832,  2308,   834,   835,
     583,   583,   581,  1742,  1185,   489,  1187,   489,   489,   635,
     636,   637,   583,   493,  1195,   581,   429,   489,  1199,   574,
     453,  2675,  2290,   604,   489,   489,  1256,  2679,   478,   489,
     489,  2674,   475,  1091,  1629,  1630,  1295,  1218,  1219,  1092,
    2678,   491,   475,  1242,  1243,   489,   340,   489,  1155,   489,
    1373,   583,   489,   480,   481,   148,   489,   482,   483,   484,
     485,   451,   485,   493,   900,  2833,    76,   903,   904,  1601,
    1396,  1603,  1604,   196,   368,     0,    86,  1234,   480,   481,
    1406,  1681,  1682,  1409,   527,   528,   451,   238,  1287,   322,
     106,  2388,  2274,   150,   451,  2145,   218,  2147,  1297,  1298,
     490,   194,   492,   729,  1904,  2787,   492,   484,  2611,   238,
     475,  1880,  1881,  1882,   491,   480,   481,   350,  2772,   115,
    1880,  1881,   117,  1906,  1879,   717,  1686,    76,    32,    33,
    1880,   723,  1259,   490,   478,   492,  2779,    86,   581,   495,
     583,   794,   264,  2211,  1251,   489,   493,   238,    85,   720,
      87,  1934,    89,    11,  1384,  1481,   480,   481,   482,   483,
     484,   485,  1953,   453,   453,  1392,   489,   523,   170,   795,
    2503,  1731,  1481,  1827,  2814,  2814,  1499,   480,   481,   482,
     483,   484,   485,  1829,    42,   475,   475,  1583,  1584,    93,
     186,   400,  1588,   402,   482,   483,   484,   485,   238,   489,
     202,    13,    14,   354,  1612,   200,   283,   799,  1531,   400,
     836,   402,  1419,  1420,  1421,   217,    74,   809,   574,   337,
     490,    23,  2876,   493,   226,   354,   852,   853,   244,  1875,
     822,   354,   196,  1629,  1630,  1465,   252,  1610,    40,   362,
     832,  1365,   834,   835,  1463,  1891,   484,   266,  1467,   371,
     451,  1470,   271,   491,  1693,   881,   882,  1781,   884,   885,
     886,  1097,  1098,   354,   245,  1911,  1373,  2910,  1392,   264,
     266,   266,   898,   396,   475,  1402,   427,   720,  2858,  2859,
    1407,    31,  2082,   862,   863,  2422,   865,  1411,    68,   915,
       4,  1805,  1416,   919,  1940,     9,   862,   863,   427,   865,
     881,  1947,   321,    24,   361,    55,   130,   429,   412,    30,
    2643,   238,   327,   361,   354,   758,   444,  1912,  1913,  1914,
    1915,   444,   357,  1918,  1919,  1920,  1921,  1922,  1923,  1924,
    1925,  1926,  1927,   157,   915,   115,   427,  2648,   489,   396,
    2920,  1790,   487,   345,  1440,   490,   491,   362,   396,   494,
     490,   794,   164,   493,   743,   744,  1537,  2425,  1481,     4,
     489,  1197,  1198,   490,     9,  1836,   493,  1740,    24,  1205,
    1841,  1207,  1208,  1496,    30,  1970,  1971,  2514,   489,   768,
     437,   396,  1982,  1983,  1984,  1985,  1222,   427,  1224,   437,
       4,    24,  1499,   173,   451,     9,   472,    30,   489,   476,
     477,   478,   489,   480,   481,   482,   483,   484,   485,  1245,
       4,    65,    66,   493,   135,     9,   496,   216,   475,   862,
     863,  1602,   865,   451,  1531,   453,   146,   354,  1054,   444,
    1056,  1991,   489,  1993,  1060,  1061,  2082,   490,   281,   159,
     493,   489,   266,  1069,   164,  2582,   487,   271,   489,   489,
     491,  1077,   276,  1634,    13,    14,  1082,   361,  1084,  1085,
     490,  1087,  1088,   493,  1090,   490,   490,   490,   493,   493,
     493,  2744,   490,  2110,  2274,   493,   482,  2110,  2132,   135,
     491,  1688,   490,  2110,  2110,   493,   266,    24,   472,   159,
     210,   271,   396,  1674,   164,   168,   852,  1092,   490,   493,
     427,   493,   135,  1339,  1340,   490,  1829,   159,   493,   229,
     490,   490,   164,   493,   493,  2583,  1912,  1913,  1914,  1915,
    1091,   489,  1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,
    1926,  1927,   490,   437,   314,   493,   400,   441,   402,   476,
     477,  2065,  1761,   490,  1763,   490,  1855,   451,   493,   329,
      24,   488,  1875,   400,   491,   402,    30,  2064,   278,   229,
    1396,  2834,   489,   472,   285,  1182,  2899,   287,  1891,   490,
    1406,   475,   493,  1409,  1970,  1971,   490,   229,   490,  2052,
    1182,   493,  1822,  1938,  1939,   489,   216,  2860,  1911,  1215,
     414,    55,  2063,   115,  2065,    13,    14,  2104,   135,  1182,
    1182,   425,    37,   327,     8,   169,   490,    11,   278,   493,
     489,  1182,  1204,    17,    18,    19,   212,  1940,   339,    24,
     490,    56,   151,   493,  1947,    30,   278,   335,   565,   285,
    1860,   490,     9,  1259,   493,    12,   151,    28,   362,  2891,
      24,  2893,   151,  1966,   424,  1481,    30,   368,  1091,   591,
     151,   593,   285,   250,   251,   490,  2929,   490,   493,   490,
    1496,   135,   493,  2036,   601,  2917,  1292,  2919,    13,    14,
     490,   106,   396,   493,   490,   490,   281,   493,   493,   335,
    2326,   489,     8,   339,  1520,    11,  2246,  1313,    79,  1315,
    2250,    17,    18,    19,   490,   266,    87,   493,   635,   636,
     637,   281,   335,   423,    24,     5,   339,  2251,     8,  2253,
      30,  1303,   368,   434,    14,   490,   444,   175,   493,  1314,
     444,    82,  1829,  1850,    24,   116,   489,  1353,    28,  1085,
     135,  1087,  1855,  1122,  1123,   368,  1362,  1363,   196,  1182,
     294,  1367,  1368,   556,  1361,   558,  2546,   490,   285,  1948,
     493,   135,  1378,  1379,  1380,  1381,  2082,  1383,  1147,  2082,
     195,   358,   359,  1389,  1945,  1391,   455,   487,  1875,  2415,
     490,   491,   294,   151,   232,   491,  1402,  1403,   434,   151,
     490,  1407,  1408,   493,  1891,   151,  1412,  1413,  1414,  1415,
     490,  1417,  1418,   493,   281,   186,   184,   185,    13,    14,
    2324,   434,   339,   340,  1911,   490,   197,   361,   493,   244,
     214,   285,  1438,  1439,   489,   135,    37,   252,   396,  1262,
    1209,  1210,   490,  2296,   227,   493,  1452,  2422,   286,   264,
     489,   368,   490,  1940,  2242,   493,   487,  1454,  2259,   361,
    1947,  2262,   396,   490,  2043,     5,   493,     5,  2005,   489,
     361,   489,  2260,  2083,  1690,  2085,    13,    14,   164,  1966,
     295,   335,   250,   251,   490,   339,   490,   493,  2355,   493,
     490,  1707,  1708,   493,   396,  1501,    13,    14,   490,   283,
     285,   493,   489,   437,   490,   396,   489,   493,  2211,  1481,
    2450,   310,  2099,     5,   368,  1487,   489,   451,    94,   836,
    2546,   285,  2462,   490,  1496,   340,   493,  2467,   490,     5,
    2470,   493,  2131,   490,   490,   437,   493,   493,  1361,  2514,
     490,   475,   490,   493,   489,   493,   437,   362,   490,   451,
     335,   493,  1585,  2493,   339,   489,    13,    14,    13,    14,
     451,   489,   400,   489,   402,   882,   489,   382,   885,   349,
     350,   335,     5,   475,   489,   339,   489,   283,    13,    14,
     434,   898,   489,   368,   475,   285,   424,   489,   489,   427,
     358,   359,     5,  2619,   170,  2082,  2622,   489,   489,    13,
      14,  1634,   919,   489,   368,   489,  1612,  2582,     9,  2315,
      13,    14,   489,   384,    13,    14,   387,    13,    14,    13,
      14,    13,    14,  2326,    13,    14,   202,    13,    14,    13,
      14,  1454,  1368,   489,  2814,   335,  2576,    13,    14,   339,
    1646,   217,  1378,   452,  1380,    15,  2422,  1383,   212,   434,
     226,   493,  2355,  1389,    97,  1391,    13,    14,    13,    14,
    1876,  1877,    13,    14,    37,  2552,   227,  1403,   368,   164,
     434,  2611,  1408,  1679,   278,   490,  1412,  1413,  1414,  1415,
    1686,  1417,  1418,   164,   260,   349,   350,  2266,    13,    14,
     349,   350,   476,   477,   478,   276,   480,   481,   482,   483,
     484,   485,  1699,  1736,  2241,  2284,   349,   350,   368,  1686,
    1686,   489,  2415,   254,   255,     6,   407,  1699,   358,   359,
     489,  2410,  2425,    86,  2211,  1731,   493,  1733,  2327,  2328,
    1736,   834,   835,  1739,   434,   407,  1699,  1699,  2514,  1056,
      55,    55,   407,  1060,  1061,  2281,   257,   490,  1699,  1755,
     407,   407,   494,   451,  1731,  1731,   151,    93,   266,   266,
     489,    37,  1585,    37,  2704,   491,   493,   440,   489,   345,
     476,   477,   478,  1090,   480,   481,   482,   483,   484,   485,
     489,   489,   489,     8,    36,   489,    11,   489,  2814,   447,
       9,   405,    17,    18,    19,   405,    11,  1769,   493,   488,
     493,   489,   494,   405,   271,  2745,  2582,   489,   407,  1815,
      68,  1634,   178,   160,   490,  1821,    74,    42,   146,  1825,
    1826,  1827,  1828,   169,    49,   210,   489,   493,    86,  1652,
     218,   159,   371,  1839,   282,   431,   164,    37,  1844,  2326,
    2546,  1813,   493,  2546,  1850,  1668,   218,   489,   266,    74,
     218,   287,   490,   319,   279,   489,  1853,   115,   444,   117,
    1866,  1867,   489,  1686,     8,   151,  2082,    11,  2355,   151,
     281,   451,   281,    17,    18,    19,  1699,    37,    37,   266,
    2583,    36,   210,  1855,   266,   407,   407,   487,   407,    24,
    1862,   407,  1864,  2833,   487,    30,  1868,  1869,  1904,   488,
       8,   229,    37,    11,   169,   490,   490,  2410,  1731,    17,
      18,    19,   490,  1736,   491,   173,  2619,   490,   490,  2622,
     490,    56,   490,   490,   490,   490,    34,   472,  2415,   472,
    2146,   490,   490,   490,   490,   169,   472,     8,  2425,   489,
      11,   489,   200,  1976,  1978,   407,    17,    18,    19,   174,
     278,   291,   448,   282,   489,   489,   474,   429,    37,   287,
    1993,   282,    37,   188,   282,   493,   237,   437,   193,   448,
    2874,   106,   281,   478,  1980,  1292,   407,    56,   266,   489,
     151,    56,  1988,  1989,  1990,  1991,   196,  1993,  1994,   214,
     215,   285,    94,   151,  2000,  2001,  1313,   151,  1315,   407,
     135,   407,   407,   228,  2591,  2512,   490,   407,   266,   279,
     490,   488,   490,   271,  1991,  1991,  1993,  1993,   169,   490,
    2026,   281,   451,    37,   493,   151,   151,   106,   271,   487,
    1853,   106,   142,   169,  2644,    11,  1353,   490,  2044,  2659,
     164,  2047,   169,   490,   269,  2051,  2052,  2053,   490,  2055,
     490,   489,   396,   490,   169,   448,   314,   178,   283,  2546,
     195,   493,  2623,   475,   490,  2071,   490,  2073,   170,   490,
     214,   329,   489,   282,   342,   436,    84,   151,   173,   489,
    2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,
      37,   418,   489,    80,   173,   423,  2583,  2598,   489,  2315,
     202,  2107,   169,  1839,  2320,  2111,   214,   431,  2814,   244,
    2082,  2814,  2118,   493,   488,   217,   195,   252,   489,  2620,
     195,  1438,   193,  2129,   226,   490,  2132,   489,  2748,   264,
     488,  2128,  2619,  2139,  2106,  2622,   490,   490,   490,   283,
    2701,   490,  2148,   214,   398,  2361,  2362,   489,   373,   217,
     285,   290,   217,  1976,   487,   487,   288,  2664,   260,   489,
     295,    55,   181,   198,   451,   244,   424,   478,  1991,   244,
    1993,   187,   271,   252,   271,   283,   478,   252,   491,   281,
     407,   491,   329,   491,   491,   264,   491,   491,   491,   264,
     491,   491,   491,   491,   491,   491,   491,    37,   491,   491,
     335,   491,   491,   266,   339,   340,  2816,   491,   491,   407,
     491,   491,   283,   491,  2821,   490,   295,  2718,  2224,   491,
     295,  2227,  2228,  2229,  2230,   491,   489,   362,  2234,  2235,
     491,  2237,  2238,   368,  2741,   491,  2242,   528,   491,   107,
    2246,   281,   489,   345,  2250,   451,    37,   382,   473,   488,
     169,   476,   477,   478,  2260,   480,   481,   482,   483,   484,
     485,   340,   300,   554,   555,   340,   489,   489,  2274,  2246,
    2246,   217,   490,  2250,  2250,   489,   450,   490,    86,   131,
    2286,   725,   573,   362,  2290,   329,  2283,   362,  2285,   218,
    2296,   115,   489,   489,    37,   151,    74,   122,  2270,   434,
    2272,   151,    37,   382,   490,  2128,    55,   382,   350,   350,
      37,  2047,   490,   489,   489,  2321,   489,   494,   431,  2535,
    2536,    74,   494,   614,   615,   616,   493,  2814,    37,   431,
    2546,   436,   476,   477,   478,  2071,   480,   481,   482,   483,
     484,   485,   186,   431,   493,   418,    68,   284,    68,   489,
    2086,  2087,  2088,  2089,  2090,  2091,  2092,  2093,  2094,  2095,
     482,    37,  1679,   493,   352,   368,   657,   478,   476,   477,
     478,   271,   480,   481,   482,   483,   484,   485,   242,   186,
     489,   418,  2388,   407,    37,   489,   284,     0,  2394,   284,
     490,   489,   264,   281,   490,   488,   488,   349,  2395,  2405,
     489,     9,   336,    12,     9,   476,   477,   478,   488,   480,
     481,   482,   483,   484,   485,   481,    15,   198,   488,   281,
     281,   329,    34,  2246,     9,   489,   717,  2250,   490,   489,
     481,    15,   723,   724,   725,   120,   429,     9,  2410,  1823,
      23,   490,   490,  2045,  2450,   583,  2452,   881,  2454,   827,
     741,  2457,  1700,  1356,  2460,   899,  2462,   872,  2715,  2631,
    2283,  2467,  2285,  2803,  2470,  2471,  2472,   871,  1715,  2475,
    1330,   852,  2478,  2450,  2450,  2009,  2731,  2271,   769,  1355,
      93,  2258,  1731,  1993,   874,  2462,  2462,  2493,  2235,  2252,
    2467,  2467,  2612,  2470,  2470,  1991,  2704,  2703,   789,   790,
     791,  2726,   793,   794,  1821,  2727,  2512,  2513,   725,  1826,
    1827,  1828,  2801,  2484,  1204,  2521,  2493,  2493,  2802,  1204,
    1204,   725,  2783,  1204,  1289,  1612,   817,  1844,  1703,  1429,
    1652,  1539,  1187,   146,  1649,  2818,  2902,  1293,  2651,  2873,
    2861,  2547,  2548,   834,   835,   886,   159,  2564,  2554,  1765,
    1753,   164,  2558,  2118,  2816,  2561,   169,  1815,  2871,  2556,
    1750,  2085,  2813,  2696,  1496,   178,  2320,  2573,   181,  2066,
    2576,  1390,  2395,   864,  2546,  2081,  1759,   868,   869,  1092,
    2577,  2286,  2044,  2745,  2489,  2812,  1314,  1819,   879,  1860,
    2623,  1315,  2598,     8,  2410,  2106,    11,   210,  2814,  2576,
    2576,  2113,    17,    18,    19,  2611,    -1,  2613,   899,  2615,
      -1,    -1,  1077,    -1,  2620,    -1,   229,    -1,    -1,    34,
      -1,    -1,    -1,  2629,    -1,    -1,    -1,    -1,  2634,    -1,
      -1,    -1,    -1,   924,  2611,  2611,  2642,    -1,    -1,  2462,
     931,    -1,    -1,    -1,  2467,    -1,    -1,  2470,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2664,    -1,
      -1,   952,    -1,    -1,    -1,   278,    -1,    -1,   281,    -1,
    2676,  1988,  1989,  1990,   287,    -1,    -1,    -1,    -1,    -1,
    2677,    -1,   899,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   899,    -1,    -1,  2704,    -1,
    2672,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2714,  2026,
      -1,  1155,  2718,    -1,    -1,    -1,  2722,    -1,  2724,    -1,
    2726,    -1,    -1,    -1,    -1,    -1,    -1,  2704,  2704,   342,
      -1,    -1,    -1,  2556,    -1,  2741,  2742,  2743,    -1,  2745,
      -1,  2738,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    51,    -1,  2577,    17,    18,    19,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2745,  2745,
      -1,    -1,    34,    -1,    -1,    -1,    -1,  2513,    -1,  1070,
      -1,  2787,    -1,   396,    -1,    -1,    -1,  1078,  2611,    -1,
    2107,    -1,    -1,    -1,  2111,  2801,    95,  2803,    -1,   214,
    2623,  1092,    -1,    -1,    -1,    -1,  2812,  1251,    -1,    -1,
     423,  2547,  2548,    -1,    -1,  2132,    -1,  1108,   431,  2825,
      -1,  2827,   121,    -1,    -1,  2561,    -1,  2833,    -1,  2826,
      -1,    -1,    -1,    -1,    -1,   448,    -1,   450,   451,    -1,
      -1,   140,  2814,    -1,    -1,   144,    -1,    -1,    -1,    -1,
      -1,  2857,    -1,    -1,  2677,    -1,  2833,  2833,    -1,    -1,
      -1,    -1,    -1,    -1,  1155,    -1,   165,    -1,   283,   168,
      -1,    -1,   109,   110,   487,    -1,    -1,   490,   491,   492,
      -1,    -1,    -1,   182,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1185,    -1,  1187,    -1,  2634,   725,
      -1,  1192,  2908,    -1,  1195,    -1,    -1,    -1,  1199,  2915,
    2227,  2228,  2229,  2230,    -1,  2738,    -1,    -1,    -1,    -1,
      -1,    -1,  1213,    -1,    -1,  1216,  1217,  1218,  1219,  1373,
      -1,    -1,    -1,    -1,    -1,  1226,  1227,  1228,  1155,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,    -1,
     725,  1155,   214,    -1,    -1,  1246,    -1,    -1,    -1,    -1,
    1251,  1252,  1253,  1254,  1255,  1256,    -1,    -1,    -1,  1260,
    1261,    -1,   271,    -1,  1265,    -1,    -1,    -1,  1269,    -1,
     279,  1272,  1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,
      -1,    -1,  1283,    -1,    -1,     0,    -1,  1288,    -1,    -1,
    1291,    -1,  1293,  2826,  1295,    -1,    -1,    -1,    -1,   246,
     247,   248,   249,   250,   251,    20,    -1,   254,   255,    -1,
      -1,   283,   321,    -1,    -1,    30,  1317,    32,    33,    -1,
      -1,    -1,    22,    -1,  1251,    -1,    -1,    -1,    -1,  1330,
      -1,    -1,    -1,    48,    -1,    -1,    -1,  1251,  1339,  1340,
      -1,    -1,    57,    -1,    -1,  1499,    -1,    -1,    -1,    -1,
      -1,   476,   477,   478,    69,   480,   481,   482,   483,   484,
     485,    -1,    -1,   899,    -1,    80,    -1,    -1,    -1,    -1,
      -1,    -1,  1373,    -1,    -1,    75,    91,  1531,    93,    -1,
      -1,  1382,    -1,  1384,    -1,     0,    -1,    -1,    -1,    -1,
      90,    -1,    -1,    -1,    -1,    -1,   111,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     125,   358,   359,    -1,   899,    -1,    -1,    -1,    -1,    -1,
     135,    -1,  1423,    -1,    -1,  1426,  1427,   142,  1429,    -1,
      -1,    -1,    -1,    -1,    -1,   150,    -1,   152,   153,    -1,
      -1,    -1,    -1,    -1,    -1,   145,  1373,    -1,    -1,    -1,
     165,    -1,    -1,    -1,   154,    -1,    -1,    -1,    -1,  1373,
      -1,  1462,    -1,    -1,  1465,    -1,   166,    -1,    -1,   137,
      -1,   171,    -1,    -1,    -1,    -1,    -1,   192,    93,    -1,
    1481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2521,  1496,   196,  1498,  1499,    -1,
      -1,    -1,    -1,   171,   476,   477,   478,   175,   480,   481,
     482,   483,   484,   485,    -1,    -1,   231,    -1,    -1,    -1,
      -1,    -1,   469,   470,    -1,    -1,    -1,    -1,   196,    -1,
    1531,   146,    -1,    -1,    -1,    -1,  1537,  1538,    -1,   239,
      -1,    -1,  1543,   243,   159,    -1,  2573,    -1,    -1,   164,
      -1,    -1,    -1,    -1,   169,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   178,   232,    -1,   181,    -1,    -1,    -1,
      -1,   239,  1499,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  1583,  1584,  1585,  1499,    -1,  1588,    -1,    -1,
      -1,    -1,    -1,   308,    -1,   210,   311,    -1,    -1,    -1,
    1601,  1602,  1603,  1604,  1531,    -1,   306,    -1,    -1,    -1,
    1611,    -1,    -1,  1614,   229,  2642,    -1,  1531,   286,  1155,
     320,    -1,    -1,    -1,   339,    -1,    -1,    -1,  1629,  1630,
      -1,    -1,   347,  1634,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   361,  1648,    -1,  2676,
    1651,   351,  1653,   368,   354,    -1,    -1,   372,    -1,    -1,
       0,    -1,   362,   278,    -1,   365,   281,   382,    -1,    -1,
    1155,    -1,   287,  1674,    -1,  1829,    -1,    -1,    -1,    -1,
      -1,   396,    -1,    -1,   384,  1686,   354,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   396,    -1,    -1,  1700,
      -1,    -1,    -1,   403,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   412,     8,  1715,  1251,    11,   432,    -1,    -1,
      -1,  1875,   437,    -1,    -1,    -1,    -1,   342,    -1,    -1,
    1731,    -1,   400,    -1,   402,    -1,   451,  1891,    -1,    -1,
      -1,    -1,    -1,    -1,   444,    -1,  1747,    42,    -1,    -1,
      -1,    -1,    -1,    93,    49,    -1,   424,  1911,    -1,   427,
     475,    -1,    -1,  1764,  1765,  1766,  1251,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   489,   443,    -1,   492,    -1,    74,
      -1,   396,    -1,    24,    -1,    -1,  1940,    -1,    -1,    30,
      -1,    -1,    -1,  1947,    -1,    -1,    37,    -1,  2825,    -1,
      -1,    -1,    -1,    -1,  1805,    -1,   146,    -1,   423,    -1,
      -1,    -1,  1966,    -1,    -1,    56,   431,    -1,    -1,   159,
      -1,    -1,    -1,    -1,   164,    -1,    -1,    -1,  1829,   169,
      -1,    -1,    -1,   448,    -1,   450,   451,  1373,   178,    -1,
      -1,   181,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   144,
      -1,    -1,    -1,    -1,  1855,    -1,    -1,    -1,    -1,  1860,
      -1,    -1,    -1,    -1,    -1,   106,    -1,    -1,    -1,    -1,
     210,    -1,   487,    -1,  1875,   490,   491,   492,    -1,   174,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1888,  1373,   229,
    1891,    -1,    -1,   188,   135,    -1,    -1,  1898,   193,    -1,
      -1,  1902,  1829,    -1,  1905,    -1,    -1,    -1,    -1,    -1,
    1911,  1912,  1913,  1914,  1915,  1829,    -1,  1918,  1919,  1920,
    1921,  1922,  1923,  1924,  1925,  1926,  1927,    -1,  2082,    -1,
    1931,  1932,    -1,   228,    -1,    -1,    -1,    -1,   278,  1940,
      -1,   281,    -1,    -1,  1945,    -1,  1947,   287,  1875,    -1,
      -1,    -1,    -1,  1954,   195,    -1,  1957,    -1,  1959,    -1,
      -1,  1875,    -1,  1499,  1891,  1966,  1967,    -1,    -1,  1970,
    1971,    -1,    -1,    -1,  1975,  1976,    -1,  1891,    -1,    -1,
      -1,    -1,    -1,    -1,  1911,    -1,    -1,    -1,   283,    -1,
    1991,    -1,  1993,    -1,    -1,  1531,    -1,  1911,    -1,    -1,
      -1,    -1,   342,   244,    -1,  2006,    -1,    -1,    -1,    -1,
      -1,   252,    -1,  1940,  1499,    -1,    -1,    -1,    -1,    -1,
    1947,    -1,    -1,   264,    -1,    -1,  1940,    -1,  2029,    -1,
      -1,    -1,    -1,  1947,    -1,    -1,    -1,    -1,    -1,  1966,
      -1,    -1,    -1,    -1,   285,  2046,  1531,    -1,    -1,    -1,
      -1,    -1,  1966,    -1,   295,    -1,   396,  2211,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,   554,   555,    17,    18,    19,   373,    -1,
    2081,  2082,  2083,   423,  2085,    -1,    -1,    -1,    -1,    -1,
      -1,   431,    34,     8,   335,    -1,    11,    -1,   339,   340,
      42,    -1,    17,    18,    19,    -1,    -1,    49,   448,    -1,
     450,   451,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,
      -1,   362,    -1,    -1,    -1,    -1,     8,   368,    -1,    11,
      -1,    -1,    74,   614,   615,    17,    18,    19,    -1,    -1,
      -1,   382,    -1,    -1,    -1,    -1,    -1,   487,    -1,    -1,
     490,   491,   492,    -1,    -1,  2082,    -1,    -1,    -1,    -1,
      42,  2162,    -1,    -1,    -1,    -1,    -1,    49,  2082,    -1,
      -1,    -1,  2326,    -1,    -1,    -1,    -1,    -1,   473,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,   482,   483,   484,
     485,    -1,    74,   434,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2355,    -1,    -1,  2205,  2206,    -1,    -1,    -1,  2210,
    2211,    -1,    -1,    -1,  2215,    -1,    -1,  2218,  2219,    -1,
      -1,    -1,  2223,    -1,    -1,   109,   110,    -1,    -1,    -1,
      -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   724,    -1,  2246,   188,    -1,    -1,  2250,
      -1,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     741,  2415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2425,   214,   215,    -1,    -1,    -1,    -1,    -1,    -1,
    2281,    -1,    -1,    -1,  2211,    -1,   228,    -1,   769,    -1,
      -1,    -1,   174,  1829,    -1,    -1,    -1,  2211,    -1,   214,
     184,   185,    -1,    -1,    -1,    -1,   188,  2308,   789,   790,
     791,   193,    -1,   794,    -1,    -1,  2317,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   266,  2326,    -1,   269,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   817,    -1,    -1,  1875,
      -1,   283,    -1,    -1,  1829,    -1,   228,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  2355,  1891,    -1,    -1,    -1,    -1,
      -1,    -1,   246,   247,   248,   249,   250,   251,   283,    -1,
     254,   255,    -1,    -1,    -1,  1911,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   864,    -1,    -1,    -1,   868,   869,    -1,
    1875,    -1,  2546,    -1,    -1,    -1,    -1,    -1,    -1,  2326,
      -1,   283,    -1,    -1,  1940,    -1,  1891,    -1,    -1,  2410,
      -1,  1947,  2326,    -1,  2415,    -1,    -1,    -1,    -1,    -1,
      -1,  2422,    -1,    -1,  2425,    -1,  1911,    -1,  2355,  2583,
    1966,   373,    -1,  2434,  2435,    -1,    -1,  2438,    -1,    -1,
      -1,  2355,    -1,   924,    -1,    -1,    -1,    -1,    -1,  2450,
     931,    -1,    -1,    -1,    -1,  1940,    -1,    -1,    -1,    -1,
      -1,  2462,  1947,    -1,    -1,  2619,  2467,    -1,  2622,  2470,
      -1,   952,    -1,    -1,   358,   359,    -1,    -1,    -1,  2480,
    2481,  1966,    -1,    -1,    -1,    -1,    -1,    -1,  2415,    -1,
      -1,   373,  2493,    -1,  2495,    -1,    -1,    -1,  2425,    -1,
      -1,  2415,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2425,    -1,  2514,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   473,   810,    -1,   476,   477,   478,    -1,   480,   481,
     482,   483,   484,   485,    -1,  2546,  2082,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,   849,    -1,    -1,    -1,  2576,    -1,    -1,    -1,    -1,
      -1,  2582,  2583,    -1,    -1,   469,   470,    -1,    -1,  1070,
      -1,   473,    -1,    -1,   476,   477,   478,  2082,   480,   481,
     482,   483,   484,   485,    -1,   489,  2607,    -1,    -1,    -1,
    2611,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2619,  2546,
       8,  2622,  2623,    11,    -1,    -1,    -1,    -1,    -1,    17,
      18,    19,  2546,    -1,  2635,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2644,    -1,    -1,    34,  2648,  2649,    -1,
      -1,    -1,    -1,    -1,    42,    -1,  2583,    -1,    -1,    -1,
    2814,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2583,
      -1,    -1,    -1,    -1,    -1,  2211,    -1,    -1,   956,    -1,
      -1,    -1,    -1,    -1,    -1,   963,    74,    -1,     8,    -1,
      -1,    11,  2619,    -1,    -1,  2622,    -1,    -1,    -1,    -1,
    2701,    -1,    -1,  2704,    -1,  2619,    -1,    -1,  2622,    -1,
      -1,  1192,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    -1,  2211,    -1,    -1,    49,
    2731,    -1,  1213,    -1,    -1,  1216,    -1,    -1,  1219,    -1,
      -1,    -1,    -1,    -1,  2745,  1226,  1227,  1228,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,
      -1,  2762,    -1,    -1,    -1,  1246,    -1,    -1,    -1,    -1,
      -1,  1252,  1253,  1254,  1255,    -1,    -1,    -1,    -1,  1260,
    1261,  2782,  2783,    -1,  1265,    -1,   174,    -1,  1269,    -1,
    2326,  1272,  1273,  1274,  1275,  1276,  1277,  1278,  1279,  1280,
     188,    -1,  1283,    -1,    -1,   193,    -1,  1288,    -1,    -1,
    1291,    -1,  1293,  2814,  1295,  2816,    -1,    -1,    -1,  2355,
      -1,    -1,    -1,    -1,   144,    -1,   214,   215,    -1,    -1,
      -1,    -1,  2833,    -1,  2835,    -1,  1317,    -1,    -1,    -1,
     228,  2326,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,  1339,  1340,
       8,    -1,    -1,    11,    -1,    -1,    -1,    -1,   188,    -1,
    2355,    -1,    -1,   193,    -1,    -1,    -1,    -1,   266,  2415,
      -1,   269,    -1,    -1,    -1,    -1,    -1,  2814,    -1,  2425,
      -1,    -1,    -1,    -1,    42,   283,    -1,    -1,   286,    -1,
    2814,    49,    -1,    -1,    -1,    -1,    -1,    -1,   228,    -1,
    2911,    -1,  1190,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,
    2415,    -1,    -1,    -1,  1212,    -1,     3,    -1,     5,  1217,
    2425,    -1,  1423,    -1,    -1,  1426,  1427,    -1,  1429,    -1,
      -1,  1229,  1230,  1231,    -1,    -1,    -1,  1235,    -1,    -1,
      -1,    -1,    -1,   283,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1462,    -1,    -1,    -1,   373,    -1,    -1,     3,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      42,    -1,    17,    18,    19,    -1,    -1,    49,    -1,    -1,
    2546,    -1,  1290,    -1,    -1,    -1,    -1,  1498,    -1,    34,
      -1,    -1,    37,    -1,    -1,    -1,   174,    42,    -1,    -1,
      -1,    -1,    74,    -1,    49,    -1,    -1,    -1,    -1,    -1,
     188,     8,   109,   110,    11,   193,    -1,  2583,  1326,    -1,
      17,    18,    19,   373,    -1,    -1,    -1,  1538,    -1,    74,
    1338,  2546,  1543,    -1,    -1,  1343,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,
     228,    -1,    49,  2619,    -1,   473,  2622,    -1,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,  2583,    -1,
      -1,    -1,   144,    -1,  1585,   493,    -1,    74,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   184,   185,    -1,
    1601,    -1,  1603,  1604,    -1,    -1,    -1,    -1,    -1,    -1,
    1611,    -1,   174,  1614,  2619,   283,    -1,  2622,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,
      -1,   193,    -1,   473,    -1,    -1,    -1,    -1,    -1,   174,
     480,   481,   482,   483,   484,   485,    -1,  1648,    -1,    -1,
    1651,    -1,  1653,   188,    -1,    -1,    -1,    -1,   193,   246,
     247,   248,   249,   250,   251,    -1,   228,   254,   255,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   214,
     215,    -1,    -1,    -1,    -1,    -1,    -1,   174,    -1,    -1,
      -1,    -1,    -1,   228,    -1,    -1,    -1,    -1,    -1,  1700,
      -1,   188,    -1,    -1,    -1,   373,   193,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1715,    -1,    -1,    -1,    -1,    -1,
      -1,   283,    -1,    -1,    -1,    -1,    -1,   214,   215,    -1,
      -1,   266,    -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,
      -1,   228,    -1,  1541,    -1,    -1,  1747,    -1,   283,    -1,
      -1,   286,    -1,    -1,    -1,    -1,    -1,    -1,  2814,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1564,    -1,    -1,    -1,
      -1,   358,   359,    -1,    -1,    -1,    -1,    -1,    -1,   266,
      -1,    -1,   269,  1581,    -1,  1583,  1584,    -1,  1586,    -1,
    1588,    -1,    -1,    -1,    -1,  1593,   283,    -1,    -1,   286,
      -1,    -1,  1600,    -1,  1805,   473,    -1,  1605,    -1,  2814,
    1608,   373,   480,   481,   482,   483,   484,   485,  1616,    -1,
      -1,    -1,  1620,  1621,  1622,  1623,    -1,    -1,    -1,    -1,
      -1,  1629,  1630,    -1,  1632,  1633,    -1,    -1,   373,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1644,    -1,    -1,  1647,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1655,  1656,  1657,
    1658,  1659,  1660,  1661,  1662,  1663,  1664,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1672,    -1,    -1,    -1,  1676,    -1,
      -1,    -1,   469,   470,    -1,    -1,   373,  1888,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,  1898,    -1,  1697,
      -1,  1902,    -1,    -1,  1905,    -1,    -1,    -1,    -1,    -1,
      -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
     482,   483,   484,   485,    -1,    -1,    -1,    -1,    -1,    -1,
    1931,  1932,    -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,
      -1,   476,   477,   478,    -1,   480,   481,   482,   483,   484,
     485,    -1,    -1,  1954,    -1,    -1,  1957,    -1,  1959,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,  1967,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,  1975,  1976,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,    -1,
      -1,    -1,    -1,   490,    -1,  2006,    -1,    -1,    -1,    -1,
    1808,  1809,  1810,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2029,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,    -1,
      17,    18,    19,    -1,    -1,  2046,    -1,    -1,  1846,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    42,    -1,     8,    -1,    -1,
      11,    -1,    49,    -1,    -1,    -1,    17,    18,    19,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  1887,
      -1,    -1,    -1,    34,    -1,  1893,    -1,    74,    -1,    -1,
      -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
    1908,  1909,  1910,    -1,  1912,  1913,  1914,  1915,    -1,    -1,
    1918,  1919,  1920,  1921,  1922,  1923,  1924,  1925,  1926,  1927,
    1928,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1949,    -1,  1951,    -1,    -1,    -1,  1955,  1956,    -1,
      -1,  2162,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  1969,  1970,  1971,  1972,    -1,  1974,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   174,    -1,    -1,
      -1,    -1,    -1,    -1,  2205,  2206,    -1,    -1,    -1,  2210,
      -1,   188,    -1,    -1,  2215,    -1,   193,  2218,  2219,    -1,
      -1,    -1,  2223,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   174,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,    -1,    -1,
    2048,   228,   193,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,
      -1,    -1,    -1,   214,   215,    -1,    -1,    -1,    -1,    -1,
    2281,    -1,    -1,    -1,    -1,    -1,    -1,   228,    -1,   266,
      -1,    -1,   269,    -1,    -1,    -1,    -1,    42,    -1,    -1,
      -1,    -1,    -1,    -1,    49,    -1,   283,    -1,    -1,   286,
      -1,    -1,    -1,    -1,    -1,    -1,  2317,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   266,    -1,    -1,   269,    74,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2163,    -1,    -1,    -1,  2167,
    2168,    -1,  2170,    -1,    -1,  2173,  2174,  2175,  2176,    -1,
      -1,    -1,  2180,  2181,  2182,  2183,  2184,  2185,  2186,  2187,
    2188,  2189,  2190,  2191,     8,    -1,   373,    11,    -1,   144,
      -1,    -1,    -1,    17,    18,    19,  2204,    -1,    -1,  2207,
      -1,  2209,    -1,    -1,    -1,  2213,    -1,    -1,  2216,  2217,
      34,    -1,  2220,  2221,    -1,    -1,    -1,    -1,    42,   174,
      -1,    -1,   373,  2434,  2435,    49,    -1,  2438,    -1,    -1,
      -1,    -1,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      74,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2267,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2480,
    2481,    -1,  2280,   228,    -1,     8,    -1,    -1,    11,    -1,
      -1,    -1,    -1,    -1,  2495,  2293,   473,    -1,    -1,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,    -1,
      -1,    -1,     8,   490,    -1,    11,    -1,    -1,    -1,    42,
      -1,    17,    18,    19,    -1,    -1,    49,     8,    -1,    -1,
      11,    -1,   473,    -1,    -1,   476,   477,   478,   283,   480,
     481,   482,   483,   484,   485,    -1,    42,    -1,    -1,   490,
      -1,    74,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,
     174,    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,
      -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,    74,   193,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    74,    -1,    -1,    -1,    -1,    -1,    -1,
     214,   215,    -1,    -1,    -1,    -1,  2607,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   228,    -1,    -1,    -1,    -1,    -1,
    2418,   144,  2623,    -1,  2422,    -1,    -1,    -1,   373,    -1,
    2428,  2429,  2430,    -1,  2635,  2433,    -1,    -1,  2436,  2437,
      -1,    -1,    -1,  2441,    -1,    -1,    -1,    -1,  2649,    -1,
      -1,   174,   266,    -1,    -1,   269,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   144,    -1,   188,    -1,    -1,    -1,   283,
     193,    -1,   286,    -1,    -1,    -1,    -1,    -1,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   188,   174,    -1,    -1,    -1,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   228,    -1,   188,    -1,    -1,
      -1,    -1,   193,    -1,    -1,    -1,  2514,    -1,   214,   215,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,
    2731,    -1,   228,    -1,  2532,   480,   481,   482,   483,   484,
     485,    -1,    -1,    -1,    -1,    -1,    -1,   228,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   373,
     283,  2762,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,    -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,  2782,  2783,  2581,  2582,    -1,    -1,   283,  2586,  2587,
    2588,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   283,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2627,
    2628,    -1,    -1,    -1,  2835,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,  2641,    -1,    -1,    -1,    -1,    -1,    -1,
     373,    -1,    -1,    -1,  2652,    -1,    -1,    -1,    -1,   473,
      -1,    -1,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,    -1,    -1,    -1,    -1,   490,   373,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   373,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2698,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
    2911,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,  2717,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,  2740,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     473,    -1,    -1,    -1,    -1,    -1,  2754,   480,   481,   482,
     483,   484,   485,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
      -1,    -1,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,
     481,   482,   483,   484,   485,    -1,    -1,    -1,    -1,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,  2823,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
    2838,    -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,   130,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,    -1,   432,   433,
     434,   435,   436,   437,   438,   439,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,   482,    -1,
      -1,    -1,    -1,   487,    -1,   489,   490,    -1,    -1,    -1,
      -1,   495,    -1,   497,   498,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   361,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,   396,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,   430,    -1,   432,   433,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,   449,    -1,   451,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,    -1,   475,    -1,    -1,
      -1,    -1,   480,   481,    -1,    -1,    -1,    -1,    -1,   487,
      -1,   489,   490,    -1,    -1,    -1,    -1,   495,    -1,   497,
     498,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,    -1,   177,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,    -1,
      -1,   283,   284,   285,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,   361,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,   396,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,   430,    -1,
     432,   433,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,   449,    -1,   451,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,    -1,   475,    -1,    -1,    -1,    -1,   480,   481,
      -1,    -1,    -1,    -1,    -1,   487,    -1,   489,    -1,    -1,
      -1,    -1,    -1,   495,    -1,   497,   498,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    54,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,   169,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,   224,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,    -1,    -1,   283,   284,   285,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,   408,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,   430,    -1,   432,   433,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,    -1,    -1,    -1,
      -1,   487,    -1,   489,    -1,    -1,    -1,    -1,    -1,   495,
      -1,   497,   498,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,    -1,    -1,   283,   284,   285,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,    -1,   432,   433,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,   449,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,   482,    -1,    -1,    -1,    -1,   487,    -1,   489,
      -1,    -1,    -1,    -1,    -1,   495,    -1,   497,   498,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,    -1,
      -1,    -1,    -1,   487,    -1,   489,    -1,    -1,    -1,    -1,
      -1,   495,    -1,   497,   498,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,   430,    -1,   432,   433,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,    -1,    -1,    -1,    -1,   487,
      -1,   489,   490,    -1,    -1,    -1,    -1,   495,    -1,   497,
     498,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,    -1,   177,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,    -1,
      -1,   283,   284,   285,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,   430,    -1,
     432,   433,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,    -1,    -1,    -1,    -1,   487,    -1,   489,   490,    -1,
      -1,    -1,    -1,   495,    -1,   497,   498,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,    -1,    -1,   283,   284,   285,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,   430,    -1,   432,   433,   434,   435,
     436,   437,   438,   439,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,    -1,    -1,    -1,
      -1,   487,    -1,   489,    -1,    -1,    -1,    -1,    -1,   495,
      -1,   497,   498,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,   169,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,    -1,    -1,   283,   284,   285,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,    -1,   432,   433,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,   449,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,    -1,    -1,    -1,    -1,   487,    -1,   489,
      -1,    -1,    -1,    -1,    -1,   495,    -1,   497,   498,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,    -1,
      -1,    -1,    -1,   487,    -1,   489,    -1,    -1,    -1,    -1,
      -1,   495,    -1,   497,   498,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,   430,    -1,   432,   433,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,    -1,    -1,    -1,    -1,   487,
      -1,   489,    -1,    -1,    -1,    -1,    -1,   495,    -1,   497,
     498,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,    -1,   177,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,   266,   267,   268,   269,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,    -1,
      -1,   283,   284,   285,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,   430,    -1,
     432,   433,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,    -1,    -1,    -1,    -1,   487,    -1,   489,    -1,    -1,
      -1,    -1,    -1,   495,    -1,   497,   498,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      36,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,   115,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
     266,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,    -1,    -1,   283,   284,   285,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,   430,    -1,   432,   433,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,   473,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,    -1,    -1,    -1,
      -1,   487,    -1,   489,    -1,    -1,    -1,    -1,    -1,   495,
      -1,   497,   498,     3,     4,     5,     6,     7,     8,     9,
      10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      20,    21,    22,    23,    24,    25,    26,    27,    -1,    29,
      30,    31,    -1,    -1,    -1,    -1,    36,    -1,    -1,    39,
      40,    -1,    42,    43,    44,    45,    46,    47,    48,    49,
      50,    51,    52,    53,    -1,    55,    56,    57,    58,    59,
      60,    61,    62,    63,    64,    65,    66,    67,    -1,    69,
      70,    71,    72,    73,    -1,    75,    -1,    77,    78,    79,
      80,    81,    82,    83,    84,    85,    -1,    87,    88,    89,
      90,    91,    92,    -1,    94,    95,    96,    97,    98,    99,
     100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
     110,   111,   112,   113,   114,   115,   116,    -1,   118,   119,
     120,   121,   122,   123,    -1,   125,   126,   127,   128,   129,
      -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,   139,
     140,   141,    -1,   143,   144,   145,    -1,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   157,   158,    -1,
     160,   161,   162,   163,    -1,   165,    -1,   167,   168,    -1,
     170,   171,   172,   173,   174,   175,    -1,   177,    -1,   179,
     180,    -1,   182,   183,   184,   185,   186,   187,   188,   189,
     190,   191,   192,    -1,   194,   195,   196,   197,   198,   199,
      -1,   201,   202,   203,   204,   205,   206,   207,   208,   209,
      -1,   211,    -1,   213,   214,   215,   216,   217,   218,   219,
     220,   221,   222,    -1,    -1,   225,   226,   227,   228,    -1,
     230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
     240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
     250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
     260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
     270,   271,   272,   273,   274,   275,   276,   277,    -1,   279,
     280,    -1,    -1,   283,   284,   285,    -1,    -1,   288,   289,
     290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
     300,   301,   302,   303,    -1,   305,   306,   307,   308,   309,
     310,   311,   312,   313,    -1,   315,   316,   317,   318,   319,
     320,   321,   322,   323,   324,   325,   326,   327,   328,    -1,
     330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
     340,   341,    -1,   343,   344,   345,   346,   347,   348,   349,
     350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
     360,    -1,   362,   363,   364,   365,   366,   367,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,    -1,   379,
     380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
     390,   391,   392,    -1,   394,   395,    -1,   397,   398,   399,
     400,   401,   402,   403,    -1,   405,   406,    -1,    -1,   409,
     410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
     420,   421,   422,    -1,    -1,   425,   426,   427,   428,   429,
     430,    -1,   432,   433,   434,   435,   436,   437,   438,    -1,
     440,   441,   442,    -1,   444,   445,   446,    -1,    -1,   449,
      -1,    -1,   452,   453,   454,   455,   456,   457,   458,   459,
     460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
     470,   471,   472,   473,    -1,    -1,    -1,    -1,    -1,    -1,
     480,   481,    -1,    -1,    -1,    -1,    -1,   487,    -1,   489,
      -1,    -1,    -1,    -1,    -1,   495,    -1,   497,   498,     3,
       4,     5,     6,     7,     8,     9,    10,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,   266,   267,   268,   269,   270,   271,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,   473,
      -1,    -1,    -1,    -1,    -1,    -1,   480,   481,    -1,    -1,
      -1,    -1,    -1,   487,    -1,   489,    -1,    -1,    -1,    -1,
      -1,   495,    -1,   497,   498,     3,     4,     5,     6,     7,
       8,     9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    36,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    45,    46,    47,
      48,    49,    50,    51,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    61,    62,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    75,    -1,    77,
      78,    79,    80,    81,    82,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    -1,    94,    95,    96,    97,
      98,    99,   100,   101,   102,   103,   104,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,   115,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,   157,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
     168,    -1,   170,   171,   172,   173,   174,   175,    -1,   177,
      -1,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,    -1,   201,   202,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,   214,   215,   216,   217,
     218,   219,   220,   221,   222,    -1,    -1,   225,   226,   227,
     228,    -1,   230,   231,   232,   233,   234,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,   260,   261,   262,   263,   264,   265,   266,   267,
     268,   269,   270,   271,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,
     288,   289,   290,   291,   292,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,   364,   365,   366,   367,
     368,   369,   370,   371,   372,   373,   374,   375,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,    -1,   397,
     398,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,   414,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,   430,    -1,   432,   433,   434,   435,   436,   437,
     438,    -1,   440,   441,   442,    -1,   444,   445,   446,    -1,
      -1,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,   473,    -1,    -1,    -1,    -1,
      -1,    -1,   480,   481,    -1,    -1,    -1,    -1,    -1,   487,
      -1,   489,    -1,    -1,    -1,    -1,    -1,   495,    -1,   497,
     498,     3,     4,     5,     6,     7,     8,     9,    10,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    45,    46,    47,    48,    49,    50,    51,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    61,
      62,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    75,    -1,    77,    78,    79,    80,    81,
      82,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    94,    95,    96,    97,    98,    99,   100,   101,
     102,   103,   104,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,   115,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,   157,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,   168,    -1,   170,   171,
     172,   173,   174,   175,    -1,   177,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,   188,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,    -1,   201,
     202,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,    -1,    -1,   216,   217,   218,   219,   220,   221,
     222,    -1,    -1,   225,   226,   227,   228,    -1,   230,   231,
     232,   233,   234,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,   260,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,   270,   271,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,    -1,
      -1,   283,   284,   285,    -1,    -1,   288,   289,   290,   291,
     292,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,   345,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,   365,   366,   367,   368,   369,   370,   371,
     372,   373,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,    -1,   397,   398,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,   414,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,   430,    -1,
     432,   433,   434,   435,   436,   437,   438,    -1,   440,   441,
     442,    -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,   473,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,
      -1,    -1,    -1,    -1,    -1,   487,    -1,   489,    -1,    -1,
      -1,    -1,    -1,   495,    -1,   497,   498,     3,     4,     5,
       6,     7,     8,     9,    10,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    20,    21,    22,    23,    24,    25,
      26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,    45,
      46,    47,    48,    49,    50,    51,    52,    53,    -1,    55,
      56,    57,    58,    59,    60,    61,    62,    63,    64,    65,
      66,    67,    -1,    69,    70,    71,    72,    73,    -1,    75,
      -1,    77,    78,    79,    80,    81,    82,    83,    84,    85,
      -1,    87,    88,    89,    90,    91,    92,    -1,    94,    95,
      96,    97,    98,    99,   100,   101,   102,   103,   104,   105,
     106,   107,   108,   109,   110,   111,   112,   113,   114,    -1,
     116,    -1,   118,   119,   120,   121,   122,   123,    -1,   125,
     126,   127,   128,   129,    -1,    -1,   132,   133,   134,   135,
     136,    -1,    -1,   139,   140,   141,    -1,   143,   144,   145,
      -1,   147,   148,   149,   150,   151,   152,   153,   154,   155,
     156,   157,   158,    -1,   160,   161,   162,   163,    -1,   165,
      -1,   167,   168,    -1,   170,   171,   172,   173,   174,   175,
      -1,   177,    -1,   179,   180,    -1,   182,   183,   184,   185,
     186,   187,   188,   189,   190,   191,   192,    -1,   194,   195,
     196,   197,   198,   199,    -1,   201,   202,   203,   204,   205,
     206,   207,   208,   209,    -1,   211,    -1,   213,   214,   215,
     216,   217,   218,   219,   220,   221,   222,    -1,    -1,   225,
     226,   227,   228,    -1,   230,   231,   232,   233,   234,   235,
     236,   237,   238,   239,   240,   241,   242,   243,   244,   245,
     246,   247,   248,   249,   250,   251,   252,   253,   254,   255,
     256,   257,   258,   259,   260,   261,   262,   263,   264,   265,
      -1,   267,   268,   269,   270,   271,   272,   273,   274,   275,
     276,   277,    -1,   279,   280,    -1,    -1,   283,   284,   285,
      -1,    -1,   288,   289,   290,   291,   292,   293,   294,   295,
     296,   297,   298,   299,   300,   301,   302,   303,    -1,   305,
     306,   307,   308,   309,   310,   311,   312,   313,    -1,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,    -1,   330,   331,   332,   333,   334,   335,
     336,   337,   338,   339,   340,   341,    -1,   343,   344,   345,
     346,   347,   348,   349,   350,   351,   352,   353,   354,   355,
     356,   357,   358,   359,   360,    -1,   362,   363,   364,   365,
     366,   367,   368,   369,   370,   371,   372,   373,   374,   375,
     376,   377,    -1,   379,   380,   381,   382,   383,   384,   385,
     386,   387,   388,   389,   390,   391,   392,    -1,   394,   395,
      -1,   397,   398,   399,   400,   401,   402,   403,    -1,   405,
     406,    -1,    -1,   409,   410,   411,   412,   413,   414,   415,
     416,   417,   418,   419,   420,   421,   422,    -1,    -1,   425,
     426,   427,   428,   429,   430,    -1,   432,   433,   434,   435,
     436,   437,   438,    -1,   440,   441,   442,    -1,   444,   445,
     446,    -1,    -1,   449,    -1,    -1,   452,   453,   454,   455,
     456,   457,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   469,   470,   471,   472,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   480,   481,    -1,    -1,     3,     4,
       5,     6,     7,   489,     9,    10,    -1,    -1,    -1,    -1,
      -1,   497,   498,    -1,    -1,    20,    21,    22,    23,    24,
      25,    26,    27,    -1,    29,    30,    31,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,    44,
      45,    46,    47,    48,    49,    50,    51,    52,    53,    -1,
      55,    56,    57,    58,    59,    60,    61,    62,    63,    64,
      65,    66,    67,    -1,    69,    70,    71,    72,    73,    -1,
      75,    -1,    77,    78,    79,    80,    81,    82,    83,    84,
      85,    -1,    87,    88,    89,    90,    91,    92,    -1,    94,
      95,    96,    97,    98,    99,   100,   101,   102,   103,   104,
     105,   106,   107,   108,   109,   110,   111,   112,   113,   114,
      -1,   116,    -1,   118,   119,   120,   121,   122,   123,    -1,
     125,   126,   127,   128,   129,    -1,    -1,   132,   133,   134,
     135,   136,    -1,    -1,   139,   140,   141,    -1,   143,   144,
     145,    -1,   147,   148,   149,   150,   151,   152,   153,   154,
     155,   156,   157,   158,    -1,   160,   161,   162,   163,    -1,
     165,    -1,   167,   168,    -1,   170,   171,   172,   173,   174,
     175,    -1,   177,    -1,   179,   180,    -1,   182,   183,   184,
     185,   186,   187,   188,   189,   190,   191,   192,    -1,   194,
     195,   196,   197,   198,   199,    -1,   201,   202,   203,   204,
     205,   206,   207,   208,   209,    -1,   211,    -1,   213,   214,
     215,   216,   217,   218,   219,   220,   221,   222,    -1,    -1,
     225,   226,   227,   228,    -1,   230,   231,   232,   233,   234,
     235,   236,   237,   238,   239,   240,   241,   242,   243,   244,
     245,   246,   247,   248,   249,   250,   251,   252,   253,   254,
     255,   256,   257,   258,   259,   260,   261,   262,   263,   264,
     265,    -1,   267,   268,   269,   270,   271,   272,   273,   274,
     275,   276,   277,    -1,   279,   280,    -1,    -1,   283,   284,
     285,    -1,    -1,   288,   289,   290,   291,   292,   293,   294,
     295,   296,   297,   298,   299,   300,   301,   302,   303,    -1,
     305,   306,   307,   308,   309,   310,   311,   312,   313,    -1,
     315,   316,   317,   318,   319,   320,   321,   322,   323,   324,
     325,   326,   327,   328,    -1,   330,   331,   332,   333,   334,
     335,   336,   337,   338,   339,   340,   341,    -1,   343,   344,
     345,   346,   347,   348,   349,   350,   351,   352,   353,   354,
     355,   356,   357,   358,   359,   360,    -1,   362,   363,   364,
     365,   366,   367,   368,   369,   370,   371,   372,   373,   374,
     375,   376,   377,    -1,   379,   380,   381,   382,   383,   384,
     385,   386,   387,   388,   389,   390,   391,   392,    -1,   394,
     395,    -1,   397,   398,   399,   400,   401,   402,   403,    -1,
     405,   406,    -1,    -1,   409,   410,   411,   412,   413,   414,
     415,   416,   417,   418,   419,   420,   421,   422,    -1,    -1,
     425,   426,   427,   428,   429,   430,    -1,   432,   433,   434,
     435,   436,   437,   438,    -1,   440,   441,   442,    -1,   444,
     445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,   454,
     455,   456,   457,   458,   459,   460,   461,   462,   463,   464,
     465,   466,   467,   468,   469,   470,   471,   472,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   480,   481,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   489,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   497,   498,     3,     4,     5,     6,     7,     8,
       9,    10,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    45,    46,    47,    48,
      49,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,    -1,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,   228,
      -1,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,    -1,   267,   268,
     269,   270,   271,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,   288,
     289,   290,   291,   292,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,   430,    -1,   432,   433,   434,   435,   436,   437,   438,
      -1,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   480,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     489,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   497,   498,
       3,     4,     5,     6,     7,     8,     9,    10,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    36,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    -1,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    61,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,   115,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,    -1,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,    -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,    -1,    -1,   216,   217,   218,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,    -1,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,   270,   271,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,    -1,    -1,
     283,   284,   285,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,   430,    -1,   432,
     433,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,     3,
      -1,     5,    -1,    -1,   487,    -1,   489,    -1,    -1,    -1,
      -1,    -1,   495,    -1,   497,   498,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,   223,
      -1,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,   282,   283,
     284,   285,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,   396,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,   475,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   489,    -1,    -1,    -1,    -1,
     494,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,    -1,    -1,   216,    -1,   218,
     219,   220,   221,   222,    -1,    -1,   225,    -1,   227,    -1,
      -1,   230,   231,   232,    -1,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,    -1,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,   270,    -1,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,   288,
     289,    -1,   291,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,   437,   438,
      -1,   440,    -1,   442,    -1,   444,   445,   446,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
      -1,    -1,    -1,    -1,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     494,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,    -1,    -1,   216,    -1,   218,
     219,   220,   221,   222,    -1,    -1,   225,    -1,   227,    -1,
      -1,   230,   231,   232,    -1,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,    -1,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,   270,    -1,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,   288,
     289,    -1,   291,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,   437,   438,
      -1,   440,    -1,   442,    -1,   444,   445,   446,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,    -1,    -1,    -1,    -1,    -1,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   494,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,   170,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,   217,   218,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,    -1,
       3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   490,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
     223,    -1,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,    -1,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,    -1,   282,
     283,   284,   285,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,   430,    -1,   432,
     433,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   489,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,    -1,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,    -1,    -1,
     283,   284,   285,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,   430,    -1,   432,
     433,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
       3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   489,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    45,    46,    47,    48,    49,    50,    51,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    62,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    75,    -1,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    94,    95,    96,    97,    98,    99,   100,   101,   102,
     103,   104,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,   168,    -1,   170,   171,   172,
     173,   174,   175,    -1,   177,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,   188,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,    -1,   201,   202,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,   214,   215,   216,   217,   218,   219,   220,   221,   222,
      -1,    -1,   225,   226,   227,   228,    -1,   230,   231,   232,
     233,   234,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,   260,   261,   262,
     263,   264,   265,    -1,   267,   268,   269,   270,    -1,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,    -1,    -1,
     283,   284,   285,    -1,    -1,   288,   289,   290,   291,   292,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,   345,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,   367,   368,   369,   370,   371,   372,
     373,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,    -1,   397,   398,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,   430,    -1,   432,
     433,   434,   435,   436,   437,   438,    -1,   440,   441,   442,
      -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
       3,     4,     5,    -1,    -1,    -1,     9,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   489,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,   157,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
     173,    -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,    -1,    -1,   216,    -1,   218,   219,   220,   221,   222,
      -1,    -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,
      -1,    -1,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,    -1,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,   270,    -1,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,   281,    -1,
     283,   284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,    -1,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,    -1,   397,    -1,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,   414,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,   437,   438,    -1,   440,    -1,   442,
      -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
       3,    -1,    -1,    -1,    -1,    -1,    -1,   480,   481,   482,
      -1,    -1,    -1,    -1,    -1,    -1,   489,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    32,
      33,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
     173,    -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,    -1,    -1,   216,    -1,   218,   219,   220,   221,   222,
      -1,    -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,
      -1,    -1,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,    -1,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,   270,    -1,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,    -1,    -1,
     283,   284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,   437,   438,    -1,   440,    -1,   442,
      -1,   444,   445,   446,    -1,    -1,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
       3,    -1,   475,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   489,    20,    21,    22,
      23,    24,    25,    26,    27,    28,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
     173,    -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,    -1,    -1,   216,    -1,   218,   219,   220,   221,   222,
      -1,    -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,
      -1,    -1,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,    -1,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,   270,    -1,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,    -1,    -1,
     283,   284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,   437,   438,    -1,   440,    -1,   442,
      -1,   444,   445,   446,    -1,    -1,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
       3,    -1,   475,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   489,    20,    21,    22,
      23,    24,    25,    26,    27,    -1,    29,    30,    31,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,
      43,    44,    -1,    46,    47,    48,    49,    50,    -1,    52,
      53,    -1,    55,    56,    57,    58,    59,    60,    -1,    -1,
      63,    64,    65,    66,    67,    -1,    69,    70,    71,    72,
      73,    -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,
      83,    84,    85,    -1,    87,    88,    89,    90,    91,    92,
      -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   105,   106,   107,   108,   109,   110,   111,   112,
     113,   114,    -1,   116,    -1,   118,   119,   120,   121,   122,
     123,    -1,   125,   126,   127,   128,   129,    -1,    -1,   132,
     133,   134,   135,   136,    -1,    -1,   139,   140,   141,    -1,
     143,   144,   145,    -1,   147,   148,   149,   150,   151,   152,
     153,   154,   155,   156,    -1,   158,    -1,   160,   161,   162,
     163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,
     173,    -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,
     183,   184,   185,   186,   187,    -1,   189,   190,   191,   192,
      -1,   194,   195,   196,   197,   198,   199,    -1,   201,    -1,
     203,   204,   205,   206,   207,   208,   209,    -1,   211,    -1,
     213,    -1,    -1,   216,    -1,   218,   219,   220,   221,   222,
      -1,    -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,
      -1,    -1,   235,   236,   237,   238,   239,   240,   241,   242,
     243,   244,   245,   246,   247,   248,   249,   250,   251,   252,
     253,   254,   255,   256,   257,   258,   259,    -1,   261,   262,
     263,   264,   265,    -1,   267,   268,    -1,   270,    -1,   272,
     273,   274,   275,   276,   277,    -1,   279,   280,    -1,    -1,
     283,   284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,
     293,   294,   295,   296,   297,   298,   299,   300,   301,   302,
     303,    -1,   305,   306,   307,   308,   309,   310,   311,   312,
     313,    -1,   315,   316,   317,   318,   319,   320,   321,   322,
     323,   324,   325,   326,   327,   328,    -1,   330,   331,   332,
     333,   334,   335,   336,   337,   338,   339,   340,   341,    -1,
     343,   344,    -1,   346,   347,   348,   349,   350,   351,   352,
     353,   354,   355,   356,   357,   358,   359,   360,   361,   362,
     363,   364,   365,   366,    -1,   368,   369,   370,   371,   372,
      -1,   374,   375,   376,   377,    -1,   379,   380,   381,   382,
     383,   384,   385,   386,   387,   388,   389,   390,   391,   392,
      -1,   394,   395,   396,   397,    -1,   399,   400,   401,   402,
     403,    -1,   405,   406,    -1,    -1,   409,   410,   411,   412,
     413,    -1,   415,   416,   417,   418,   419,   420,   421,   422,
      -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,   432,
     433,   434,   435,   436,   437,   438,    -1,   440,    -1,   442,
      -1,   444,   445,   446,    -1,    -1,   449,    -1,   451,   452,
     453,   454,   455,   456,   457,   458,   459,   460,   461,   462,
     463,   464,   465,   466,   467,   468,   469,   470,   471,   472,
      -1,     3,   475,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   489,    -1,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
     172,   173,    -1,   175,    -1,   177,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,    -1,    -1,   216,    -1,   218,   219,   220,   221,
     222,    -1,    -1,   225,    -1,   227,    -1,    -1,   230,   231,
     232,    -1,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,    -1,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,   270,    -1,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,    -1,
      -1,   283,   284,   285,    -1,    -1,   288,   289,    -1,   291,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,   437,   438,    -1,   440,    -1,
     442,    -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,     3,    -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
     172,   173,    -1,   175,    -1,   177,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,    -1,    -1,   216,    -1,   218,   219,   220,   221,
     222,    -1,    -1,   225,    -1,   227,    -1,    -1,   230,   231,
     232,    -1,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,    -1,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,   270,    -1,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,    -1,
      -1,   283,   284,   285,    -1,    -1,   288,   289,    -1,   291,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,   437,   438,    -1,   440,    -1,
     442,    -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
     172,   173,    -1,   175,    -1,   177,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,    -1,    -1,   216,    -1,   218,   219,   220,   221,
     222,    -1,    -1,   225,    -1,   227,    -1,    -1,   230,   231,
     232,    -1,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,    -1,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,   270,    -1,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,    -1,
      -1,   283,   284,   285,    -1,    -1,   288,   289,    -1,   291,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,   437,   438,    -1,   440,    -1,
     442,    -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,     3,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   489,    20,    21,
      22,    23,    24,    25,    26,    27,    -1,    29,    30,    31,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    39,    40,    -1,
      42,    43,    44,    -1,    46,    47,    48,    49,    50,    -1,
      52,    53,    -1,    55,    56,    57,    58,    59,    60,    -1,
      -1,    63,    64,    65,    66,    67,    -1,    69,    70,    71,
      72,    73,    -1,    -1,    -1,    77,    78,    79,    80,    81,
      -1,    83,    84,    85,    -1,    87,    88,    89,    90,    91,
      92,    -1,    -1,    95,    96,    97,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   105,   106,   107,   108,   109,   110,   111,
     112,   113,   114,    -1,   116,    -1,   118,   119,   120,   121,
     122,   123,    -1,   125,   126,   127,   128,   129,    -1,    -1,
     132,   133,   134,   135,   136,    -1,    -1,   139,   140,   141,
      -1,   143,   144,   145,    -1,   147,   148,   149,   150,   151,
     152,   153,   154,   155,   156,    -1,   158,    -1,   160,   161,
     162,   163,    -1,   165,    -1,   167,    -1,    -1,    -1,   171,
     172,   173,    -1,   175,    -1,   177,    -1,   179,   180,    -1,
     182,   183,   184,   185,   186,   187,    -1,   189,   190,   191,
     192,    -1,   194,   195,   196,   197,   198,   199,    -1,   201,
      -1,   203,   204,   205,   206,   207,   208,   209,    -1,   211,
      -1,   213,    -1,    -1,   216,    -1,   218,   219,   220,   221,
     222,    -1,    -1,   225,    -1,   227,    -1,    -1,   230,   231,
     232,    -1,    -1,   235,   236,   237,   238,   239,   240,   241,
     242,   243,   244,   245,   246,   247,   248,   249,   250,   251,
     252,   253,   254,   255,   256,   257,   258,   259,    -1,   261,
     262,   263,   264,   265,    -1,   267,   268,    -1,   270,    -1,
     272,   273,   274,   275,   276,   277,    -1,   279,   280,    -1,
      -1,   283,   284,   285,    -1,    -1,   288,   289,    -1,   291,
      -1,   293,   294,   295,   296,   297,   298,   299,   300,   301,
     302,   303,    -1,   305,   306,   307,   308,   309,   310,   311,
     312,   313,    -1,   315,   316,   317,   318,   319,   320,   321,
     322,   323,   324,   325,   326,   327,   328,    -1,   330,   331,
     332,   333,   334,   335,   336,   337,   338,   339,   340,   341,
      -1,   343,   344,    -1,   346,   347,   348,   349,   350,   351,
     352,   353,   354,   355,   356,   357,   358,   359,   360,    -1,
     362,   363,   364,   365,   366,    -1,   368,   369,   370,   371,
     372,    -1,   374,   375,   376,   377,    -1,   379,   380,   381,
     382,   383,   384,   385,   386,   387,   388,   389,   390,   391,
     392,    -1,   394,   395,    -1,   397,    -1,   399,   400,   401,
     402,   403,    -1,   405,   406,    -1,    -1,   409,   410,   411,
     412,   413,    -1,   415,   416,   417,   418,   419,   420,   421,
     422,    -1,    -1,   425,   426,   427,   428,   429,    -1,    -1,
     432,   433,   434,   435,   436,   437,   438,    -1,   440,    -1,
     442,    -1,   444,   445,   446,    -1,    -1,   449,    -1,    -1,
     452,   453,   454,   455,   456,   457,   458,   459,   460,   461,
     462,   463,   464,   465,   466,   467,   468,   469,   470,   471,
     472,    -1,    -1,    -1,     3,     4,     5,    -1,    -1,     8,
       9,    -1,    -1,    -1,    -1,    -1,    -1,   489,    17,    18,
      19,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    45,    46,    47,    48,
      -1,    50,    51,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    -1,    74,    75,    76,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    94,    95,    96,    97,    98,
      99,   100,   101,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,    -1,   152,   153,   154,   155,    -1,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,   168,
     169,   170,   171,   172,   173,   174,   175,   176,   177,   178,
      -1,   180,   181,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,   223,   224,   225,   226,   227,   228,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,   265,   266,   267,   268,
     269,   270,   271,    -1,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
      -1,   290,   291,   292,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,    -1,   308,
     309,    -1,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,   345,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,   373,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,   393,   394,   395,   396,   397,   398,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,    -1,   412,    -1,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,    -1,   438,
     439,   440,   441,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     469,   470,   471,   472,    -1,     3,    -1,   476,   477,   478,
       8,   480,   481,   482,   483,   484,   485,    -1,    -1,    17,
      18,    19,    20,    21,    22,    23,    24,    25,    26,    27,
      -1,    29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    39,    40,    -1,    42,    43,    44,    -1,    46,    47,
      48,    49,    50,    -1,    52,    53,    -1,    55,    56,    57,
      58,    59,    60,    -1,    -1,    63,    64,    65,    66,    67,
      -1,    69,    70,    71,    72,    73,    -1,    -1,    -1,    77,
      78,    79,    80,    81,    -1,    83,    84,    85,    -1,    87,
      88,    89,    90,    91,    92,    -1,    -1,    95,    96,    97,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,
     108,   109,   110,   111,   112,   113,   114,    -1,   116,    -1,
     118,   119,   120,   121,   122,   123,    -1,   125,   126,   127,
     128,   129,    -1,    -1,   132,   133,   134,   135,   136,    -1,
      -1,   139,   140,   141,    -1,   143,   144,   145,    -1,   147,
     148,   149,   150,   151,   152,   153,   154,   155,   156,    -1,
     158,    -1,   160,   161,   162,   163,    -1,   165,    -1,   167,
      -1,    -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,
      -1,   179,   180,    -1,   182,   183,   184,   185,   186,   187,
      -1,   189,   190,   191,   192,    -1,   194,   195,   196,   197,
     198,   199,    -1,   201,    -1,   203,   204,   205,   206,   207,
     208,   209,    -1,   211,    -1,   213,    -1,    -1,   216,    -1,
     218,   219,   220,   221,   222,    -1,    -1,   225,    -1,   227,
      -1,    -1,   230,   231,   232,    -1,    -1,   235,   236,   237,
     238,   239,   240,   241,   242,   243,   244,   245,   246,   247,
     248,   249,   250,   251,   252,   253,   254,   255,   256,   257,
     258,   259,    -1,   261,   262,   263,   264,   265,    -1,   267,
     268,    -1,   270,    -1,   272,   273,   274,   275,   276,   277,
      -1,   279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,
     288,   289,    -1,   291,    -1,   293,   294,   295,   296,   297,
     298,   299,   300,   301,   302,   303,    -1,   305,   306,   307,
     308,   309,   310,   311,   312,   313,    -1,   315,   316,   317,
     318,   319,   320,   321,   322,   323,   324,   325,   326,   327,
     328,    -1,   330,   331,   332,   333,   334,   335,   336,   337,
     338,   339,   340,   341,    -1,   343,   344,    -1,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,    -1,   362,   363,   364,   365,   366,    -1,
     368,   369,   370,   371,   372,    -1,   374,   375,   376,   377,
      -1,   379,   380,   381,   382,   383,   384,   385,   386,   387,
     388,   389,   390,   391,   392,    -1,   394,   395,    -1,   397,
      -1,   399,   400,   401,   402,   403,    -1,   405,   406,    -1,
      -1,   409,   410,   411,   412,   413,    -1,   415,   416,   417,
     418,   419,   420,   421,   422,    -1,    -1,   425,   426,   427,
     428,   429,    -1,    -1,   432,   433,   434,   435,   436,   437,
     438,    -1,   440,    -1,   442,    -1,   444,   445,   446,    -1,
      -1,   449,    -1,    -1,   452,   453,   454,   455,   456,   457,
     458,   459,   460,   461,   462,   463,   464,   465,   466,   467,
     468,   469,   470,   471,   472,    -1,    -1,    -1,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,     8,    -1,
      -1,    11,    -1,    -1,    -1,    -1,    -1,    17,    18,    19,
      -1,    -1,    -1,    -1,    -1,    -1,     8,    -1,    -1,    11,
      -1,    -1,    -1,    -1,    34,    17,    18,    19,    -1,    -1,
      -1,    -1,    42,    -1,     8,    -1,    -1,    11,    -1,    49,
      -1,    -1,    34,    17,    18,    19,    -1,    -1,    -1,    -1,
      42,    -1,    -1,    -1,    -1,    -1,    -1,    49,    -1,    -1,
      34,    -1,     8,    -1,    74,    11,    -1,    -1,    42,    -1,
      -1,    17,    18,    19,    -1,    49,    -1,    -1,    -1,    -1,
       8,    -1,    74,    11,    -1,    -1,    -1,    -1,    34,    17,
      18,    19,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,
      74,    -1,    -1,    49,    -1,    -1,    34,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,
      -1,    49,     8,    -1,    -1,    11,    -1,    -1,    74,    -1,
      -1,    17,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    34,    -1,
       8,    -1,    -1,    11,    -1,    -1,    42,    -1,    -1,    17,
      18,    19,    -1,    49,   174,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,   188,    -1,
      -1,    -1,   174,   193,    42,    -1,    -1,    -1,    74,    -1,
      -1,    49,    -1,    -1,    -1,    -1,   188,    -1,    -1,    -1,
     174,   193,    -1,    -1,   214,   215,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   188,    -1,    74,    -1,   228,   193,
      -1,    -1,   214,   215,    -1,    -1,    -1,    -1,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   228,    -1,    -1,    -1,
     214,   215,   188,    -1,    -1,    -1,   174,   193,    -1,    -1,
      -1,    -1,    -1,    -1,   228,    -1,   266,    -1,    -1,   269,
     188,    -1,    -1,    -1,    -1,   193,    -1,    -1,   214,   215,
      -1,    -1,    -1,   283,   266,    -1,   286,   269,    -1,    -1,
      -1,    -1,   228,    -1,    -1,    -1,   214,   215,   174,    -1,
      -1,   283,   266,    -1,   286,   269,    -1,    -1,    -1,    -1,
     228,    -1,   188,    -1,    -1,    -1,    -1,   193,    -1,   283,
      -1,    -1,   286,    -1,    -1,    -1,   174,    -1,    -1,    -1,
     266,    -1,    -1,   269,    -1,    -1,    -1,    -1,   214,   215,
     188,    -1,    -1,    -1,    -1,   193,    -1,   283,   266,    -1,
     286,   269,   228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,   214,   215,   286,    -1,
      -1,    -1,    -1,   373,    -1,    -1,    -1,    -1,    -1,    -1,
     228,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     266,   373,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,   373,
     286,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,    -1,
      -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   373,   286,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   373,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   473,    -1,    -1,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,    -1,    -1,    -1,    -1,
     490,   473,    -1,    -1,   476,   477,   478,   373,   480,   481,
     482,   483,   484,   485,    -1,    -1,    -1,    -1,   490,   473,
      -1,    -1,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,    -1,    -1,    -1,   373,   490,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
      -1,    -1,    -1,    -1,   490,   473,    -1,    -1,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,    -1,    -1,
      -1,    -1,   490,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
      -1,    -1,    -1,    -1,   490,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,     3,   473,    -1,    -1,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,    -1,    -1,
     488,    20,    21,    22,    23,    24,    25,    26,    27,    28,
      29,    30,    31,    32,    33,    34,    35,    36,    37,    38,
      39,    40,    41,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    54,    55,    56,    57,    58,
      59,    60,    61,    62,    63,    64,    65,    66,    67,    68,
      69,    70,    71,    72,    73,    74,    -1,    76,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    86,    87,    88,
      89,    90,    91,    92,    93,    -1,    95,    96,    97,    98,
      99,   100,    -1,   102,   103,   104,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,   117,   118,
     119,   120,   121,   122,   123,   124,   125,   126,   127,   128,
     129,   130,   131,   132,   133,   134,   135,   136,   137,   138,
     139,   140,   141,   142,   143,   144,   145,   146,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
     159,   160,   161,   162,   163,   164,   165,   166,   167,    -1,
     169,    -1,   171,   172,   173,    -1,   175,   176,   177,   178,
     179,   180,   181,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,   193,   194,   195,   196,   197,   198,
     199,   200,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,   210,   211,   212,   213,    -1,    -1,   216,    -1,   218,
     219,   220,   221,   222,   223,   224,   225,    -1,   227,    -1,
     229,   230,   231,   232,   233,   234,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,    -1,   261,   262,   263,   264,   265,   266,   267,   268,
      -1,   270,   271,   272,   273,   274,   275,   276,   277,   278,
     279,   280,   281,   282,   283,   284,   285,   286,   287,   288,
     289,    -1,   291,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,   304,   305,   306,   307,   308,
     309,   310,   311,   312,   313,   314,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
     329,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,   342,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,   361,   362,   363,   364,   365,   366,   367,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,   378,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,   393,   394,   395,   396,   397,    -1,
     399,   400,   401,   402,   403,   404,   405,   406,   407,   408,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,   423,   424,   425,   426,   427,   428,
     429,   430,   431,   432,   433,   434,   435,   436,   437,   438,
     439,   440,    -1,   442,   443,   444,   445,   446,   447,   448,
     449,   450,   451,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,   482,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,    -1,    -1,   216,    -1,   218,
     219,   220,   221,   222,    -1,    -1,   225,    -1,   227,    -1,
      -1,   230,   231,   232,    -1,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,    -1,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,   270,    -1,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,   288,
     289,    -1,   291,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,   437,   438,
      -1,   440,    -1,   442,    -1,   444,   445,   446,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,     3,     4,     5,    -1,    -1,    -1,
       9,    -1,    -1,   482,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,    -1,    -1,   216,    -1,   218,
     219,   220,   221,   222,    -1,    -1,   225,    -1,   227,    -1,
      -1,   230,   231,   232,    -1,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,    -1,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,   270,    -1,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,   283,   284,   285,    -1,    -1,   288,
     289,    -1,   291,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,   437,   438,
      -1,   440,    -1,   442,    -1,   444,   445,   446,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,     3,     4,     5,    -1,    -1,    -1,
       9,   480,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,   115,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,    -1,    -1,   216,    -1,   218,
     219,   220,   221,   222,    -1,    -1,   225,    -1,   227,    -1,
      -1,   230,   231,   232,    -1,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,    -1,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,   270,    -1,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,   283,   284,   285,    -1,    -1,   288,
     289,    -1,   291,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,   437,   438,
      -1,   440,    -1,   442,    -1,   444,   445,   446,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,     3,     4,     5,    -1,    -1,    -1,
       9,   480,   481,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,   157,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,    -1,    -1,   216,    -1,   218,
     219,   220,   221,   222,    -1,    -1,   225,    -1,   227,    -1,
      -1,   230,   231,   232,    -1,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,    -1,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,   270,    -1,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,   281,    -1,   283,   284,   285,    -1,    -1,   288,
     289,    -1,   291,    -1,   293,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,    -1,   346,   347,   348,
     349,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,   414,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,   437,   438,
      -1,   440,    -1,   442,    -1,   444,   445,   446,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,     8,    -1,    -1,    11,    -1,    -1,
      -1,   480,   481,    17,    18,    19,    -1,    -1,    -1,    -1,
      -1,    -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    -1,
      34,    17,    18,    19,    38,    -1,    -1,    -1,    42,    -1,
       8,    -1,    -1,    11,    -1,    49,    -1,    -1,    34,    17,
      18,    19,    -1,    -1,    -1,    -1,    42,    -1,    -1,    -1,
      -1,    -1,    -1,    49,    -1,    -1,    34,    -1,     8,    -1,
      74,    11,    -1,    -1,    42,    -1,    -1,    17,    18,    19,
      -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,    37,    -1,    -1,
      -1,     8,    42,    -1,    11,    -1,    74,    -1,    -1,    49,
      17,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     124,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    42,    -1,    -1,    -1,    -1,
      -1,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    74,    -1,    -1,
     174,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   164,    -1,
      -1,    37,    -1,   169,   188,    -1,    -1,    -1,   174,   193,
      -1,    -1,    -1,    -1,    -1,   163,    -1,    -1,    -1,    -1,
      56,    -1,   188,    -1,    -1,    -1,   174,   193,    -1,    -1,
     214,   215,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     188,    -1,    -1,    -1,   228,   193,    -1,    -1,   214,   215,
      -1,    -1,    -1,    -1,   174,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   228,    -1,    -1,    -1,   214,   215,   188,    -1,
     106,   107,    -1,   193,    -1,    -1,    -1,    -1,    -1,   115,
     228,    -1,   266,    -1,    -1,   269,    -1,   174,    -1,    -1,
      -1,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,   283,
     266,   188,   286,   269,    -1,    -1,   193,    -1,   228,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,   266,    -1,
     286,   269,    -1,    -1,    -1,    -1,    -1,   214,   215,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,   173,   286,    -1,
      -1,   228,    -1,    -1,    -1,    -1,   266,    -1,    -1,   269,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   195,
      -1,   309,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   266,
      -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,   373,
      -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,
       8,    -1,    -1,    11,    -1,    -1,    -1,   373,   244,    17,
      18,    19,    -1,    -1,    -1,    -1,   252,   304,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   373,    34,    -1,   264,    37,
     266,    -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,     8,
      -1,    49,    11,    -1,    -1,    -1,    -1,   431,    17,    18,
      19,    -1,    -1,   373,    -1,    -1,    -1,    -1,    -1,   295,
      -1,    -1,    -1,    -1,    -1,    34,    74,    -1,    -1,    -1,
      -1,    -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,
      49,    -1,    -1,    -1,    -1,    -1,   373,    -1,    -1,   473,
      -1,    -1,   476,   477,   478,    -1,   480,   481,   482,   483,
     484,   485,    -1,    -1,   340,    74,    -1,   473,    -1,    -1,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
      -1,    -1,    -1,    -1,    -1,   473,   362,    -1,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   382,    -1,   384,    -1,
      -1,   387,    -1,   473,    -1,    -1,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,   174,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     188,    -1,    -1,    -1,    -1,   193,   473,    -1,    -1,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,    -1,
     169,    -1,    -1,    -1,    -1,   174,   214,   215,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   188,
     228,    -1,     8,    -1,   193,    11,    -1,    -1,    -1,    -1,
      -1,    17,    18,    19,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   214,   215,    -1,    34,    -1,
      -1,    37,    -1,   489,    -1,    -1,    42,    -1,   266,   228,
      -1,   269,    -1,    49,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,    -1,
      -1,     8,    -1,    -1,    11,    -1,    -1,    -1,    74,    -1,
      17,    18,    19,    -1,    -1,    -1,    -1,   266,    -1,    -1,
     269,    -1,    -1,    -1,    -1,    -1,    -1,    34,    -1,    -1,
      -1,    -1,    -1,    -1,   283,    42,    -1,   286,     8,    -1,
      -1,    11,    49,    -1,    -1,    -1,    -1,    17,    18,    19,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    34,    -1,    -1,    74,    -1,    -1,
      -1,    -1,    42,    -1,    -1,    -1,    -1,    -1,    -1,    49,
      -1,    -1,    -1,    -1,    -1,   373,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    74,    -1,    -1,    -1,   174,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   188,    -1,   373,    -1,    -1,   193,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   214,   215,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,   228,    -1,    -1,    -1,    -1,   174,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   188,    -1,    -1,    -1,   473,   193,    -1,   476,   477,
     478,    -1,   480,   481,   482,   483,   484,   485,    -1,    -1,
     266,    -1,    -1,   269,   174,    -1,    -1,   214,   215,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   283,   188,    -1,
     286,   228,    -1,   193,   473,    -1,    -1,   476,   477,   478,
      -1,   480,   481,   482,   483,   484,   485,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,   214,   215,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,   228,   266,
      -1,    -1,   269,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   283,    -1,    -1,   286,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   266,    -1,    -1,   269,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   373,    -1,    -1,
      -1,    -1,    -1,   283,    -1,    -1,   286,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   373,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,   404,    -1,    -1,
      -1,    -1,    -1,   373,    -1,    -1,    -1,   473,    -1,    -1,
     476,   477,   478,    -1,   480,   481,   482,   483,   484,   485,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   473,    -1,    -1,   476,
     477,   478,    -1,   480,   481,   482,   483,   484,   485,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,     3,
      -1,     5,    -1,   473,    -1,    -1,   476,   477,   478,    -1,
     480,   481,   482,   483,   484,   485,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,    -1,   169,    -1,   171,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,    -1,   169,    -1,   171,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    32,    33,
      34,    35,    36,    37,    38,    39,    40,    41,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      54,    55,    56,    57,    58,    59,    60,    61,    62,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      74,    -1,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    93,
      -1,    95,    96,    97,    98,    99,   100,    -1,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,   115,   116,   117,   118,   119,   120,   121,   122,   123,
     124,   125,   126,   127,   128,   129,   130,   131,   132,   133,
     134,   135,   136,   137,   138,   139,   140,   141,   142,   143,
     144,   145,   146,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,   159,   160,   161,   162,   163,
     164,   165,   166,   167,    -1,   169,    -1,   171,   172,   173,
      -1,   175,   176,   177,   178,   179,   180,   181,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,   193,
     194,   195,   196,   197,   198,   199,   200,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,   210,   211,   212,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,   223,
     224,   225,    -1,   227,    -1,   229,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,   266,   267,   268,    -1,   270,   271,   272,   273,
     274,   275,   276,   277,   278,   279,   280,   281,   282,   283,
     284,   285,   286,   287,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     304,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,   329,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,   342,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,   361,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,   378,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,   393,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,   403,
     404,   405,   406,   407,   408,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,   423,
     424,   425,   426,   427,   428,   429,   430,   431,   432,   433,
     434,   435,   436,   437,   438,   439,   440,    -1,   442,   443,
     444,   445,   446,   447,   448,   449,   450,   451,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    62,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    98,    99,   100,   101,   102,   103,
     104,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,   228,    -1,   230,   231,   232,   233,
     234,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,   367,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,   430,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    49,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    -1,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,   228,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,   265,    -1,   267,   268,   269,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    -1,    76,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,   166,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    68,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    86,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,   166,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,   228,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
     314,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
     424,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,   157,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,   281,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
     414,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,   282,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,   282,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    32,    33,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,   396,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
       4,    -1,    -1,    -1,    -1,     9,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    28,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,     5,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    37,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,    -1,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    -1,    46,    47,    48,    49,    50,    -1,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    73,
      -1,    -1,    -1,    77,    78,    79,    80,    81,    -1,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      -1,    95,    96,    97,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,   151,   152,   153,
     154,   155,   156,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,    -1,    -1,    -1,   171,   172,   173,
      -1,   175,    -1,   177,    -1,   179,   180,    -1,   182,   183,
     184,   185,   186,   187,    -1,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,    -1,   203,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
      -1,    -1,   216,    -1,   218,   219,   220,   221,   222,    -1,
      -1,   225,    -1,   227,    -1,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,    -1,   261,   262,   263,
     264,   265,    -1,   267,   268,    -1,   270,    -1,   272,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,   289,    -1,   291,    -1,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,   307,   308,   309,   310,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,    -1,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,    -1,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,   392,    -1,
     394,   395,    -1,   397,    -1,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,   411,   412,   413,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,   437,   438,    -1,   440,    -1,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,   458,   459,   460,   461,   462,   463,
     464,   465,   466,   467,   468,   469,   470,   471,   472,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    -1,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    -1,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,    -1,   152,   153,
     154,   155,    -1,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,   228,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,   240,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,    -1,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,    -1,   290,   291,   292,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,    -1,   308,   309,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,   349,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,   369,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,   390,   391,    -1,    -1,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,    -1,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,    -1,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   469,   470,   471,   472,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    -1,    46,    47,    48,
      49,    50,    -1,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    73,    -1,    -1,    -1,    77,    78,
      79,    80,    81,    -1,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    -1,    95,    96,    97,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,   151,   152,   153,   154,   155,   156,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,    -1,
      -1,    -1,   171,   172,   173,    -1,   175,    -1,   177,    -1,
     179,   180,    -1,   182,   183,   184,   185,   186,   187,    -1,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,    -1,   201,    -1,   203,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,    -1,    -1,   216,    -1,   218,
     219,   220,   221,   222,    -1,    -1,   225,    -1,   227,    -1,
      -1,   230,   231,   232,    -1,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,    -1,   261,   262,   263,   264,   265,    -1,   267,   268,
      -1,   270,    -1,   272,   273,   274,   275,   276,   277,    -1,
     279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,   288,
     289,    -1,   291,    -1,   293,   294,   295,   296,   297,   298,
     299,    -1,   301,   302,   303,    -1,   305,   306,   307,   308,
     309,   310,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,    -1,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,    -1,   346,   347,   348,
     349,    -1,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,    -1,   368,
     369,   370,   371,   372,    -1,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,   392,    -1,   394,   395,    -1,   397,    -1,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,    -1,
     409,   410,   411,   412,   413,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,   437,   438,
      -1,   440,    -1,   442,    -1,   444,   445,   446,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,   458,
     459,   460,   461,   462,   463,   464,   465,   466,   467,   468,
     469,   470,   471,   472,     3,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    20,    21,    22,    23,    24,    25,    26,    27,    -1,
      29,    30,    31,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
      39,    40,    -1,    42,    43,    44,    45,    46,    47,    48,
      -1,    50,    51,    52,    53,    -1,    55,    56,    57,    58,
      59,    60,    -1,    -1,    63,    64,    65,    66,    67,    -1,
      69,    70,    71,    72,    -1,    -1,    75,    -1,    77,    78,
      79,    80,    81,    82,    83,    84,    85,    -1,    87,    88,
      89,    90,    91,    92,    -1,    94,    95,    96,    97,    -1,
      -1,    -1,   101,    -1,    -1,    -1,   105,   106,   107,   108,
     109,   110,   111,   112,   113,   114,    -1,   116,    -1,   118,
     119,   120,   121,   122,   123,    -1,   125,   126,   127,   128,
     129,    -1,    -1,   132,   133,   134,   135,   136,    -1,    -1,
     139,   140,   141,    -1,   143,   144,   145,    -1,   147,   148,
     149,   150,    -1,   152,   153,   154,   155,    -1,    -1,   158,
      -1,   160,   161,   162,   163,    -1,   165,    -1,   167,   168,
      -1,   170,   171,   172,   173,   174,   175,    -1,   177,    -1,
      -1,   180,    -1,   182,   183,   184,   185,   186,   187,   188,
     189,   190,   191,   192,    -1,   194,   195,   196,   197,   198,
     199,    -1,   201,   202,    -1,   204,   205,   206,   207,   208,
     209,    -1,   211,    -1,   213,   214,   215,   216,   217,   218,
     219,   220,   221,   222,    -1,    -1,   225,   226,   227,   228,
      -1,   230,   231,   232,    -1,    -1,   235,   236,   237,   238,
     239,   240,   241,   242,   243,   244,   245,   246,   247,   248,
     249,   250,   251,   252,   253,   254,   255,   256,   257,   258,
     259,   260,   261,   262,   263,   264,    -1,    -1,   267,   268,
     269,   270,    -1,    -1,   273,   274,   275,   276,   277,    -1,
     279,   280,    -1,    -1,   283,   284,   285,    -1,    -1,   288,
      -1,   290,   291,   292,    -1,   294,   295,   296,   297,   298,
     299,   300,   301,   302,   303,    -1,   305,   306,    -1,   308,
     309,    -1,   311,   312,   313,    -1,   315,   316,   317,   318,
     319,   320,   321,   322,   323,   324,   325,   326,   327,   328,
      -1,   330,   331,   332,   333,   334,   335,   336,   337,   338,
     339,   340,   341,    -1,   343,   344,   345,   346,   347,   348,
      -1,   350,   351,   352,   353,   354,   355,   356,   357,   358,
     359,   360,    -1,   362,   363,   364,   365,   366,    -1,   368,
      -1,   370,   371,   372,   373,   374,   375,   376,   377,    -1,
     379,   380,   381,   382,   383,   384,   385,   386,   387,   388,
     389,   390,   391,    -1,    -1,   394,   395,    -1,   397,   398,
     399,   400,   401,   402,   403,    -1,   405,   406,    -1,    -1,
     409,   410,    -1,   412,    -1,    -1,   415,   416,   417,   418,
     419,   420,   421,   422,    -1,    -1,   425,   426,   427,   428,
     429,    -1,    -1,   432,   433,   434,   435,   436,    -1,   438,
      -1,   440,   441,   442,    -1,   444,   445,   446,    -1,    -1,
     449,    -1,    -1,   452,   453,   454,   455,   456,   457,     3,
      -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,    -1,
     469,   470,   471,   472,    -1,    -1,    20,    21,    22,    23,
      24,    25,    26,    27,    -1,    29,    30,    31,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,    39,    40,    -1,    42,    43,
      44,    45,    46,    47,    48,    -1,    50,    51,    52,    53,
      -1,    55,    56,    57,    58,    59,    60,    -1,    -1,    63,
      64,    65,    66,    67,    -1,    69,    70,    71,    72,    -1,
      -1,    75,    -1,    77,    78,    79,    80,    81,    82,    83,
      84,    85,    -1,    87,    88,    89,    90,    91,    92,    -1,
      94,    95,    96,    97,    -1,    -1,    -1,   101,    -1,    -1,
      -1,   105,   106,   107,   108,   109,   110,   111,   112,   113,
     114,    -1,   116,    -1,   118,   119,   120,   121,   122,   123,
      -1,   125,   126,   127,   128,   129,    -1,    -1,   132,   133,
     134,   135,   136,    -1,    -1,   139,   140,   141,    -1,   143,
     144,   145,    -1,   147,   148,   149,   150,    -1,   152,   153,
     154,   155,    -1,    -1,   158,    -1,   160,   161,   162,   163,
      -1,   165,    -1,   167,   168,    -1,   170,   171,   172,   173,
     174,   175,    -1,   177,    -1,    -1,   180,    -1,   182,   183,
     184,   185,   186,   187,   188,   189,   190,   191,   192,    -1,
     194,   195,   196,   197,   198,   199,    -1,   201,   202,    -1,
     204,   205,   206,   207,   208,   209,    -1,   211,    -1,   213,
     214,   215,   216,   217,   218,   219,   220,   221,   222,    -1,
      -1,   225,   226,   227,   228,    -1,   230,   231,   232,    -1,
      -1,   235,   236,   237,   238,   239,    -1,   241,   242,   243,
     244,   245,   246,   247,   248,   249,   250,   251,   252,   253,
     254,   255,   256,   257,   258,   259,   260,   261,   262,   263,
     264,    -1,    -1,   267,   268,   269,   270,    -1,    -1,   273,
     274,   275,   276,   277,    -1,   279,   280,    -1,    -1,   283,
     284,   285,    -1,    -1,   288,    -1,   290,   291,   292,    -1,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
      -1,   305,   306,    -1,   308,   309,    -1,   311,   312,   313,
      -1,   315,   316,   317,   318,   319,   320,   321,   322,   323,
     324,   325,   326,   327,   328,    -1,   330,   331,   332,   333,
     334,   335,   336,   337,   338,   339,   340,   341,    -1,   343,
     344,   345,   346,   347,   348,    -1,   350,   351,   352,   353,
     354,   355,   356,   357,   358,   359,   360,    -1,   362,   363,
     364,   365,   366,    -1,   368,    -1,   370,   371,   372,   373,
     374,   375,   376,   377,    -1,   379,   380,   381,   382,   383,
     384,   385,   386,   387,   388,   389,    -1,   391,    -1,    -1,
     394,   395,    -1,   397,   398,   399,   400,   401,   402,   403,
      -1,   405,   406,    -1,    -1,   409,   410,    -1,   412,    -1,
      -1,   415,   416,   417,   418,   419,   420,   421,   422,    -1,
      -1,   425,   426,   427,   428,   429,    -1,    -1,   432,   433,
     434,   435,   436,    -1,   438,    -1,   440,   441,   442,    -1,
     444,   445,   446,    -1,    -1,   449,    -1,    -1,   452,   453,
     454,   455,   456,   457,    -1,    -1,    -1,    -1,    -1,    -1,
      -1,    -1,    -1,    -1,    -1,   469,   470,   471,   472
};

  /* YYSTOS[STATE-NUM] -- The (internal number of the) accessing
     symbol of state STATE-NUM.  */
static const yytype_uint16 yystos[] =
{
       0,    20,    30,    32,    33,    48,    57,    69,    80,    91,
      93,   111,   125,   135,   142,   150,   152,   153,   165,   192,
     231,   308,   311,   339,   347,   361,   368,   372,   382,   396,
     432,   437,   451,   475,   489,   500,   501,   502,   503,   506,
     507,   509,   511,   515,   517,   518,   519,   520,   521,   522,
     566,   703,   706,   707,   708,   754,   757,   759,   766,   767,
     768,   774,   775,   776,   777,   778,   785,   796,   803,   807,
     808,   809,   813,   827,   830,   835,   836,   853,   855,   858,
     860,   862,   409,   454,   516,   196,   354,   362,   396,   444,
     516,     3,    20,    21,    22,    23,    24,    25,    26,    27,
      29,    30,    31,    39,    40,    42,    43,    44,    45,    46,
      47,    48,    49,    50,    51,    52,    53,    55,    56,    57,
      58,    59,    60,    63,    64,    65,    66,    67,    69,    70,
      71,    72,    73,    75,    77,    78,    79,    80,    81,    82,
      83,    84,    85,    87,    88,    89,    90,    91,    92,    94,
      95,    96,    97,   101,   105,   106,   107,   108,   109,   110,
     111,   112,   113,   114,   116,   118,   119,   120,   121,   122,
     123,   125,   126,   127,   128,   129,   132,   133,   134,   135,
     136,   139,   140,   141,   143,   144,   145,   147,   148,   149,
     150,   151,   152,   153,   154,   155,   156,   158,   160,   161,
     162,   163,   165,   167,   168,   170,   171,   172,   173,   174,
     175,   177,   179,   180,   182,   183,   184,   185,   186,   187,
     188,   189,   190,   191,   192,   194,   195,   196,   197,   198,
     199,   201,   202,   203,   204,   205,   206,   207,   208,   209,
     211,   213,   214,   215,   216,   217,   218,   219,   220,   221,
     222,   225,   226,   227,   228,   230,   231,   232,   235,   236,
     237,   238,   239,   240,   241,   242,   243,   244,   245,   246,
     247,   248,   249,   250,   251,   252,   253,   254,   255,   256,
     257,   258,   259,   260,   261,   262,   263,   264,   265,   267,
     268,   269,   270,   272,   273,   274,   275,   276,   277,   279,
     280,   283,   284,   285,   288,   289,   290,   291,   292,   293,
     294,   295,   296,   297,   298,   299,   300,   301,   302,   303,
     305,   306,   307,   308,   309,   310,   311,   312,   313,   315,
     316,   317,   318,   319,   320,   321,   322,   323,   324,   325,
     326,   327,   328,   330,   331,   332,   333,   334,   335,   336,
     337,   338,   339,   340,   341,   343,   344,   345,   346,   347,
     348,   349,   350,   351,   352,   353,   354,   355,   356,   357,
     358,   359,   360,   362,   363,   364,   365,   366,   368,   369,
     370,   371,   372,   373,   374,   375,   376,   377,   379,   380,
     381,   382,   383,   384,   385,   386,   387,   388,   389,   390,
     391,   392,   394,   395,   397,   398,   399,   400,   401,   402,
     403,   405,   406,   409,   410,   411,   412,   413,   415,   416,
     417,   418,   419,   420,   421,   422,   425,   426,   427,   428,
     429,   432,   433,   434,   435,   436,   437,   438,   440,   441,
     442,   444,   445,   446,   449,   452,   453,   454,   455,   456,
     457,   458,   459,   460,   461,   462,   463,   464,   465,   466,
     467,   468,   469,   470,   471,   472,   627,   688,   692,   695,
     868,   869,   870,   516,    51,   489,   848,   137,   171,   175,
     232,   239,   286,   354,   400,   402,   424,   427,   443,   752,
     765,   828,     3,    28,   240,   311,   390,   686,   692,   868,
      22,    75,    90,   145,   154,   166,   171,   196,   239,   243,
     306,   320,   351,   354,   362,   365,   384,   396,   403,   412,
     444,   863,   864,   867,   516,   686,    93,   441,   489,   511,
     517,   799,   803,   807,   809,   855,   108,    69,   108,     5,
     691,   859,   692,   686,    28,   405,   409,   508,   692,   755,
     756,   516,    28,   130,   529,   530,   232,   354,   366,   405,
     508,   769,   770,   516,     5,   282,   582,   684,   692,   693,
     170,   489,   832,   489,   327,   523,   524,   686,   523,   518,
     519,   522,     0,   492,    28,   405,   409,   437,   508,   517,
     146,   210,   287,   423,   531,   532,   518,   520,   521,   493,
     441,   797,   120,   206,   429,   187,   684,   686,   187,   684,
     187,   582,   187,   684,   489,   487,   491,   675,   677,   511,
     517,   705,   807,   809,   684,   684,   400,   402,   400,   402,
     337,   187,   692,   684,   327,   362,   396,   444,   196,   684,
      28,   686,   245,   412,   107,   396,   444,   357,   187,   692,
     697,   865,   187,   685,   686,   187,   686,   489,   510,   752,
     799,     3,    49,    50,    52,    53,    65,    66,    73,   112,
     113,   151,   156,   162,   179,   203,   208,   209,   211,   240,
     259,   261,   265,   272,   274,   289,   293,   307,   310,   324,
     349,   369,   376,   390,   392,   405,   406,   411,   413,   417,
     437,   438,   458,   459,   460,   461,   462,   463,   464,   465,
     466,   467,   468,   800,   802,   803,   805,   806,   868,   872,
     797,   691,   691,   478,   489,   489,   704,   472,   216,   491,
     281,     4,     6,     7,     8,     9,    10,    36,    50,    52,
      53,    61,    62,    65,    66,    73,    75,    98,    99,   100,
     101,   102,   103,   104,   112,   113,   115,   134,   151,   156,
     157,   162,   208,   209,   211,   233,   234,   259,   261,   266,
     271,   272,   274,   283,   293,   307,   324,   349,   367,   376,
     392,   405,   406,   411,   413,   414,   417,   430,   438,   473,
     480,   481,   482,   487,   489,   495,   497,   498,   518,   597,
     600,   603,   604,   605,   607,   608,   609,   610,   612,   613,
     624,   626,   627,   628,   630,   643,   644,   650,   669,   674,
     681,   682,   688,   689,   690,   691,   692,   680,   681,   769,
     691,   769,   472,   169,   407,   478,   489,   684,   482,   677,
       3,   168,   170,   441,   803,   831,   833,   168,   834,   624,
     654,   523,   493,   489,   699,   490,   490,   502,   472,   216,
      28,   130,   528,   528,    55,   528,   159,   164,   229,   278,
     537,   539,   540,   559,   561,   562,   563,   531,   532,   489,
     684,   169,   212,   512,   582,   151,    24,    30,   135,   285,
     335,   339,   368,   434,   790,   793,   794,   335,   151,    37,
      56,   106,   195,   244,   252,   264,   295,   335,   340,   362,
     368,   382,   779,   782,   793,   151,   335,   368,   793,   151,
     335,   368,   793,     3,    28,    45,    51,    75,    82,    94,
     101,   130,   168,   170,   174,   188,   202,   214,   215,   217,
     226,   228,   240,   260,   269,   290,   292,   345,   373,   390,
     398,   417,   439,   441,   482,   490,   624,   656,   657,   694,
     700,   868,   873,   624,   676,     3,    28,    32,    33,    34,
      35,    36,    37,    38,    41,    54,    61,    62,    68,    74,
      76,    86,    93,    98,    99,   100,   102,   103,   104,   115,
     117,   124,   130,   131,   137,   138,   142,   146,   157,   159,
     164,   166,   169,   176,   178,   181,   193,   200,   210,   212,
     223,   224,   229,   233,   234,   266,   271,   278,   281,   282,
     286,   287,   304,   314,   329,   342,   361,   367,   378,   393,
     396,   404,   407,   408,   414,   423,   424,   430,   431,   437,
     439,   443,   447,   448,   450,   451,   482,   687,   701,   868,
     872,   874,   675,   490,   489,   742,   281,   752,   266,   504,
     281,   444,   187,   684,   187,   684,   857,   684,    82,   762,
     489,   829,   455,    83,   127,   298,   401,   151,   491,   698,
      59,   341,   493,   866,   151,   493,   866,   151,   281,   654,
     396,   490,   493,     4,   157,   281,   414,   480,   481,   690,
     691,   781,   784,   798,   800,   801,   804,   799,   489,   843,
     847,   771,   773,   781,   804,   656,     3,    45,    50,    51,
      52,    53,    65,    66,    75,    82,    94,   101,   112,   113,
     162,   168,   170,   174,   188,   202,   208,   209,   211,   214,
     215,   217,   226,   228,   240,   259,   260,   261,   269,   274,
     290,   292,   324,   345,   349,   369,   373,   376,   390,   398,
     405,   406,   417,   438,   441,   593,   594,   596,   598,   600,
     602,   604,   605,   606,   608,   609,   612,   613,   658,   696,
     868,   871,    37,   227,   692,   489,   678,   487,   440,   611,
     624,   673,   489,   611,   611,   489,   164,   489,   489,   489,
     599,   599,   310,   518,   489,   489,   601,   489,   489,    65,
      66,   611,   624,   489,   599,   489,   489,   489,   489,   489,
     453,   475,   489,   614,   489,   614,   489,   489,   489,   624,
     624,   624,   654,   655,   518,   624,   654,   645,   646,   692,
     693,     9,   678,   677,   691,   489,   489,   690,   691,     3,
       8,    11,    17,    18,    19,    34,    37,    42,    49,    74,
     174,   188,   193,   214,   215,   228,   266,   269,   283,   286,
     373,   473,   476,   477,   478,   480,   481,   482,   483,   484,
     485,   648,   649,   650,   652,   452,   631,   678,    15,   292,
     624,    15,   212,   493,   525,   489,   691,   678,   677,   525,
       3,   115,   232,   613,   691,   772,   781,    97,   115,   773,
     115,   773,   684,   490,   493,   797,   490,   493,   524,   685,
      37,   227,   520,   520,   533,   534,   624,   520,   161,   263,
     553,   218,   264,   323,   371,   429,    28,   548,   624,   480,
     481,   549,   550,   624,   626,   559,   560,   540,   539,   537,
     538,   164,   562,   276,   564,   537,   559,   654,   699,   512,
     684,   811,   368,    37,   692,   684,    68,    76,    86,   166,
     187,   314,   424,   692,   723,   733,   748,    76,    86,   758,
      86,   758,   489,   407,   489,   721,   238,   427,   721,    86,
     493,   407,   684,   596,   781,    55,   783,   781,   781,   106,
     244,   252,    55,   407,   451,   475,   780,   257,   354,   780,
     782,   582,    86,   407,   758,   354,   684,   407,   354,   656,
     656,   657,   490,   493,   531,   532,    13,    14,   488,   494,
     407,   692,   741,   746,   451,   846,   684,   327,   444,   151,
      93,   505,   706,   759,   853,   860,   684,   684,   266,   779,
     861,   266,   489,   742,    37,   742,   187,   692,   736,   763,
     490,   656,    37,   865,   687,   491,   697,   685,   686,   686,
     697,   490,   187,   684,   857,   799,   805,     4,   690,     4,
     690,   701,   845,   852,    51,    95,   121,   140,   144,   165,
     168,   182,   271,   279,   321,   849,   493,   490,   493,   489,
     596,   489,    36,   595,   109,   110,   184,   185,   246,   247,
     248,   249,   250,   251,   254,   255,   358,   359,   469,   470,
     489,   615,   616,   617,   618,   619,   620,   621,   622,   623,
     490,   493,   599,   705,   654,   675,   655,   489,   447,   670,
     671,   624,   654,   489,   690,   690,   654,     3,   615,   616,
     617,   618,   619,   620,   621,   622,   659,   660,   691,   690,
     690,   690,   611,   611,   624,     8,    17,    18,    19,   476,
     477,   478,   480,   481,   482,   483,   484,   485,   648,   653,
     692,   624,   661,   480,   481,   489,   625,   626,   650,   663,
     674,   490,   654,   624,   654,   664,   405,   405,   690,   690,
     624,    54,   169,   224,   408,   624,   654,   667,   624,   488,
     490,   493,   493,   496,   494,   690,   624,   623,   623,   594,
     624,   624,   624,   624,     5,   701,   702,   405,    41,   393,
     679,   697,   624,   624,   489,   518,   668,   130,   157,   266,
     271,   276,   414,   425,   624,   271,   489,   624,   407,    49,
     174,   188,   193,   228,   373,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,    28,    35,   378,   647,   178,
     160,   632,   624,   349,   489,   644,   624,   175,   232,   396,
     400,   402,   427,   526,   684,   682,   169,   567,   656,   567,
     489,   691,   490,   684,   831,   684,   835,   624,   490,   489,
     493,    38,   124,   431,   535,   349,   350,   480,   481,   550,
     552,   626,   371,   218,   282,   493,     4,   551,   690,   551,
     349,   350,   552,   683,   684,   270,   375,   565,   560,   538,
     490,   431,   514,    37,   115,   294,   489,   517,   810,   489,
     692,   815,   824,   826,   692,   335,   793,   489,   187,   733,
     686,   218,   266,   218,   431,   489,   726,   594,   686,   692,
     187,   686,   187,   692,    24,   135,   368,   701,   716,   731,
     789,   792,   686,   701,   725,   745,   686,   790,   686,   335,
     368,   779,   793,   781,   697,   686,   781,   697,   686,   781,
     335,   368,   793,   686,   686,   686,   686,   335,   368,   793,
     686,   686,   531,   531,   531,   439,   657,   490,   624,   624,
     624,   676,   319,   842,   490,   493,   279,   169,   407,   837,
     489,   444,   684,   692,   752,   489,   151,   151,   228,   692,
     723,   733,   737,   740,   749,   751,   451,   453,   728,   150,
     517,   451,   764,   266,   281,   490,   624,   866,   687,   866,
     281,   866,   266,    37,   482,   489,   781,   804,   844,   490,
     493,    37,   841,   691,   841,   266,   271,   321,   841,   841,
     771,   658,    36,   595,   592,   692,   487,   487,   690,   407,
     407,   407,   407,   594,   490,   488,   654,   624,   138,   671,
     672,    37,   490,   624,   490,   490,   490,   490,   169,   490,
     490,   490,   493,   490,   491,   304,   662,   490,   625,   625,
     624,    11,    17,    18,    19,   193,   214,   283,   476,   477,
     478,   480,   481,   482,   483,   484,   485,   650,   625,   490,
     490,   164,   169,   665,   666,   490,   472,   472,   490,   490,
      37,   667,   654,   667,   667,   169,   490,    37,   678,   624,
     645,   624,   490,   490,   472,   625,   625,   144,   654,   169,
     130,   157,   271,   276,   414,   425,   489,   144,   653,   624,
     393,   679,   624,   668,   624,   407,   489,   518,   489,   489,
     291,   636,   400,   402,   400,   402,   684,   396,   527,   527,
     527,   223,   350,   489,   518,   568,   569,   570,   574,   575,
     582,   583,   627,   629,   630,   692,   448,   588,   531,   588,
     690,   623,   699,   705,   534,   283,   648,   651,   474,   536,
       4,   690,   552,   282,   429,   549,   493,   237,   568,   448,
     513,   692,   437,   395,   430,   819,   692,   814,   823,   281,
     816,   820,   826,   678,   493,   567,   478,   407,   624,   266,
     748,   489,   151,   489,   726,   196,   746,   709,   285,   719,
     709,    24,   135,   339,   340,   368,   786,   787,   788,   794,
     795,   151,   866,   151,   866,   716,   731,   716,   691,   712,
     490,   493,   478,   491,   490,   493,   407,   354,    86,   407,
     758,   354,   407,   407,   407,   354,   490,   490,   490,   657,
     488,   385,   386,   691,   851,   741,   842,   169,   684,   742,
     504,   396,   746,   684,   684,   857,   684,   490,   493,   279,
     721,   279,   281,   720,   686,   451,   856,   721,    37,   151,
     684,   697,   151,   804,   839,   850,   845,   691,   691,   271,
     746,   482,   746,   691,   691,   490,   487,   490,   493,   594,
     690,   488,   690,   490,   616,   618,   619,   620,   619,   620,
     620,   490,   404,   624,   142,   594,   490,   624,   624,   653,
     624,   665,   594,   625,   625,   625,   625,   130,   266,   276,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     624,   624,   666,   665,   614,   614,   594,   490,   490,   490,
     654,   594,   490,   623,   624,    34,    34,   624,   490,   624,
     169,   489,   658,   624,   490,   144,   625,   625,   144,   144,
     624,   624,   532,   448,   489,   637,   692,   527,   527,   527,
     527,   684,   684,   684,   518,   583,   169,   494,   518,   569,
     575,   692,    37,   576,   577,   692,   493,    94,   170,   202,
     217,   226,   260,   345,   579,    16,   481,   572,   573,   577,
      37,   576,   578,   692,   475,   587,   677,   624,   178,   554,
     490,   554,   490,   490,   489,   536,   161,   222,   282,   684,
     624,   342,   818,   436,   678,   490,   493,    84,   818,   490,
     493,   815,   513,   624,   686,   490,   151,   746,   733,   746,
     709,   736,   490,   117,   200,   264,   266,   732,   489,   743,
     173,   115,   186,   266,   721,   780,   107,   115,   173,   266,
     384,   387,   721,   782,   368,   788,   418,   686,   692,   792,
       3,    45,    51,    75,    82,    94,   101,   168,   170,   174,
     188,   202,   214,   215,   217,   226,   228,   240,   260,   265,
     269,   283,   290,   292,   345,   369,   373,   390,   398,   417,
     441,   480,   481,   594,   651,   691,   694,   710,   747,   781,
     868,   874,   701,   745,   686,   686,   686,   686,   686,   686,
     686,   686,   686,   686,   531,   780,   851,   684,   489,   764,
     187,   684,   490,   861,   489,    37,   730,   728,   737,    80,
     510,   107,   264,   517,   736,   431,   761,   866,   857,   490,
     493,   746,   595,   690,   595,   692,   488,   488,   624,   490,
     490,   666,   169,   130,   276,   489,   490,   490,   624,   624,
     624,   658,   490,   624,    34,    34,   624,   624,   144,   490,
     490,   624,   638,   692,   684,   684,   684,   684,   577,   578,
     489,   692,   490,   490,   494,   692,   693,   398,   545,   546,
     489,   569,   217,   290,   580,   569,   580,   217,   579,   580,
     217,   487,   487,   572,   546,   489,   692,   546,   489,   288,
      55,   181,   558,   691,   558,   691,   653,   681,   517,   294,
     517,   814,   281,   489,   812,   478,   826,   818,   709,   733,
     490,   490,   451,   739,   118,   189,   198,   117,   433,   716,
     734,    68,    74,    86,   115,   117,   173,   200,   266,   271,
     314,   329,   424,   714,   715,   727,    31,    55,   753,   187,
     271,   781,   624,   753,   271,   480,   481,   784,   692,   594,
     866,   866,   240,   390,   694,   698,   478,   407,   407,   490,
     843,   431,   838,   840,   329,   746,    37,   266,   489,   764,
     740,   150,   517,   148,   194,   720,   120,   135,   313,   856,
     107,   451,   854,   281,   692,   760,   489,    37,   850,   488,
     594,   625,   169,   489,   658,   490,   624,   624,   624,   490,
     300,   639,   584,   585,   629,   490,   576,   692,   489,     4,
       9,   541,   543,   544,   692,   685,   569,   281,   431,   581,
     569,   217,   569,   494,   692,   494,   692,   589,   590,   692,
     489,   589,   692,   489,   555,   556,   557,   624,   624,   450,
     633,   633,   490,   819,    86,   489,   629,   692,   817,   825,
     131,   624,   329,   739,   489,   729,   709,   490,   493,   489,
     697,   686,   625,   753,   118,   189,   117,   271,   218,   684,
     739,   115,    37,   151,    74,   591,   698,   484,   710,   686,
     686,   780,   122,   692,   490,   517,   151,    37,   490,   686,
     856,    28,    79,    87,   116,   186,   197,   384,   387,   724,
     724,   350,   350,    60,    68,   232,   684,   825,   625,   658,
     490,    55,   531,   490,   493,    37,   586,   490,   685,   303,
     484,   303,   350,   484,   489,   489,   490,   624,   489,   569,
     581,   692,   494,   692,   494,   490,   493,   594,   589,   490,
     490,   493,   634,   635,   692,   431,   542,   542,   436,   686,
     624,    74,   821,   821,   490,   493,   267,   429,   684,   709,
     701,   735,   738,   716,   624,   266,   715,    37,   739,   742,
     186,   697,   431,   791,   484,   418,   843,   691,   493,   764,
     854,   684,   517,   728,   510,    68,   284,    68,   761,   490,
     490,   654,   322,   350,   640,   587,   584,   489,   490,   692,
     541,   685,   482,   571,   692,   571,   692,   590,   591,   490,
     556,   493,    37,   352,   517,   490,   697,   697,   822,   822,
     588,   817,   368,   742,   478,   490,   493,   490,   186,   242,
     750,   489,   711,   624,   418,   407,    37,   489,   854,   720,
     856,   284,   284,   489,   764,    49,    97,   420,   624,   641,
     642,   641,   490,   589,   490,   493,   490,   490,     9,    12,
     488,   571,   488,   571,   635,   637,   544,   821,   535,   535,
     824,   750,   710,   738,   264,   722,   711,   170,   299,   374,
     281,   717,   718,   744,   779,   684,   517,   825,   588,   642,
     349,   163,   309,   163,   309,   490,     9,   336,   547,    12,
       9,   481,   488,    15,   488,   822,   536,   536,   588,   718,
     198,   120,   429,   281,   744,   281,   717,   490,   329,   854,
     490,    34,   490,   489,     9,   489,   570,   481,   570,    15,
     535,   709,    59,   264,   341,   368,   713,   713,   692,   764,
     642,     9,   692,   570,   570,   536,    23,   115,   271,   490,
     588,   490
};

  /* YYR1[YYN] -- Symbol number of symbol that rule YYN derives.  */
static const yytype_uint16 yyr1[] =
{
       0,   499,   500,   501,   501,   502,   502,   502,   502,   502,
     502,   502,   502,   502,   502,   502,   502,   502,   502,   502,
     502,   502,   502,   502,   502,   502,   502,   502,   502,   502,
     502,   502,   502,   502,   502,   502,   502,   502,   502,   502,
     502,   503,   503,   504,   504,   505,   505,   505,   505,   506,
     506,   506,   506,   506,   507,   507,   508,   508,   509,   509,
     509,   510,   510,   511,   512,   512,   512,   513,   513,   514,
     514,   515,   515,   515,   515,   515,   515,   516,   516,   516,
     517,   517,   518,   518,   519,   519,   519,   519,   519,   519,
     519,   519,   520,   520,   521,   521,   521,   521,   521,   521,
     521,   522,   522,   522,   523,   523,   524,   525,   525,   526,
     526,   526,   526,   526,   526,   526,   526,   526,   527,   527,
     528,   528,   528,   529,   529,   530,   530,   531,   531,   532,
     533,   533,   534,   534,   535,   535,   535,   536,   536,   536,
     537,   537,   537,   537,   538,   538,   539,   539,   539,   539,
     540,   540,   541,   541,   541,   541,   541,   541,   542,   542,
     543,   543,   544,   544,   544,   544,   545,   546,   546,   547,
     547,   548,   548,   549,   550,   550,   550,   551,   551,   552,
     552,   553,   553,   554,   554,   555,   555,   556,   556,   557,
     558,   558,   559,   559,   560,   560,   561,   561,   562,   563,
     563,   563,   563,   564,   564,   565,   565,   565,   566,   566,
     567,   567,   568,   568,   569,   569,   569,   569,   569,   569,
     569,   569,   570,   570,   570,   571,   571,   571,   571,   571,
     571,   572,   572,   572,   572,   573,   573,   574,   574,   575,
     575,   575,   575,   575,   575,   576,   576,   576,   576,   577,
     577,   578,   578,   578,   578,   578,   579,   579,   579,   579,
     580,   580,   581,   581,   582,   582,   582,   582,   583,   583,
     584,   585,   585,   586,   586,   587,   587,   588,   588,   589,
     589,   590,   591,   591,   592,   592,   593,   593,   594,   594,
     594,   594,   594,   594,   594,   594,   595,   595,   595,   596,
     596,   596,   596,   596,   596,   596,   597,   597,   597,   597,
     598,   599,   599,   600,   600,   600,   600,   600,   600,   600,
     600,   600,   600,   600,   601,   601,   602,   602,   603,   603,
     604,   605,   606,   606,   607,   607,   608,   609,   610,   610,
     610,   610,   610,   610,   611,   611,   612,   612,   612,   612,
     613,   614,   614,   614,   615,   615,   616,   616,   617,   617,
     618,   618,   619,   619,   620,   620,   621,   621,   622,   622,
     623,   623,   623,   623,   623,   623,   623,   623,   623,   623,
     623,   623,   623,   623,   623,   623,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   624,   624,   624,   624,   624,
     624,   624,   624,   624,   624,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   625,   625,
     625,   625,   625,   625,   625,   625,   625,   625,   626,   626,
     626,   626,   626,   626,   626,   626,   626,   626,   626,   627,
     627,   627,   627,   627,   627,   627,   628,   628,   629,   629,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   630,
     630,   630,   630,   630,   630,   630,   630,   630,   630,   631,
     631,   632,   632,   633,   633,   634,   634,   635,   636,   636,
     636,   637,   638,   638,   639,   639,   640,   640,   640,   641,
     641,   642,   642,   642,   642,   642,   643,   643,   644,   644,
     645,   646,   646,   647,   647,   647,   648,   648,   649,   649,
     649,   649,   649,   649,   649,   649,   649,   649,   649,   649,
     650,   650,   651,   651,   652,   652,   652,   652,   652,   652,
     652,   652,   653,   653,   654,   654,   655,   655,   656,   656,
     657,   657,   657,   658,   658,   659,   659,   660,   660,   660,
     660,   660,   660,   660,   660,   660,   660,   661,   661,   662,
     663,   663,   664,   664,   664,   664,   664,   664,   665,   666,
     667,   667,   667,   668,   668,   669,   670,   670,   671,   672,
     672,   673,   673,   674,   674,   675,   675,   675,   675,   676,
     676,   677,   677,   678,   678,   679,   679,   680,   680,   681,
     681,   682,   682,   682,   682,   683,   683,   684,   684,   685,
     685,   686,   687,   688,   688,   689,   689,   689,   689,   689,
     689,   689,   689,   689,   689,   689,   689,   689,   689,   690,
     691,   692,   692,   692,   693,   693,   694,   694,   694,   695,
     695,   695,   696,   696,   696,   697,   697,   698,   698,   699,
     699,   700,   701,   701,   701,   701,   702,   702,   703,   704,
     704,   705,   705,   705,   705,   706,   706,   707,   708,   709,
     709,   710,   710,   710,   710,   710,   710,   711,   711,   712,
     713,   713,   713,   713,   713,   714,   714,   714,   714,   715,
     715,   715,   715,   715,   715,   715,   715,   716,   717,   718,
     718,   718,   718,   718,   719,   719,   720,   720,   720,   720,
     721,   722,   722,   723,   723,   724,   724,   724,   724,   724,
     724,   724,   724,   725,   725,   726,   727,   727,   727,   727,
     728,   728,   728,   728,   729,   730,   730,   730,   731,   732,
     732,   732,   732,   732,   732,   733,   734,   734,   735,   735,
     736,   737,   737,   737,   738,   738,   739,   739,   740,   740,
     741,   742,   742,   743,   743,   744,   745,   745,   745,   745,
     746,   746,   747,   747,   747,   748,   748,   748,   748,   748,
     748,   749,   749,   750,   750,   750,   750,   751,   752,   752,
     752,   752,   752,   752,   752,   752,   753,   753,   754,   755,
     755,   756,   756,   756,   757,   757,   757,   757,   757,   757,
     757,   757,   757,   757,   757,   757,   757,   758,   758,   759,
     759,   760,   761,   761,   762,   762,   763,   763,   764,   764,
     765,   765,   766,   767,   767,   767,   768,   768,   768,   769,
     769,   769,   769,   770,   770,   770,   770,   771,   771,   772,
     772,   772,   772,   772,   772,   772,   773,   773,   774,   774,
     774,   774,   774,   774,   775,   776,   777,   777,   777,   777,
     778,   778,   779,   779,   780,   780,   780,   781,   781,   781,
     781,   782,   782,   782,   782,   782,   782,   782,   782,   782,
     782,   782,   782,   782,   782,   783,   783,   784,   784,   784,
     785,   785,   785,   785,   785,   785,   785,   785,   786,   786,
     787,   787,   788,   788,   788,   788,   789,   789,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   790,   790,   790,
     790,   790,   790,   790,   790,   790,   790,   791,   791,   792,
     792,   792,   792,   793,   793,   794,   795,   795,   795,   796,
     796,   796,   796,   797,   797,   798,   798,   798,   799,   799,
     799,   799,   799,   800,   800,   800,   801,   801,   802,   802,
     803,   803,   804,   804,   804,   804,   805,   806,   806,   807,
     808,   808,   809,   810,   810,   810,   810,   810,   811,   811,
     812,   812,   812,   813,   813,   814,   815,   815,   816,   816,
     816,   817,   817,   817,   818,   818,   819,   819,   820,   820,
     821,   821,   822,   822,   823,   823,   824,   824,   825,   825,
     826,   827,   828,   828,   829,   829,   830,   830,   830,   830,
     830,   831,   831,   831,   831,   831,   832,   832,   833,   833,
     834,   834,   835,   835,   836,   836,   837,   837,   838,   838,
     839,   839,   840,   840,   841,   841,   842,   842,   843,   843,
     844,   844,   844,   844,   844,   845,   846,   846,   847,   847,
     848,   848,   849,   849,   849,   849,   849,   849,   849,   849,
     849,   849,   849,   849,   849,   849,   850,   851,   851,   851,
     852,   852,   853,   853,   853,   853,   854,   854,   854,   854,
     855,   855,   856,   856,   856,   857,   858,   859,   860,   860,
     861,   861,   862,   862,   862,   862,   862,   862,   863,   863,
     863,   863,   863,   863,   863,   863,   863,   863,   863,   863,
     863,   863,   863,   864,   864,   864,   864,   864,   864,   864,
     865,   865,   866,   866,   866,   867,   867,   867,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   868,   868,   868,
     868,   868,   868,   868,   868,   868,   868,   869,   869,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   869,   869,
     869,   869,   869,   869,   869,   869,   869,   869,   870,   870,
     870,   870,   870,   870,   870,   870,   870,   870,   870,   870,
     870,   870,   870,   870,   870,   870,   870,   870,   870,   870,
     870,   870,   870,   870,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   871,
     871,   871,   871,   871,   871,   871,   871,   871,   871,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     872,   872,   872,   872,   872,   872,   872,   872,   872,   872,
     873,   873,   873,   873,   873,   873,   873,   873,   873,   873,
     873,   873,   873,   873,   873,   873,   873,   873,   873,   873,
     873,   873,   873,   873,   873,   873,   873,   874,   874,   874,
     874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
     874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
     874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
     874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
     874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
     874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
     874,   874,   874,   874,   874,   874,   874,   874,   874,   874,
     874,   874,   874,   874,   874,   874
};

  /* YYR2[YYN] -- Number of symbols on the right hand side of rule YYN.  */
static const yytype_uint8 yyr2[] =
{
       0,     2,     1,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       0,     4,     7,     2,     0,     1,     1,     1,     1,     2,
       2,     3,     4,     2,     1,     1,     1,     3,     3,     9,
      12,     3,     0,     7,     1,     2,     3,     2,     0,     2,
       0,     2,     2,     2,     2,     2,     2,     1,     1,     0,
       1,     1,     3,     3,     1,     2,     4,     4,     2,     3,
       5,     5,     1,     1,    10,    10,     1,     2,     4,     4,
       4,     2,     2,     3,     1,     3,     6,     2,     0,     3,
       3,     4,     4,     4,     4,     3,     2,     1,     1,     0,
       1,     1,     0,     1,     5,     1,     0,     1,     0,     3,
       1,     3,     4,     3,     1,     1,     0,     2,     2,     0,
       2,     2,     1,     1,     1,     0,     2,     4,     5,     4,
       2,     3,     2,     2,     2,     2,     1,     2,     3,     0,
       1,     0,     5,     1,     4,     6,     2,     1,     0,     4,
       0,     1,     1,     1,     1,     2,     2,     1,     1,     1,
       1,     1,     1,     3,     0,     1,     3,     1,     1,     2,
       2,     0,     1,     3,     1,     0,     1,     2,     3,     2,
       4,     2,     3,     2,     0,     1,     2,     0,     4,     5,
       2,     0,     1,     3,     3,     3,     3,     3,     3,     1,
       4,     1,     5,     3,     4,     0,     1,     2,     3,     3,
       4,     9,     8,     9,     8,     1,     2,     1,     2,     3,
       4,     5,     4,     5,     4,     5,     2,     4,     1,     1,
       0,     1,     4,     5,     4,     0,     2,     2,     2,     1,
       1,     0,     4,     2,     1,     2,     2,     4,     2,     6,
       2,     1,     3,     4,     0,     2,     0,     2,     0,     1,
       3,     3,     2,     0,     2,     4,     1,     1,     2,     3,
       5,     6,     2,     3,     5,     5,     3,     4,     0,     1,
       1,     1,     1,     1,     2,     4,     1,     1,     1,     1,
       2,     3,     0,     1,     1,     1,     1,     1,     2,     2,
       2,     2,     2,     1,     3,     0,     1,     1,     1,     1,
       5,     2,     1,     1,     1,     1,     4,     1,     2,     2,
       1,     3,     3,     2,     1,     0,     5,     2,     5,     2,
       1,     3,     3,     0,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     3,     3,
       3,     3,     3,     3,     3,     0,     1,     3,     3,     5,
       2,     2,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     3,     3,     3,     2,     2,     3,     3,     2,
       2,     3,     3,     5,     4,     6,     3,     5,     4,     6,
       4,     6,     5,     7,     3,     2,     4,     3,     2,     1,
       3,     3,     3,     3,     3,     3,     4,     3,     4,     3,
       4,     5,     6,     6,     7,     6,     7,     6,     7,     3,
       4,     4,     6,     1,     4,     1,     3,     2,     2,     3,
       3,     3,     3,     3,     3,     3,     3,     3,     3,     3,
       3,     3,     2,     2,     5,     6,     6,     7,     1,     1,
       2,     2,     2,     4,     1,     2,     1,     2,     2,     3,
       5,     6,     8,     6,     6,     4,     4,     1,     1,     1,
       5,     1,     1,     4,     1,     4,     1,     4,     1,     4,
       1,     1,     1,     1,     1,     1,     6,     6,     4,     4,
       4,     4,     6,     5,     5,     5,     4,     6,     4,     5,
       0,     5,     0,     2,     0,     1,     3,     3,     2,     2,
       0,     6,     1,     0,     3,     0,     2,     2,     0,     1,
       4,     2,     2,     2,     2,     2,     4,     3,     1,     5,
       3,     1,     3,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     4,     1,     4,     1,     4,     1,     2,     1,     2,
       1,     2,     1,     3,     1,     3,     1,     0,     1,     3,
       1,     3,     3,     1,     3,     3,     0,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     4,     3,     2,
       3,     0,     3,     3,     2,     2,     1,     0,     2,     2,
       3,     2,     1,     1,     3,     5,     1,     2,     4,     2,
       0,     1,     0,     1,     2,     2,     2,     3,     5,     1,
       0,     1,     2,     0,     2,     1,     0,     1,     0,     1,
       3,     3,     2,     1,     1,     1,     3,     1,     2,     1,
       3,     1,     1,     1,     2,     1,     1,     2,     1,     1,
       2,     6,     2,     5,     3,     3,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     2,     2,     3,     3,
       0,     1,     1,     1,     1,     1,     1,     1,     5,     3,
       0,     1,     1,     1,     1,     9,    12,     5,    16,     0,
       2,     1,     1,     1,     1,     1,     1,     3,     0,     1,
       2,     1,     1,     2,     2,     3,     1,     1,     2,     2,
       1,     2,     3,     5,     2,     5,     5,     2,     3,     1,
       1,     2,     2,     0,     4,     0,     3,     4,     4,     0,
       3,     2,     0,     3,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     3,     3,     1,     2,     2,     2,
       2,     2,     2,     0,     3,     3,     3,     0,     1,     2,
       1,     2,     2,     2,     2,     4,     1,     3,     1,     3,
       1,     1,     1,     1,     3,     1,     2,     0,     1,     0,
       1,     3,     0,     2,     0,     3,     3,     1,     5,     3,
       1,     3,     1,     4,     5,     5,     6,     3,     7,     4,
      11,     1,     3,     2,     2,     2,     0,     3,     1,     1,
       2,     2,     2,     2,     1,     0,     1,     2,     2,     1,
       1,     1,     2,     3,     6,     6,     8,     6,     8,     6,
       8,     6,     8,     8,    10,     8,    10,     1,     0,    13,
      16,     1,     2,     0,     1,     0,     1,     0,     2,     0,
       1,     0,     2,     2,     4,     5,     2,     3,     3,     1,
       3,     3,     2,     3,     3,     3,     3,     1,     1,     1,
       1,     3,     5,     1,     1,     1,     1,     3,     6,     8,
       6,     8,     6,     8,     4,     3,     2,     3,     2,     3,
       4,     6,     1,     2,     1,     1,     0,     1,     2,     2,
       1,     2,     2,     1,     2,     3,     2,     2,     2,     2,
       3,     3,     3,     1,     3,     1,     0,     1,     2,     2,
       4,     6,     4,     6,     4,     6,     4,     6,     1,     2,
       3,     2,     1,     3,     2,     3,     1,     3,     2,     5,
       3,     6,     4,     6,     6,     6,     5,     5,     6,     9,
       4,     5,     7,     6,     4,     8,     4,     2,     4,     3,
       6,     4,     2,     2,     2,     2,     1,     2,     0,     1,
       2,     2,     2,     1,     3,     4,     2,     1,     0,     2,
       4,     3,     5,     1,     0,     1,     1,     0,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     3,
       1,     1,     1,     1,     1,     1,     2,     1,     1,     8,
       2,     1,     7,     1,     4,     4,     7,     2,     1,     3,
       4,     3,     0,     1,     0,     2,     3,     5,     8,     5,
       0,     5,     5,     7,     2,     0,     1,     1,     1,     3,
       2,     0,     1,     0,     1,     3,     1,     3,     1,     3,
       2,     6,     1,     1,     2,     3,     4,     5,     5,     4,
       6,     1,     1,     1,     1,     1,     1,     0,     1,     3,
       1,     0,     2,     4,    11,     9,     1,     1,     3,     0,
       1,     3,     1,     0,     1,     0,     1,     0,     1,     3,
       1,     1,     1,     3,     0,     2,     2,     0,     2,     0,
       1,     0,     1,     1,     1,     3,     3,     1,     1,     3,
       3,     3,     3,     4,     3,     2,     1,     1,     1,     1,
       1,     3,     9,    11,    12,    14,     3,     4,     4,     0,
       7,    10,     2,     3,     0,     4,     2,     1,     5,     8,
       1,     0,     6,     4,     6,     4,     6,     8,     1,     1,
       1,     1,     1,     2,     1,     2,     1,     1,     1,     3,
       3,     3,     3,     2,     2,     1,     3,     1,     1,     1,
       1,     3,     1,     1,     0,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1,     1,     1,     1,     1,
       1,     1,     1,     1,     1,     1
};


#define yyerrok         (yyerrstatus = 0)
#define yyclearin       (yychar = YYEMPTY)
#define YYEMPTY         (-2)
#define YYEOF           0

#define YYACCEPT        goto yyacceptlab
#define YYABORT         goto yyabortlab
#define YYERROR         goto yyerrorlab


#define YYRECOVERING()  (!!yyerrstatus)

#define YYBACKUP(Token, Value)                                  \
do                                                              \
  if (yychar == YYEMPTY)                                        \
    {                                                           \
      yychar = (Token);                                         \
      yylval = (Value);                                         \
      YYPOPSTACK (yylen);                                       \
      yystate = *yyssp;                                         \
      goto yybackup;                                            \
    }                                                           \
  else                                                          \
    {                                                           \
      yyerror (&yylloc, yyscanner, YY_("syntax error: cannot back up")); \
      YYERROR;                                                  \
    }                                                           \
while (0)

/* Error token number */
#define YYTERROR        1
#define YYERRCODE       256


/* YYLLOC_DEFAULT -- Set CURRENT to span from RHS[1] to RHS[N].
   If N is 0, then set CURRENT to the empty location which ends
   the previous symbol: RHS[0] (always defined).  */

#ifndef YYLLOC_DEFAULT
# define YYLLOC_DEFAULT(Current, Rhs, N)                                \
    do                                                                  \
      if (N)                                                            \
        {                                                               \
          (Current).first_line   = YYRHSLOC (Rhs, 1).first_line;        \
          (Current).first_column = YYRHSLOC (Rhs, 1).first_column;      \
          (Current).last_line    = YYRHSLOC (Rhs, N).last_line;         \
          (Current).last_column  = YYRHSLOC (Rhs, N).last_column;       \
        }                                                               \
      else                                                              \
        {                                                               \
          (Current).first_line   = (Current).last_line   =              \
            YYRHSLOC (Rhs, 0).last_line;                                \
          (Current).first_column = (Current).last_column =              \
            YYRHSLOC (Rhs, 0).last_column;                              \
        }                                                               \
    while (0)
#endif

#define YYRHSLOC(Rhs, K) ((Rhs)[K])


/* Enable debugging if requested.  */
#if YYDEBUG

# ifndef YYFPRINTF
#  include <stdio.h> /* INFRINGES ON USER NAME SPACE */
#  define YYFPRINTF fprintf
# endif

# define YYDPRINTF(Args)                        \
do {                                            \
  if (yydebug)                                  \
    YYFPRINTF Args;                             \
} while (0)


/* YY_LOCATION_PRINT -- Print the location on the stream.
   This macro was not mandated originally: define only if we know
   we won't break user code: when these are the locations we know.  */

#ifndef YY_LOCATION_PRINT
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL

/* Print *YYLOCP on YYO.  Private, do not rely on its existence. */

YY_ATTRIBUTE_UNUSED
static unsigned
yy_location_print_ (FILE *yyo, YYLTYPE const * const yylocp)
{
  unsigned res = 0;
  int end_col = 0 != yylocp->last_column ? yylocp->last_column - 1 : 0;
  if (0 <= yylocp->first_line)
    {
      res += YYFPRINTF (yyo, "%d", yylocp->first_line);
      if (0 <= yylocp->first_column)
        res += YYFPRINTF (yyo, ".%d", yylocp->first_column);
    }
  if (0 <= yylocp->last_line)
    {
      if (yylocp->first_line < yylocp->last_line)
        {
          res += YYFPRINTF (yyo, "-%d", yylocp->last_line);
          if (0 <= end_col)
            res += YYFPRINTF (yyo, ".%d", end_col);
        }
      else if (0 <= end_col && yylocp->first_column < end_col)
        res += YYFPRINTF (yyo, "-%d", end_col);
    }
  return res;
 }

#  define YY_LOCATION_PRINT(File, Loc)          \
  yy_location_print_ (File, &(Loc))

# else
#  define YY_LOCATION_PRINT(File, Loc) ((void) 0)
# endif
#endif


# define YY_SYMBOL_PRINT(Title, Type, Value, Location)                    \
do {                                                                      \
  if (yydebug)                                                            \
    {                                                                     \
      YYFPRINTF (stderr, "%s ", Title);                                   \
      yy_symbol_print (stderr,                                            \
                  Type, Value, Location, yyscanner); \
      YYFPRINTF (stderr, "\n");                                           \
    }                                                                     \
} while (0)


/*----------------------------------------.
| Print this symbol's value on YYOUTPUT.  |
`----------------------------------------*/

static void
yy_symbol_value_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  FILE *yyo = yyoutput;
  YYUSE (yyo);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yyvaluep)
    return;
# ifdef YYPRINT
  if (yytype < YYNTOKENS)
    YYPRINT (yyoutput, yytoknum[yytype], *yyvaluep);
# endif
  YYUSE (yytype);
}


/*--------------------------------.
| Print this symbol on YYOUTPUT.  |
`--------------------------------*/

static void
yy_symbol_print (FILE *yyoutput, int yytype, YYSTYPE const * const yyvaluep, YYLTYPE const * const yylocationp, core_yyscan_t yyscanner)
{
  YYFPRINTF (yyoutput, "%s %s (",
             yytype < YYNTOKENS ? "token" : "nterm", yytname[yytype]);

  YY_LOCATION_PRINT (yyoutput, *yylocationp);
  YYFPRINTF (yyoutput, ": ");
  yy_symbol_value_print (yyoutput, yytype, yyvaluep, yylocationp, yyscanner);
  YYFPRINTF (yyoutput, ")");
}

/*------------------------------------------------------------------.
| yy_stack_print -- Print the state stack from its BOTTOM up to its |
| TOP (included).                                                   |
`------------------------------------------------------------------*/

static void
yy_stack_print (yytype_int16 *yybottom, yytype_int16 *yytop)
{
  YYFPRINTF (stderr, "Stack now");
  for (; yybottom <= yytop; yybottom++)
    {
      int yybot = *yybottom;
      YYFPRINTF (stderr, " %d", yybot);
    }
  YYFPRINTF (stderr, "\n");
}

# define YY_STACK_PRINT(Bottom, Top)                            \
do {                                                            \
  if (yydebug)                                                  \
    yy_stack_print ((Bottom), (Top));                           \
} while (0)


/*------------------------------------------------.
| Report that the YYRULE is going to be reduced.  |
`------------------------------------------------*/

static void
yy_reduce_print (yytype_int16 *yyssp, YYSTYPE *yyvsp, YYLTYPE *yylsp, int yyrule, core_yyscan_t yyscanner)
{
  unsigned long int yylno = yyrline[yyrule];
  int yynrhs = yyr2[yyrule];
  int yyi;
  YYFPRINTF (stderr, "Reducing stack by rule %d (line %lu):\n",
             yyrule - 1, yylno);
  /* The symbols being reduced.  */
  for (yyi = 0; yyi < yynrhs; yyi++)
    {
      YYFPRINTF (stderr, "   $%d = ", yyi + 1);
      yy_symbol_print (stderr,
                       yystos[yyssp[yyi + 1 - yynrhs]],
                       &(yyvsp[(yyi + 1) - (yynrhs)])
                       , &(yylsp[(yyi + 1) - (yynrhs)])                       , yyscanner);
      YYFPRINTF (stderr, "\n");
    }
}

# define YY_REDUCE_PRINT(Rule)          \
do {                                    \
  if (yydebug)                          \
    yy_reduce_print (yyssp, yyvsp, yylsp, Rule, yyscanner); \
} while (0)

/* Nonzero means print parse trace.  It is left uninitialized so that
   multiple parsers can coexist.  */
int yydebug;
#else /* !YYDEBUG */
# define YYDPRINTF(Args)
# define YY_SYMBOL_PRINT(Title, Type, Value, Location)
# define YY_STACK_PRINT(Bottom, Top)
# define YY_REDUCE_PRINT(Rule)
#endif /* !YYDEBUG */


/* YYINITDEPTH -- initial size of the parser's stacks.  */
#ifndef YYINITDEPTH
# define YYINITDEPTH 200
#endif

/* YYMAXDEPTH -- maximum size the stacks can grow to (effective only
   if the built-in stack extension method is used).

   Do not make this value too large; the results are undefined if
   YYSTACK_ALLOC_MAXIMUM < YYSTACK_BYTES (YYMAXDEPTH)
   evaluated with infinite-precision integer arithmetic.  */

#ifndef YYMAXDEPTH
# define YYMAXDEPTH 10000
#endif


#if YYERROR_VERBOSE

# ifndef yystrlen
#  if defined __GLIBC__ && defined _STRING_H
#   define yystrlen strlen
#  else
/* Return the length of YYSTR.  */
static YYSIZE_T
yystrlen (const char *yystr)
{
  YYSIZE_T yylen;
  for (yylen = 0; yystr[yylen]; yylen++)
    continue;
  return yylen;
}
#  endif
# endif

# ifndef yystpcpy
#  if defined __GLIBC__ && defined _STRING_H && defined _GNU_SOURCE
#   define yystpcpy stpcpy
#  else
/* Copy YYSRC to YYDEST, returning the address of the terminating '\0' in
   YYDEST.  */
static char *
yystpcpy (char *yydest, const char *yysrc)
{
  char *yyd = yydest;
  const char *yys = yysrc;

  while ((*yyd++ = *yys++) != '\0')
    continue;

  return yyd - 1;
}
#  endif
# endif

# ifndef yytnamerr
/* Copy to YYRES the contents of YYSTR after stripping away unnecessary
   quotes and backslashes, so that it's suitable for yyerror.  The
   heuristic is that double-quoting is unnecessary unless the string
   contains an apostrophe, a comma, or backslash (other than
   backslash-backslash).  YYSTR is taken from yytname.  If YYRES is
   null, do not copy; instead, return the length of what the result
   would have been.  */
static YYSIZE_T
yytnamerr (char *yyres, const char *yystr)
{
  if (*yystr == '"')
    {
      YYSIZE_T yyn = 0;
      char const *yyp = yystr;

      for (;;)
        switch (*++yyp)
          {
          case '\'':
          case ',':
            goto do_not_strip_quotes;

          case '\\':
            if (*++yyp != '\\')
              goto do_not_strip_quotes;
            /* Fall through.  */
          default:
            if (yyres)
              yyres[yyn] = *yyp;
            yyn++;
            break;

          case '"':
            if (yyres)
              yyres[yyn] = '\0';
            return yyn;
          }
    do_not_strip_quotes: ;
    }

  if (! yyres)
    return yystrlen (yystr);

  return yystpcpy (yyres, yystr) - yyres;
}
# endif

/* Copy into *YYMSG, which is of size *YYMSG_ALLOC, an error message
   about the unexpected token YYTOKEN for the state stack whose top is
   YYSSP.

   Return 0 if *YYMSG was successfully written.  Return 1 if *YYMSG is
   not large enough to hold the message.  In that case, also set
   *YYMSG_ALLOC to the required number of bytes.  Return 2 if the
   required number of bytes is too large to store.  */
static int
yysyntax_error (YYSIZE_T *yymsg_alloc, char **yymsg,
                yytype_int16 *yyssp, int yytoken)
{
  YYSIZE_T yysize0 = yytnamerr (YY_NULLPTR, yytname[yytoken]);
  YYSIZE_T yysize = yysize0;
  enum { YYERROR_VERBOSE_ARGS_MAXIMUM = 5 };
  /* Internationalized format string. */
  const char *yyformat = YY_NULLPTR;
  /* Arguments of yyformat. */
  char const *yyarg[YYERROR_VERBOSE_ARGS_MAXIMUM];
  /* Number of reported tokens (one for the "unexpected", one per
     "expected"). */
  int yycount = 0;

  /* There are many possibilities here to consider:
     - If this state is a consistent state with a default action, then
       the only way this function was invoked is if the default action
       is an error action.  In that case, don't check for expected
       tokens because there are none.
     - The only way there can be no lookahead present (in yychar) is if
       this state is a consistent state with a default action.  Thus,
       detecting the absence of a lookahead is sufficient to determine
       that there is no unexpected or expected token to report.  In that
       case, just report a simple "syntax error".
     - Don't assume there isn't a lookahead just because this state is a
       consistent state with a default action.  There might have been a
       previous inconsistent state, consistent state with a non-default
       action, or user semantic action that manipulated yychar.
     - Of course, the expected token list depends on states to have
       correct lookahead information, and it depends on the parser not
       to perform extra reductions after fetching a lookahead from the
       scanner and before detecting a syntax error.  Thus, state merging
       (from LALR or IELR) and default reductions corrupt the expected
       token list.  However, the list is correct for canonical LR with
       one exception: it will still contain any token that will not be
       accepted due to an error action in a later state.
  */
  if (yytoken != YYEMPTY)
    {
      int yyn = yypact[*yyssp];
      yyarg[yycount++] = yytname[yytoken];
      if (!yypact_value_is_default (yyn))
        {
          /* Start YYX at -YYN if negative to avoid negative indexes in
             YYCHECK.  In other words, skip the first -YYN actions for
             this state because they are default actions.  */
          int yyxbegin = yyn < 0 ? -yyn : 0;
          /* Stay within bounds of both yycheck and yytname.  */
          int yychecklim = YYLAST - yyn + 1;
          int yyxend = yychecklim < YYNTOKENS ? yychecklim : YYNTOKENS;
          int yyx;

          for (yyx = yyxbegin; yyx < yyxend; ++yyx)
            if (yycheck[yyx + yyn] == yyx && yyx != YYTERROR
                && !yytable_value_is_error (yytable[yyx + yyn]))
              {
                if (yycount == YYERROR_VERBOSE_ARGS_MAXIMUM)
                  {
                    yycount = 1;
                    yysize = yysize0;
                    break;
                  }
                yyarg[yycount++] = yytname[yyx];
                {
                  YYSIZE_T yysize1 = yysize + yytnamerr (YY_NULLPTR, yytname[yyx]);
                  if (! (yysize <= yysize1
                         && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
                    return 2;
                  yysize = yysize1;
                }
              }
        }
    }

  switch (yycount)
    {
# define YYCASE_(N, S)                      \
      case N:                               \
        yyformat = S;                       \
      break
      YYCASE_(0, YY_("syntax error"));
      YYCASE_(1, YY_("syntax error, unexpected %s"));
      YYCASE_(2, YY_("syntax error, unexpected %s, expecting %s"));
      YYCASE_(3, YY_("syntax error, unexpected %s, expecting %s or %s"));
      YYCASE_(4, YY_("syntax error, unexpected %s, expecting %s or %s or %s"));
      YYCASE_(5, YY_("syntax error, unexpected %s, expecting %s or %s or %s or %s"));
# undef YYCASE_
    }

  {
    YYSIZE_T yysize1 = yysize + yystrlen (yyformat);
    if (! (yysize <= yysize1 && yysize1 <= YYSTACK_ALLOC_MAXIMUM))
      return 2;
    yysize = yysize1;
  }

  if (*yymsg_alloc < yysize)
    {
      *yymsg_alloc = 2 * yysize;
      if (! (yysize <= *yymsg_alloc
             && *yymsg_alloc <= YYSTACK_ALLOC_MAXIMUM))
        *yymsg_alloc = YYSTACK_ALLOC_MAXIMUM;
      return 1;
    }

  /* Avoid sprintf, as that infringes on the user's name space.
     Don't have undefined behavior even if the translation
     produced a string with the wrong number of "%s"s.  */
  {
    char *yyp = *yymsg;
    int yyi = 0;
    while ((*yyp = *yyformat) != '\0')
      if (*yyp == '%' && yyformat[1] == 's' && yyi < yycount)
        {
          yyp += yytnamerr (yyp, yyarg[yyi++]);
          yyformat += 2;
        }
      else
        {
          yyp++;
          yyformat++;
        }
  }
  return 0;
}
#endif /* YYERROR_VERBOSE */

/*-----------------------------------------------.
| Release the memory associated to this symbol.  |
`-----------------------------------------------*/

static void
yydestruct (const char *yymsg, int yytype, YYSTYPE *yyvaluep, YYLTYPE *yylocationp, core_yyscan_t yyscanner)
{
  YYUSE (yyvaluep);
  YYUSE (yylocationp);
  YYUSE (yyscanner);
  if (!yymsg)
    yymsg = "Deleting";
  YY_SYMBOL_PRINT (yymsg, yytype, yyvaluep, yylocationp);

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  YYUSE (yytype);
  YY_IGNORE_MAYBE_UNINITIALIZED_END
}




/*----------.
| yyparse.  |
`----------*/

int
yyparse (core_yyscan_t yyscanner)
{
/* The lookahead symbol.  */
int yychar;


/* The semantic value of the lookahead symbol.  */
/* Default value used for initialization, for pacifying older GCCs
   or non-GCC compilers.  */
YY_INITIAL_VALUE (static YYSTYPE yyval_default;)
YYSTYPE yylval YY_INITIAL_VALUE (= yyval_default);

/* Location data for the lookahead symbol.  */
static YYLTYPE yyloc_default
# if defined YYLTYPE_IS_TRIVIAL && YYLTYPE_IS_TRIVIAL
  = { 1, 1, 1, 1 }
# endif
;
YYLTYPE yylloc = yyloc_default;

    /* Number of syntax errors so far.  */
    int yynerrs;

    int yystate;
    /* Number of tokens to shift before error messages enabled.  */
    int yyerrstatus;

    /* The stacks and their tools:
       'yyss': related to states.
       'yyvs': related to semantic values.
       'yyls': related to locations.

       Refer to the stacks through separate pointers, to allow yyoverflow
       to reallocate them elsewhere.  */

    /* The state stack.  */
    yytype_int16 yyssa[YYINITDEPTH];
    yytype_int16 *yyss;
    yytype_int16 *yyssp;

    /* The semantic value stack.  */
    YYSTYPE yyvsa[YYINITDEPTH];
    YYSTYPE *yyvs;
    YYSTYPE *yyvsp;

    /* The location stack.  */
    YYLTYPE yylsa[YYINITDEPTH];
    YYLTYPE *yyls;
    YYLTYPE *yylsp;

    /* The locations where the error started and ended.  */
    YYLTYPE yyerror_range[3];

    YYSIZE_T yystacksize;

  int yyn;
  int yyresult;
  /* Lookahead token as an internal (translated) token number.  */
  int yytoken = 0;
  /* The variables used to return semantic value and location from the
     action routines.  */
  YYSTYPE yyval;
  YYLTYPE yyloc;

#if YYERROR_VERBOSE
  /* Buffer for error messages, and its allocated size.  */
  char yymsgbuf[128];
  char *yymsg = yymsgbuf;
  YYSIZE_T yymsg_alloc = sizeof yymsgbuf;
#endif

#define YYPOPSTACK(N)   (yyvsp -= (N), yyssp -= (N), yylsp -= (N))

  /* The number of symbols on the RHS of the reduced rule.
     Keep to zero when no symbol should be popped.  */
  int yylen = 0;

  yyssp = yyss = yyssa;
  yyvsp = yyvs = yyvsa;
  yylsp = yyls = yylsa;
  yystacksize = YYINITDEPTH;

  YYDPRINTF ((stderr, "Starting parse\n"));

  yystate = 0;
  yyerrstatus = 0;
  yynerrs = 0;
  yychar = YYEMPTY; /* Cause a token to be read.  */
  yylsp[0] = yylloc;
  goto yysetstate;

/*------------------------------------------------------------.
| yynewstate -- Push a new state, which is found in yystate.  |
`------------------------------------------------------------*/
 yynewstate:
  /* In all cases, when you get here, the value and location stacks
     have just been pushed.  So pushing a state here evens the stacks.  */
  yyssp++;

 yysetstate:
  *yyssp = yystate;

  if (yyss + yystacksize - 1 <= yyssp)
    {
      /* Get the current used size of the three stacks, in elements.  */
      YYSIZE_T yysize = yyssp - yyss + 1;

#ifdef yyoverflow
      {
        /* Give user a chance to reallocate the stack.  Use copies of
           these so that the &'s don't force the real ones into
           memory.  */
        YYSTYPE *yyvs1 = yyvs;
        yytype_int16 *yyss1 = yyss;
        YYLTYPE *yyls1 = yyls;

        /* Each stack pointer address is followed by the size of the
           data in use in that stack, in bytes.  This used to be a
           conditional around just the two extra args, but that might
           be undefined if yyoverflow is a macro.  */
        yyoverflow (YY_("memory exhausted"),
                    &yyss1, yysize * sizeof (*yyssp),
                    &yyvs1, yysize * sizeof (*yyvsp),
                    &yyls1, yysize * sizeof (*yylsp),
                    &yystacksize);

        yyls = yyls1;
        yyss = yyss1;
        yyvs = yyvs1;
      }
#else /* no yyoverflow */
# ifndef YYSTACK_RELOCATE
      goto yyexhaustedlab;
# else
      /* Extend the stack our own way.  */
      if (YYMAXDEPTH <= yystacksize)
        goto yyexhaustedlab;
      yystacksize *= 2;
      if (YYMAXDEPTH < yystacksize)
        yystacksize = YYMAXDEPTH;

      {
        yytype_int16 *yyss1 = yyss;
        union yyalloc *yyptr =
          (union yyalloc *) YYSTACK_ALLOC (YYSTACK_BYTES (yystacksize));
        if (! yyptr)
          goto yyexhaustedlab;
        YYSTACK_RELOCATE (yyss_alloc, yyss);
        YYSTACK_RELOCATE (yyvs_alloc, yyvs);
        YYSTACK_RELOCATE (yyls_alloc, yyls);
#  undef YYSTACK_RELOCATE
        if (yyss1 != yyssa)
          YYSTACK_FREE (yyss1);
      }
# endif
#endif /* no yyoverflow */

      yyssp = yyss + yysize - 1;
      yyvsp = yyvs + yysize - 1;
      yylsp = yyls + yysize - 1;

      YYDPRINTF ((stderr, "Stack size increased to %lu\n",
                  (unsigned long int) yystacksize));

      if (yyss + yystacksize - 1 <= yyssp)
        YYABORT;
    }

  YYDPRINTF ((stderr, "Entering state %d\n", yystate));

  if (yystate == YYFINAL)
    YYACCEPT;

  goto yybackup;

/*-----------.
| yybackup.  |
`-----------*/
yybackup:

  /* Do appropriate processing given the current state.  Read a
     lookahead token if we need one and don't already have one.  */

  /* First try to decide what to do without reference to lookahead token.  */
  yyn = yypact[yystate];
  if (yypact_value_is_default (yyn))
    goto yydefault;

  /* Not known => get a lookahead token if don't already have one.  */

  /* YYCHAR is either YYEMPTY or YYEOF or a valid lookahead symbol.  */
  if (yychar == YYEMPTY)
    {
      YYDPRINTF ((stderr, "Reading a token: "));
      yychar = yylex (&yylval, &yylloc, yyscanner);
    }

  if (yychar <= YYEOF)
    {
      yychar = yytoken = YYEOF;
      YYDPRINTF ((stderr, "Now at end of input.\n"));
    }
  else
    {
      yytoken = YYTRANSLATE (yychar);
      YY_SYMBOL_PRINT ("Next token is", yytoken, &yylval, &yylloc);
    }

  /* If the proper action on seeing token YYTOKEN is to reduce or to
     detect an error, take that action.  */
  yyn += yytoken;
  if (yyn < 0 || YYLAST < yyn || yycheck[yyn] != yytoken)
    goto yydefault;
  yyn = yytable[yyn];
  if (yyn <= 0)
    {
      if (yytable_value_is_error (yyn))
        goto yyerrlab;
      yyn = -yyn;
      goto yyreduce;
    }

  /* Count tokens shifted since error; after three, turn off error
     status.  */
  if (yyerrstatus)
    yyerrstatus--;

  /* Shift the lookahead token.  */
  YY_SYMBOL_PRINT ("Shifting", yytoken, &yylval, &yylloc);

  /* Discard the shifted token.  */
  yychar = YYEMPTY;

  yystate = yyn;
  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END
  *++yylsp = yylloc;
  goto yynewstate;


/*-----------------------------------------------------------.
| yydefault -- do the default action for the current state.  |
`-----------------------------------------------------------*/
yydefault:
  yyn = yydefact[yystate];
  if (yyn == 0)
    goto yyerrlab;
  goto yyreduce;


/*-----------------------------.
| yyreduce -- Do a reduction.  |
`-----------------------------*/
yyreduce:
  /* yyn is the number of a rule to reduce with.  */
  yylen = yyr2[yyn];

  /* If YYLEN is nonzero, implement the default value of the action:
     '$$ = $1'.

     Otherwise, the following line sets YYVAL to garbage.
     This behavior is undocumented and Bison
     users should not rely upon it.  Assigning to YYVAL
     unconditionally makes the parser a bit smaller, and it avoids a
     GCC warning that YYVAL may be used uninitialized.  */
  yyval = yyvsp[1-yylen];

  /* Default location.  */
  YYLLOC_DEFAULT (yyloc, (yylsp - yylen), yylen);
  YY_REDUCE_PRINT (yyn);
  switch (yyn)
    {
        case 2:
#line 464 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    {
				pg_yyget_extra(yyscanner)->parsetree = (yyvsp[0].list);
			}
#line 13834 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 3:
#line 480 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    {
					if ((yyvsp[-2].list) != NIL)
					{
						/* update length of previous stmt */
						updateRawStmtEnd(llast_node(PGRawStmt, (yyvsp[-2].list)), (yylsp[-1]));
					}
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = lappend((yyvsp[-2].list), makeRawStmt((yyvsp[0].node), (yylsp[-1]) + 1));
					else
						(yyval.list) = (yyvsp[-2].list);
				}
#line 13850 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 4:
#line 492 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].node) != NULL)
						(yyval.list) = list_make1(makeRawStmt((yyvsp[0].node), 0));
					else
						(yyval.list) = NIL;
				}
#line 13861 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 40:
#line 536 "third_party/libpg_query/grammar/grammar.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 13867 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 41:
#line 8 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not both */
					n->schemaname = (yyvsp[-1].str);
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 13880 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 42:
#line 17 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    {
					PGCreateSchemaStmt *n = makeNode(PGCreateSchemaStmt);
					/* ...but not here */
					n->schemaname = (yyvsp[-1].str);
					if ((yyvsp[0].list) != NIL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("CREATE SCHEMA IF NOT EXISTS cannot include schema elements"),
								 parser_errposition((yylsp[0]))));
					n->schemaElts = (yyvsp[0].list);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 13898 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 43:
#line 35 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    {
					if ((yyloc) < 0)			/* see comments for YYLLOC_DEFAULT */
						(yyloc) = (yylsp[0]);
					(yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node));
				}
#line 13908 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 44:
#line 41 "third_party/libpg_query/grammar/statements/create_schema.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 13914 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 49:
#line 3 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
				PGVariableShowSelectStmt *n = makeNode(PGVariableShowSelectStmt);
				n->stmt = (yyvsp[0].node);
				n->name = (char*) "select";
				(yyval.node) = (PGNode *) n;
			}
#line 13925 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 50:
#line 11 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *) n;
				}
#line 13935 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 51:
#line 17 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "timezone";
					(yyval.node) = (PGNode *) n;
				}
#line 13945 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 52:
#line 23 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "transaction_isolation";
					(yyval.node) = (PGNode *) n;
				}
#line 13955 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 53:
#line 29 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    {
					PGVariableShowStmt *n = makeNode(PGVariableShowStmt);
					n->name = (char*) "all";
					(yyval.node) = (PGNode *) n;
				}
#line 13965 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 56:
#line 39 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 13971 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 57:
#line 41 "third_party/libpg_query/grammar/statements/variable_show.y" /* yacc.c:1646  */
    { (yyval.str) = psprintf("%s.%s", (yyvsp[-2].str), (yyvsp[0].str)); }
#line 13977 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 58:
#line 8 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    {
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-1].str);
					n->params = (yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 13988 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 59:
#line 16 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-7].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 14008 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 60:
#line 33 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					PGExecuteStmt *n = makeNode(PGExecuteStmt);
					n->name = (yyvsp[-2].str);
					n->params = (yyvsp[-1].list);
					ctas->query = (PGNode *) n;
					ctas->into = (yyvsp[-5].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-5].into)->rel->relpersistence = (yyvsp[-10].ival);
					(yyvsp[-5].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 14028 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 61:
#line 51 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 14034 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 62:
#line 52 "third_party/libpg_query/grammar/statements/execute.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14040 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 63:
#line 9 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					PGDeleteStmt *n = makeNode(PGDeleteStmt);
					n->relation = (yyvsp[-3].range);
					n->usingClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *)n;
				}
#line 14054 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 64:
#line 22 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
				}
#line 14062 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 65:
#line 26 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-1].range)->alias = alias;
					(yyval.range) = (yyvsp[-1].range);
				}
#line 14073 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 66:
#line 33 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    {
					PGAlias *alias = makeNode(PGAlias);
					alias->aliasname = (yyvsp[0].str);
					(yyvsp[-2].range)->alias = alias;
					(yyval.range) = (yyvsp[-2].range);
				}
#line 14084 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 67:
#line 43 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14090 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 68:
#line 44 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 14096 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 69:
#line 50 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 14102 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 70:
#line 51 "third_party/libpg_query/grammar/statements/delete.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14108 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 71:
#line 3 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 14119 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 72:
#line 10 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_BEGIN;
					(yyval.node) = (PGNode *)n;
				}
#line 14129 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 73:
#line 16 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_START;
					(yyval.node) = (PGNode *)n;
				}
#line 14139 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 74:
#line 22 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 14150 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 75:
#line 29 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_COMMIT;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 14161 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 76:
#line 36 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {
					PGTransactionStmt *n = makeNode(PGTransactionStmt);
					n->kind = PG_TRANS_STMT_ROLLBACK;
					n->options = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 14172 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 77:
#line 45 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {}
#line 14178 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 78:
#line 46 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {}
#line 14184 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 79:
#line 47 "third_party/libpg_query/grammar/statements/transaction.y" /* yacc.c:1646  */
    {}
#line 14190 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 82:
#line 52 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 14196 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 83:
#line 53 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 14202 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 84:
#line 68 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14208 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 85:
#line 70 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL, NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 14219 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 86:
#line 77 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 14231 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 87:
#line 85 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										NULL,
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 14243 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 88:
#line 93 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[0].node), NULL, NIL,
										NULL, NULL,
										(yyvsp[-1].with),
										yyscanner);
					(yyval.node) = (yyvsp[0].node);
				}
#line 14255 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 89:
#line 101 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-1].node), (yyvsp[0].list), NIL,
										NULL, NULL,
										(yyvsp[-2].with),
										yyscanner);
					(yyval.node) = (yyvsp[-1].node);
				}
#line 14267 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 90:
#line 109 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[-1].list),
										(PGNode*) list_nth((yyvsp[0].list), 0), (PGNode*) list_nth((yyvsp[0].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 14279 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 91:
#line 117 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					insertSelectOptions((PGSelectStmt *) (yyvsp[-3].node), (yyvsp[-2].list), (yyvsp[0].list),
										(PGNode*) list_nth((yyvsp[-1].list), 0), (PGNode*) list_nth((yyvsp[-1].list), 1),
										(yyvsp[-4].with),
										yyscanner);
					(yyval.node) = (yyvsp[-3].node);
				}
#line 14291 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 92:
#line 127 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14297 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 93:
#line 128 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14303 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 94:
#line 158 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 14320 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 95:
#line 173 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->distinctClause = (yyvsp[-8].list);
					n->targetList = (yyvsp[-7].list);
					n->intoClause = (yyvsp[-6].into);
					n->fromClause = (yyvsp[-5].list);
					n->whereClause = (yyvsp[-4].node);
					n->groupClause = (yyvsp[-3].list);
					n->havingClause = (yyvsp[-2].node);
					n->windowClause = (yyvsp[-1].list);
					n->sampleOptions = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 14338 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 96:
#line 186 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14344 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 97:
#line 188 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* same as SELECT * FROM relation_expr */
					PGColumnRef *cr = makeNode(PGColumnRef);
					PGResTarget *rt = makeNode(PGResTarget);
					PGSelectStmt *n = makeNode(PGSelectStmt);

					cr->fields = list_make1(makeNode(PGAStar));
					cr->location = -1;

					rt->name = NULL;
					rt->indirection = NIL;
					rt->val = (PGNode *)cr;
					rt->location = -1;

					n->targetList = list_make1(rt);
					n->fromClause = list_make1((yyvsp[0].range));
					(yyval.node) = (PGNode *)n;
				}
#line 14367 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 98:
#line 207 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSetOp(PG_SETOP_UNION, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 14375 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 99:
#line 211 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSetOp(PG_SETOP_INTERSECT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 14383 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 100:
#line 215 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSetOp(PG_SETOP_EXCEPT, (yyvsp[-1].boolean), (yyvsp[-3].node), (yyvsp[0].node));
				}
#line 14391 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 101:
#line 232 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 14402 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 102:
#line 239 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = false;
				(yyval.with)->location = (yylsp[-1]);
			}
#line 14413 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 103:
#line 246 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				(yyval.with) = makeNode(PGWithClause);
				(yyval.with)->ctes = (yyvsp[0].list);
				(yyval.with)->recursive = true;
				(yyval.with)->location = (yylsp[-2]);
			}
#line 14424 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 104:
#line 255 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 14430 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 105:
#line 256 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 14436 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 106:
#line 260 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGCommonTableExpr *n = makeNode(PGCommonTableExpr);
				n->ctename = (yyvsp[-5].str);
				n->aliascolnames = (yyvsp[-4].list);
				n->ctequery = (yyvsp[-1].node);
				n->location = (yylsp[-5]);
				(yyval.node) = (PGNode *) n;
			}
#line 14449 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 107:
#line 272 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[0].range);
					(yyval.into)->colNames = NIL;
					(yyval.into)->options = NIL;
					(yyval.into)->onCommit = PG_ONCOMMIT_NOOP;
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;
				}
#line 14463 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 108:
#line 282 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.into) = NULL; }
#line 14469 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 109:
#line 291 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14478 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 110:
#line 296 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14487 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 111:
#line 301 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14496 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 112:
#line 306 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14505 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 113:
#line 311 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14517 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 114:
#line 319 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-3]))));
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_TEMP;
				}
#line 14529 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 115:
#line 327 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = PG_RELPERSISTENCE_UNLOGGED;
				}
#line 14538 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 116:
#line 332 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 14547 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 117:
#line 337 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->relpersistence = RELPERSISTENCE_PERMANENT;
				}
#line 14556 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 118:
#line 343 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {}
#line 14562 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 119:
#line 344 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {}
#line 14568 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 120:
#line 348 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 14574 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 121:
#line 349 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 14580 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 122:
#line 350 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 14586 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 123:
#line 357 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(NIL); }
#line 14592 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 124:
#line 358 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 14598 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 125:
#line 362 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL;}
#line 14604 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 126:
#line 363 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14610 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 127:
#line 367 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list);}
#line 14616 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 128:
#line 368 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 14622 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 129:
#line 372 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 14628 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 130:
#line 376 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].sortby)); }
#line 14634 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 131:
#line 377 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].sortby)); }
#line 14640 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 132:
#line 381 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-3].node);
					(yyval.sortby)->sortby_dir = SORTBY_USING;
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = (yyvsp[-1].list);
					(yyval.sortby)->location = (yylsp[-1]);
				}
#line 14653 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 133:
#line 390 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.sortby) = makeNode(PGSortBy);
					(yyval.sortby)->node = (yyvsp[-2].node);
					(yyval.sortby)->sortby_dir = (yyvsp[-1].sortorder);
					(yyval.sortby)->sortby_nulls = (yyvsp[0].nullorder);
					(yyval.sortby)->useOp = NIL;
					(yyval.sortby)->location = -1;		/* no operator */
				}
#line 14666 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 134:
#line 400 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.sortorder) = PG_SORTBY_ASC; }
#line 14672 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 135:
#line 401 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.sortorder) = PG_SORTBY_DESC; }
#line 14678 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 136:
#line 402 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.sortorder) = PG_SORTBY_DEFAULT; }
#line 14684 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 137:
#line 405 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.nullorder) = PG_SORTBY_NULLS_FIRST; }
#line 14690 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 138:
#line 406 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.nullorder) = PG_SORTBY_NULLS_LAST; }
#line 14696 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 139:
#line 407 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.nullorder) = PG_SORTBY_NULLS_DEFAULT; }
#line 14702 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 140:
#line 411 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-1].node)); }
#line 14708 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 141:
#line 412 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node)); }
#line 14714 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 142:
#line 413 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2(NULL, (yyvsp[0].node)); }
#line 14720 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 143:
#line 414 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[0].node), NULL); }
#line 14726 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 144:
#line 418 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 14732 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 145:
#line 419 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2(NULL,NULL); }
#line 14738 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 146:
#line 424 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14744 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 147:
#line 426 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* Disabled because it was too confusing, bjm 2002-02-18 */
					ereport(ERROR,
							(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("LIMIT #,# syntax is not supported"),
							 errhint("Use separate LIMIT and OFFSET clauses."),
							 parser_errposition((yylsp[-3]))));
				}
#line 14757 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 148:
#line 442 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-2].node); }
#line 14763 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 149:
#line 444 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeIntConst(1, -1); }
#line 14769 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 150:
#line 449 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14775 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 151:
#line 452 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 14781 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 152:
#line 460 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 14789 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 153:
#line 464 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 14797 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 154:
#line 468 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeFloat((yyvsp[-1].str)), true);
		}
#line 14805 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 155:
#line 472 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), true);
		}
#line 14813 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 156:
#line 476 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[0].ival)), false);
		}
#line 14821 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 157:
#line 480 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleSize(makeInteger((yyvsp[-1].ival)), false);
		}
#line 14829 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 158:
#line 487 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (yyvsp[0].node);
				}
#line 14837 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 159:
#line 491 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 14843 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 160:
#line 498 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 14849 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 161:
#line 499 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 14855 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 162:
#line 504 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSampleOptions((yyvsp[-2].node), (yyvsp[-4].str), (yyvsp[0].ival), (yylsp[-4]));
				}
#line 14863 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 163:
#line 508 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleOptions((yyvsp[0].node), NULL, -1, (yylsp[0]));
		}
#line 14871 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 164:
#line 512 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleOptions((yyvsp[-3].node), (yyvsp[-1].str), -1, (yylsp[-3]));
		}
#line 14879 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 165:
#line 516 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			(yyval.node) = makeSampleOptions((yyvsp[-5].node), (yyvsp[-3].str), (yyvsp[-1].ival), (yylsp[-5]));
		}
#line 14887 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 166:
#line 523 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (yyvsp[0].node);
				}
#line 14895 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 167:
#line 529 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14901 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 168:
#line 530 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 14907 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 169:
#line 535 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-1].ival); }
#line 14913 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 170:
#line 536 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = -1; }
#line 14919 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 171:
#line 540 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14925 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 172:
#line 542 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* LIMIT ALL is represented as a NULL constant */
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 14934 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 173:
#line 549 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14940 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 174:
#line 569 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 14946 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 175:
#line 571 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 14952 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 176:
#line 573 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 14958 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 177:
#line 577 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeIntConst((yyvsp[0].ival),(yylsp[0])); }
#line 14964 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 178:
#line 578 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeFloatConst((yyvsp[0].str),(yylsp[0])); }
#line 14970 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 179:
#line 582 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 14976 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 180:
#line 583 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 14982 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 181:
#line 586 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 14988 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 182:
#line 587 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 14994 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 183:
#line 612 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15000 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 184:
#line 613 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15006 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 185:
#line 617 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15012 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 186:
#line 618 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].node)); }
#line 15018 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 187:
#line 622 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15024 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 188:
#line 623 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15030 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 189:
#line 628 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeGroupingSet(GROUPING_SET_EMPTY, NIL, (yylsp[-1]));
				}
#line 15038 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 190:
#line 640 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15044 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 191:
#line 641 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15050 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 192:
#line 645 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15056 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 193:
#line 646 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15062 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 194:
#line 650 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15068 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 195:
#line 651 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15074 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 196:
#line 655 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15080 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 197:
#line 656 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 15086 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 198:
#line 661 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGLockingClause *n = makeNode(PGLockingClause);
					n->lockedRels = (yyvsp[-1].list);
					n->strength = (yyvsp[-2].lockstrength);
					n->waitPolicy = (yyvsp[0].lockwaitpolicy);
					(yyval.node) = (PGNode *) n;
				}
#line 15098 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 199:
#line 671 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = LCS_FORUPDATE; }
#line 15104 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 200:
#line 672 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = PG_LCS_FORNOKEYUPDATE; }
#line 15110 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 201:
#line 673 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = PG_LCS_FORSHARE; }
#line 15116 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 202:
#line 674 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockstrength) = PG_LCS_FORKEYSHARE; }
#line 15122 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 203:
#line 678 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15128 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 204:
#line 679 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15134 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 205:
#line 684 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockwaitpolicy) = LockWaitError; }
#line 15140 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 206:
#line 685 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockwaitpolicy) = PGLockWaitSkip; }
#line 15146 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 207:
#line 686 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.lockwaitpolicy) = PGLockWaitBlock; }
#line 15152 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 208:
#line 696 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = makeNode(PGSelectStmt);
					n->valuesLists = list_make1((yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 15162 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 209:
#line 702 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSelectStmt *n = (PGSelectStmt *) (yyvsp[-4].node);
					n->valuesLists = lappend(n->valuesLists, (yyvsp[-1].list));
					(yyval.node) = (PGNode *) n;
				}
#line 15172 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 210:
#line 719 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 15178 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 211:
#line 720 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15184 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 212:
#line 724 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15190 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 213:
#line 725 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 15196 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 214:
#line 732 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].range)->alias = (yyvsp[-1].alias);
					(yyvsp[-2].range)->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) (yyvsp[-2].range);
				}
#line 15206 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 215:
#line 738 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-2].node);
					n->alias = (PGAlias*) linitial((yyvsp[-1].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[-1].list));
					n->sample = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 15218 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 216:
#line 746 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = (PGRangeFunction *) (yyvsp[-1].node);
					n->lateral = true;
					n->alias = (PGAlias*) linitial((yyvsp[0].list));
					n->coldeflist = (PGList*) lsecond((yyvsp[0].list));
					(yyval.node) = (PGNode *) n;
				}
#line 15230 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 217:
#line 754 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = false;
					n->subquery = (yyvsp[-2].node);
					n->alias = (yyvsp[-1].alias);
					n->sample = (yyvsp[0].node);
					/*
					 * The SQL spec does not permit a subselect
					 * (<derived_table>) without an alias clause,
					 * so we don't either.  This avoids the problem
					 * of needing to invent a unique refname for it.
					 * That could be surmounted if there's sufficient
					 * popular demand, but for now let's just implement
					 * the spec and see if anyone complains.
					 * However, it does seem like a good idea to emit
					 * an error message that's better than "syntax error".
					 */
					if ((yyvsp[-1].alias) == NULL)
					{
						if (IsA((yyvsp[-2].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-2].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-2]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-2]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 15270 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 218:
#line 790 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeSubselect *n = makeNode(PGRangeSubselect);
					n->lateral = true;
					n->subquery = (yyvsp[-1].node);
					n->alias = (yyvsp[0].alias);
					n->sample = NULL;
					/* same comment as above */
					if ((yyvsp[0].alias) == NULL)
					{
						if (IsA((yyvsp[-1].node), PGSelectStmt) &&
							((PGSelectStmt *) (yyvsp[-1].node))->valuesLists)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("VALUES in FROM must have an alias"),
									 errhint("For example, FROM (VALUES ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
						else
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("subquery in FROM must have an alias"),
									 errhint("For example, FROM (SELECT ...) [AS] foo."),
									 parser_errposition((yylsp[-1]))));
					}
					(yyval.node) = (PGNode *) n;
				}
#line 15300 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 219:
#line 816 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) (yyvsp[0].jexpr);
				}
#line 15308 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 220:
#line 820 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].jexpr)->alias = (yyvsp[0].alias);
					(yyval.node) = (PGNode *) (yyvsp[-2].jexpr);
				}
#line 15317 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 221:
#line 825 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
			        (yyval.node) = (PGNode *) (yyvsp[0].node);
			    }
#line 15325 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 222:
#line 835 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGNodePattern *n = makeNode(PGNodePattern);
                    n->alias = (yyvsp[-3].str);
                    n->label = (yyvsp[-1].str);
                    (yyval.node) = (PGNode *) n;
                }
#line 15336 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 223:
#line 842 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGNodePattern *n = makeNode(PGNodePattern);
                    n->alias = (yyvsp[-1].str);
                    n->label = NULL;
                    (yyval.node) = (PGNode *) n;
                }
#line 15347 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 224:
#line 849 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGNodePattern *n = makeNode(PGNodePattern);
                    n->alias = NULL;
                    n->label = (yyvsp[-1].str);
                    (yyval.node) = (PGNode *) n;
                }
#line 15358 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 225:
#line 858 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15364 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 226:
#line 860 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGRelRange *n = makeNode(PGRelRange);
                    n->length_low = makeInteger(1);
                    n->length_high = makeInteger(-1);
                    (yyval.node) = (PGNode *) n;
                }
#line 15375 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 227:
#line 867 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGRelRange *n = makeNode(PGRelRange);
                    n->length_low = makeInteger((yyvsp[0].ival));
                    n->length_high = makeInteger((yyvsp[0].ival));
                    (yyval.node) = (PGNode *) n;
                }
#line 15386 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 228:
#line 874 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGRelRange *n = makeNode(PGRelRange);
                    n->length_low = makeInteger((yyvsp[-1].ival));
                    n->length_high = makeInteger(-1);
                    (yyval.node) = (PGNode *) n;
                }
#line 15397 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 229:
#line 881 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGRelRange *n = makeNode(PGRelRange);
                    n->length_low = makeInteger(1);
                    n->length_high = makeInteger((yyvsp[0].ival));
                    (yyval.node) = (PGNode *) n;
                }
#line 15408 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 230:
#line 888 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGRelRange *n = makeNode(PGRelRange);
                    n->length_low = makeInteger((yyvsp[-2].ival));
                    n->length_high = makeInteger((yyvsp[0].ival));
                    (yyval.node) = (PGNode *) n;
                }
#line 15419 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 231:
#line 898 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGPatternElement *n = makeNode(PGPatternElement);
                    n->direction = PGRelDirection::BACKWARD_DIRECTION;
                    n->rel_alias = (yyvsp[-6].str);
                    n->rel_label = (yyvsp[-4].str);
                    n->rel_range = (yyvsp[-3].node);
                    n->node_pattern = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) n;
                }
#line 15433 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 232:
#line 908 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGPatternElement *n = makeNode(PGPatternElement);
                    n->direction = PGRelDirection::BACKWARD_DIRECTION;
                    n->rel_alias = NULL;
                    n->rel_label = (yyvsp[-4].str);
                    n->rel_range = (yyvsp[-3].node);
                    n->node_pattern = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) n;
                }
#line 15447 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 233:
#line 918 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGPatternElement *n = makeNode(PGPatternElement);
                    n->direction = PGRelDirection::FORWARD_DIRECTION;
                    n->rel_alias = (yyvsp[-6].str);
                    n->rel_label = (yyvsp[-4].str);
                    n->rel_range = (yyvsp[-3].node);
                    n->node_pattern = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) n;
                }
#line 15461 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 234:
#line 928 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGPatternElement *n = makeNode(PGPatternElement);
                    n->direction = PGRelDirection::FORWARD_DIRECTION;
                    n->rel_alias = NULL;
                    n->rel_label = (yyvsp[-4].str);
                    n->rel_range = (yyvsp[-3].node);
                    n->node_pattern = (yyvsp[0].node);
                    (yyval.node) = (PGNode *) n;
                }
#line 15475 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 235:
#line 940 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 15481 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 236:
#line 941 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 15487 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 237:
#line 946 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGPathPattern *n = makeNode(PGPathPattern);
                    n->node = (yyvsp[0].node);
                    n->elements = NULL;
                    (yyval.node) = (PGNode *) n;
                }
#line 15498 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 238:
#line 953 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
                    PGPathPattern *n = makeNode(PGPathPattern);
                    n->node = (yyvsp[-1].node);
                    n->elements = (yyvsp[0].list);
                    (yyval.node) = (PGNode *) n;
                }
#line 15509 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 239:
#line 980 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.jexpr) = (yyvsp[-1].jexpr);
				}
#line 15517 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 240:
#line 984 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* CROSS JOIN is same as unqualified inner join */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL;
					n->quals = NULL;
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 15534 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 241:
#line 997 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-3].jtype);
					n->isNatural = false;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 15552 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 242:
#line 1011 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = false;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[-1].node);
					if ((yyvsp[0].node) != NULL && IsA((yyvsp[0].node), PGList))
						n->usingClause = (PGList *) (yyvsp[0].node); /* USING clause */
					else
						n->quals = (yyvsp[0].node); /* ON clause */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 15571 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 243:
#line 1026 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = (yyvsp[-2].jtype);
					n->isNatural = true;
					n->larg = (yyvsp[-4].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-3]);
					(yyval.jexpr) = n;
				}
#line 15587 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 244:
#line 1038 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* letting join_type reduce to empty doesn't work */
					PGJoinExpr *n = makeNode(PGJoinExpr);
					n->jointype = PG_JOIN_INNER;
					n->isNatural = true;
					n->larg = (yyvsp[-3].node);
					n->rarg = (yyvsp[0].node);
					n->usingClause = NIL; /* figure out which columns later... */
					n->quals = NULL; /* fill later */
					n->location = (yylsp[-2]);
					(yyval.jexpr) = n;
				}
#line 15604 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 245:
#line 1054 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 15614 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 246:
#line 1060 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 15623 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 247:
#line 1065 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[-3].str);
					(yyval.alias)->colnames = (yyvsp[-1].list);
				}
#line 15633 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 248:
#line 1071 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.alias) = makeNode(PGAlias);
					(yyval.alias)->aliasname = (yyvsp[0].str);
				}
#line 15642 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 249:
#line 1077 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.alias) = (yyvsp[0].alias); }
#line 15648 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 250:
#line 1078 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.alias) = NULL; }
#line 15654 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 251:
#line 1087 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2((yyvsp[0].alias), NIL);
				}
#line 15662 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 252:
#line 1091 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2(NULL, (yyvsp[-1].list));
				}
#line 15670 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 253:
#line 1095 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 15680 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 254:
#line 1101 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAlias *a = makeNode(PGAlias);
					a->aliasname = (yyvsp[-3].str);
					(yyval.list) = list_make2(a, (yyvsp[-1].list));
				}
#line 15690 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 255:
#line 1107 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2(NULL, NIL);
				}
#line 15698 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 256:
#line 1112 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_FULL; }
#line 15704 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 257:
#line 1113 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_LEFT; }
#line 15710 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 258:
#line 1114 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_RIGHT; }
#line 15716 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 259:
#line 1115 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.jtype) = PG_JOIN_INNER; }
#line 15722 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 260:
#line 1119 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15728 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 261:
#line 1120 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15734 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 262:
#line 1132 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 15740 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 263:
#line 1133 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15746 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 264:
#line 1139 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* inheritance query, implicitly */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 15757 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 265:
#line 1146 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* inheritance query, explicitly */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = true;
					(yyval.range)->alias = NULL;
				}
#line 15768 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 266:
#line 1153 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* no inheritance */
					(yyval.range) = (yyvsp[0].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 15779 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 267:
#line 1160 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* no inheritance, SQL99-style syntax */
					(yyval.range) = (yyvsp[-1].range);
					(yyval.range)->inh = false;
					(yyval.range)->alias = NULL;
				}
#line 15790 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 268:
#line 1192 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = false;
					n->functions = list_make1(list_make2((yyvsp[-1].node), NIL));
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 15805 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 269:
#line 1203 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGRangeFunction *n = makeNode(PGRangeFunction);
					n->lateral = false;
					n->ordinality = (yyvsp[0].boolean);
					n->is_rowsfrom = true;
					n->functions = (yyvsp[-2].list);
					n->sample = NULL;
					/* alias and coldeflist are set by table_ref production */
					(yyval.node) = (PGNode *) n;
				}
#line 15820 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 270:
#line 1216 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].list)); }
#line 15826 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 271:
#line 1220 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 15832 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 272:
#line 1221 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 15838 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 273:
#line 1224 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 15844 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 274:
#line 1225 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 15850 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 275:
#line 1228 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 15856 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 276:
#line 1229 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 15862 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 277:
#line 1234 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 15868 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 278:
#line 1235 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15874 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 279:
#line 1241 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 15882 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 280:
#line 1245 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 15890 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 281:
#line 1251 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-2].str);
					n->typeName = (yyvsp[-1].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collClause = (PGCollateClause *) (yyvsp[0].node);
					n->collOid = InvalidOid;
					n->constraints = NIL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 15912 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 282:
#line 1272 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 15924 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 283:
#line 1279 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 15930 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 284:
#line 1292 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
             (yyval.list) = list_make1(list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 15938 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 285:
#line 1295 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
             (yyval.list) = lappend((yyvsp[-3].list), list_make2(makeString((yyvsp[-1].str)), (yyvsp[0].typnam)));
            }
#line 15946 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 288:
#line 1302 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
				}
#line 15955 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 289:
#line 1307 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = (yyvsp[0].list);
					(yyval.typnam)->setof = true;
				}
#line 15965 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 290:
#line 1314 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
				}
#line 15974 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 291:
#line 1319 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-4].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger((yyvsp[-1].ival)));
					(yyval.typnam)->setof = true;
				}
#line 15984 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 292:
#line 1325 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
				}
#line 15993 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 293:
#line 1330 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->arrayBounds = list_make1(makeInteger(-1));
					(yyval.typnam)->setof = true;
				}
#line 16003 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 294:
#line 1335 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
               (yyval.typnam) = SystemTypeName("struct");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
               }
#line 16014 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 295:
#line 1341 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
               (yyval.typnam) = SystemTypeName("map");
               (yyval.typnam)->arrayBounds = (yyvsp[0].list);
               (yyval.typnam)->typmods = (yyvsp[-2].list);
               (yyval.typnam)->location = (yylsp[-4]);
			}
#line 16025 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 296:
#line 1351 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {  (yyval.list) = lappend((yyvsp[-2].list), makeInteger(-1)); }
#line 16031 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 297:
#line 1353 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {  (yyval.list) = lappend((yyvsp[-3].list), makeInteger((yyvsp[-1].ival))); }
#line 16037 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 298:
#line 1355 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {  (yyval.list) = NIL; }
#line 16043 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 299:
#line 1359 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16049 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 300:
#line 1360 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16055 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 301:
#line 1361 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16061 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 302:
#line 1362 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16067 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 303:
#line 1363 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16073 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 304:
#line 1365 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-1].typnam);
					(yyval.typnam)->typmods = (yyvsp[0].list);
				}
#line 16082 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 305:
#line 1370 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[-3].typnam);
					(yyval.typnam)->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											 makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
				}
#line 16092 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 306:
#line 1389 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16098 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 307:
#line 1390 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16104 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 308:
#line 1391 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16110 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 309:
#line 1392 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 16116 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 310:
#line 1404 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeName((yyvsp[-1].str));
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16126 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 311:
#line 1417 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 16132 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 312:
#line 1418 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 16138 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 313:
#line 1425 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16147 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 314:
#line 1430 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16156 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 315:
#line 1435 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int2");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16165 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 316:
#line 1440 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("int8");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16174 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 317:
#line 1445 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("float4");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16183 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 318:
#line 1450 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16192 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 319:
#line 1455 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("float8");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16201 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 320:
#line 1460 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16211 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 321:
#line 1466 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16221 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 322:
#line 1472 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("numeric");
					(yyval.typnam)->typmods = (yyvsp[0].list);
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16231 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 323:
#line 1478 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("bool");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16240 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 324:
#line 1485 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * Check FLOAT() precision limits assuming IEEE floating
					 * types - thomas 1997-09-18
					 */
					if ((yyvsp[-1].ival) < 1)
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be at least 1 bit"),
								 parser_errposition((yylsp[-1]))));
					else if ((yyvsp[-1].ival) <= 24)
						(yyval.typnam) = SystemTypeName("float4");
					else if ((yyvsp[-1].ival) <= 53)
						(yyval.typnam) = SystemTypeName("float8");
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_INVALID_PARAMETER_VALUE),
								 errmsg("precision for type float must be less than 54 bits"),
								 parser_errposition((yylsp[-1]))));
				}
#line 16265 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 325:
#line 1506 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("float4");
				}
#line 16273 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 326:
#line 1516 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16281 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 327:
#line 1520 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16289 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 328:
#line 1528 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16297 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 329:
#line 1532 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 16306 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 330:
#line 1540 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					const char *typname;

					typname = (yyvsp[-3].boolean) ? "varbit" : "bit";
					(yyval.typnam) = SystemTypeName(typname);
					(yyval.typnam)->typmods = (yyvsp[-1].list);
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 16319 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 331:
#line 1552 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* bit defaults to bit(1), varbit to no limit */
					if ((yyvsp[0].boolean))
					{
						(yyval.typnam) = SystemTypeName("varbit");
					}
					else
					{
						(yyval.typnam) = SystemTypeName("bit");
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					}
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16337 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 332:
#line 1573 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16345 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 333:
#line 1577 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16353 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 334:
#line 1583 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = (yyvsp[0].typnam);
				}
#line 16361 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 335:
#line 1587 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* Length was not specified so allow to be unrestricted.
					 * This handles problems with fixed-length (bpchar) strings
					 * which in column definitions must default to a length
					 * of one, but should not be constrained if the length
					 * was not specified.
					 */
					(yyval.typnam) = (yyvsp[0].typnam);
					(yyval.typnam)->typmods = NIL;
				}
#line 16376 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 336:
#line 1600 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName((yyvsp[-3].conststr));
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-1].ival), (yylsp[-1])));
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 16386 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 337:
#line 1608 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName((yyvsp[0].conststr));
					/* char defaults to char(1), varchar to no limit */
					if (strcmp((yyvsp[0].conststr), "bpchar") == 0)
						(yyval.typnam)->typmods = list_make1(makeIntConst(1, -1));
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16398 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 338:
#line 1618 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 16404 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 339:
#line 1620 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 16410 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 340:
#line 1622 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "varchar"; }
#line 16416 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 341:
#line 1624 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 16422 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 342:
#line 1626 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 16428 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 343:
#line 1628 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = (yyvsp[0].boolean) ? "varchar": "bpchar"; }
#line 16434 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 344:
#line 1632 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 16440 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 345:
#line 1633 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 16446 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 346:
#line 1641 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 16459 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 347:
#line 1650 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timestamptz");
					else
						(yyval.typnam) = SystemTypeName("timestamp");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16471 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 348:
#line 1658 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->typmods = list_make1(makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.typnam)->location = (yylsp[-4]);
				}
#line 16484 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 349:
#line 1667 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].boolean))
						(yyval.typnam) = SystemTypeName("timetz");
					else
						(yyval.typnam) = SystemTypeName("time");
					(yyval.typnam)->location = (yylsp[-1]);
				}
#line 16496 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 350:
#line 1678 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = SystemTypeName("interval");
					(yyval.typnam)->location = (yylsp[0]);
				}
#line 16505 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 351:
#line 1685 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 16511 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 352:
#line 1686 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 16517 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 353:
#line 1687 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 16523 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 370:
#line 1716 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR), (yylsp[0]))); }
#line 16529 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 371:
#line 1718 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MONTH), (yylsp[0]))); }
#line 16535 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 372:
#line 1720 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY), (yylsp[0]))); }
#line 16541 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 373:
#line 1722 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR), (yylsp[0]))); }
#line 16547 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 374:
#line 1724 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE), (yylsp[0]))); }
#line 16553 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 375:
#line 1726 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(SECOND), (yylsp[0]))); }
#line 16559 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 376:
#line 1728 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MILLISECOND), (yylsp[0]))); }
#line 16565 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 377:
#line 1730 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MICROSECOND), (yylsp[0]))); }
#line 16571 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 378:
#line 1732 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(YEAR) |
												 INTERVAL_MASK(MONTH), (yylsp[-2])));
				}
#line 16580 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 379:
#line 1737 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR), (yylsp[-2])));
				}
#line 16589 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 380:
#line 1742 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 16599 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 381:
#line 1748 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(DAY) |
												 INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 16610 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 382:
#line 1755 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE), (yylsp[-2])));
				}
#line 16619 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 383:
#line 1760 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(HOUR) |
												 INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 16629 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 384:
#line 1766 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1(makeIntConst(INTERVAL_MASK(MINUTE) |
												 INTERVAL_MASK(SECOND), (yylsp[-2])));
				}
#line 16638 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 385:
#line 1771 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 16644 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 386:
#line 1802 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 16650 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 387:
#line 1805 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 16656 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 388:
#line 1807 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = (yyvsp[-2].node);
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 16668 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 389:
#line 1815 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("timezone"),
											   list_make2((yyvsp[0].node), (yyvsp[-4].node)),
											   (yylsp[-3]));
				}
#line 16678 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 390:
#line 1830 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 16684 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 391:
#line 1832 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 16690 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 392:
#line 1834 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16696 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 393:
#line 1836 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16702 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 394:
#line 1838 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16708 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 395:
#line 1840 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16714 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 396:
#line 1842 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16720 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 397:
#line 1844 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16726 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 398:
#line 1846 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16732 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 399:
#line 1848 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16738 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 400:
#line 1850 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16744 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 401:
#line 1852 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16750 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 402:
#line 1854 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16756 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 403:
#line 1856 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16762 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 404:
#line 1859 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16768 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 405:
#line 1861 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 16774 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 406:
#line 1863 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 16780 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 407:
#line 1866 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeAndExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16786 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 408:
#line 1868 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeOrExpr((yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 16792 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 409:
#line 1870 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 16798 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 410:
#line 1872 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeNotExpr((yyvsp[0].node), (yylsp[-1])); }
#line 16804 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 411:
#line 1875 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_GLOB, "~~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 16813 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 412:
#line 1880 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "~~",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 16822 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 413:
#line 1885 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make3((yyvsp[-4].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) n;
				}
#line 16833 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 414:
#line 1892 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_LIKE, "!~~",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 16842 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 415:
#line 1897 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make3((yyvsp[-5].node), (yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) n;
				}
#line 16853 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 416:
#line 1904 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
				}
#line 16862 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 417:
#line 1909 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "~~*",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 16874 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 418:
#line 1917 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
				}
#line 16883 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 419:
#line 1922 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("not_like_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_ILIKE, "!~~*",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 16895 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 420:
#line 1931 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-2]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-3].node), (PGNode *) n, (yylsp[-2]));
				}
#line 16907 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 421:
#line 1939 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-4]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "~",
												   (yyvsp[-5].node), (PGNode *) n, (yylsp[-4]));
				}
#line 16919 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 422:
#line 1947 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[0].node), makeNullAConst(-1)),
											   (yylsp[-3]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-4].node), (PGNode *) n, (yylsp[-3]));
				}
#line 16931 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 423:
#line 1955 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall(SystemFuncName("similar_escape"),
											   list_make2((yyvsp[-2].node), (yyvsp[0].node)),
											   (yylsp[-5]));
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_SIMILAR, "!~",
												   (yyvsp[-6].node), (PGNode *) n, (yylsp[-5]));
				}
#line 16943 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 424:
#line 1973 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 16955 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 425:
#line 1981 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = PG_IS_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 16967 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 426:
#line 1989 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-3].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 16979 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 427:
#line 1997 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-2].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 16991 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 428:
#line 2005 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNullTest *n = makeNode(PGNullTest);
					n->arg = (PGExpr *) (yyvsp[-1].node);
					n->nulltesttype = IS_NOT_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17003 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 429:
#line 2012 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGFuncCall *n = makeFuncCall(SystemFuncName("row"), (yyvsp[0].list), (yylsp[0]));
				(yyval.node) = (PGNode *) n;
			}
#line 17012 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 430:
#line 2016 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGFuncCall *n = makeFuncCall(SystemFuncName("struct_pack"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 17021 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 431:
#line 2020 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGFuncCall *n = makeFuncCall(SystemFuncName("list_value"), (yyvsp[-1].list), (yylsp[-1]));
				(yyval.node) = (PGNode *) n;
			}
#line 17030 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 432:
#line 2025 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = (yyvsp[-2].list);
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 17042 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 433:
#line 2033 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGLambdaFunction *n = makeNode(PGLambdaFunction);
				n->parameters = list_make1((yyvsp[-2].node));
				n->function = (yyvsp[0].node);
				n->location = (yylsp[-1]);
				(yyval.node) = (PGNode *) n;
			}
#line 17054 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 434:
#line 2041 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if (list_length((yyvsp[-2].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on left side of OVERLAPS expression"),
								 parser_errposition((yylsp[-2]))));
					if (list_length((yyvsp[0].list)) != 2)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("wrong number of parameters on right side of OVERLAPS expression"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlaps"),
											   list_concat((yyvsp[-2].list), (yyvsp[0].list)),
											   (yylsp[-1]));
				}
#line 17074 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 435:
#line 2057 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = PG_IS_TRUE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17086 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 436:
#line 2065 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_TRUE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17098 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 437:
#line 2073 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_FALSE;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17110 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 438:
#line 2081 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_FALSE;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17122 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 439:
#line 2089 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-2].node);
					b->booltesttype = IS_UNKNOWN;
					b->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)b;
				}
#line 17134 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 440:
#line 2097 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGBooleanTest *b = makeNode(PGBooleanTest);
					b->arg = (PGExpr *) (yyvsp[-3].node);
					b->booltesttype = IS_NOT_UNKNOWN;
					b->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)b;
				}
#line 17146 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 441:
#line 2105 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 17154 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 442:
#line 2109 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 17162 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 443:
#line 2113 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17170 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 444:
#line 2117 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 17178 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 445:
#line 2121 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN,
												   "BETWEEN",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17190 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 446:
#line 2129 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN,
												   "NOT BETWEEN",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 17202 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 447:
#line 2137 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_BETWEEN_SYM,
												   "BETWEEN SYMMETRIC",
												   (yyvsp[-5].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-4]));
				}
#line 17214 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 448:
#line 2145 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_BETWEEN_SYM,
												   "NOT BETWEEN SYMMETRIC",
												   (yyvsp[-6].node),
												   (PGNode *) list_make2((yyvsp[-2].node), (yyvsp[0].node)),
												   (yylsp[-5]));
				}
#line 17226 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 449:
#line 2153 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate foo = ANY (subquery) */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-2].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-1]);
						(yyval.node) = (PGNode *)n;
					}
					else
					{
						/* generate scalar IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1]));
					}
				}
#line 17250 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 450:
#line 2173 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* in_expr returns a PGSubLink or a list of a_exprs */
					if (IsA((yyvsp[0].node), PGSubLink))
					{
						/* generate NOT (foo = ANY (subquery)) */
						/* Make an = ANY node */
						PGSubLink *n = (PGSubLink *) (yyvsp[0].node);
						n->subLinkType = PG_ANY_SUBLINK;
						n->subLinkId = 0;
						n->testexpr = (yyvsp[-3].node);
						n->operName = NIL;		/* show it's IN not = ANY */
						n->location = (yylsp[-2]);
						/* Stick a NOT on top; must have same parse location */
						(yyval.node) = makeNotExpr((PGNode *) n, (yylsp[-2]));
					}
					else
					{
						/* generate scalar NOT IN expression */
						(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_IN, "<>", (yyvsp[-3].node), (yyvsp[0].node), (yylsp[-2]));
					}
				}
#line 17276 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 451:
#line 2195 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = (yyvsp[-1].subquerytype);
					n->subLinkId = 0;
					n->testexpr = (yyvsp[-3].node);
					n->operName = (yyvsp[-2].list);
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *)n;
				}
#line 17291 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 452:
#line 2206 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[-3].subquerytype) == PG_ANY_SUBLINK)
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ANY, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
					else
						(yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP_ALL, (yyvsp[-4].list), (yyvsp[-5].node), (yyvsp[-1].node), (yylsp[-4]));
				}
#line 17302 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 453:
#line 2213 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * The SQL spec only allows DEFAULT in "contextually typed
					 * expressions", but for us, it's easier to allow it in
					 * any a_expr and then throw error during parse analysis
					 * if it's in an inappropriate context.  This way also
					 * lets us say something smarter than "syntax error".
					 */
					PGSetToDefault *n = makeNode(PGSetToDefault);
					/* parse analysis will fill in the rest */
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17320 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 454:
#line 2226 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
				PGList *func_name = list_make1(makeString("construct_array"));
				PGFuncCall *n = makeFuncCall(func_name, (yyvsp[-1].list), (yylsp[-3]));
				(yyval.node) = (PGNode *) n;
			}
#line 17330 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 455:
#line 2243 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 17336 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 456:
#line 2245 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeTypeCast((yyvsp[-2].node), (yyvsp[0].typnam), 0, (yylsp[-1])); }
#line 17342 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 457:
#line 2247 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17348 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 458:
#line 2249 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = doNegate((yyvsp[0].node), (yylsp[-1])); }
#line 17354 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 459:
#line 2251 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "+", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17360 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 460:
#line 2253 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17366 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 461:
#line 2255 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "*", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17372 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 462:
#line 2257 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "/", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17378 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 463:
#line 2259 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "%", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17384 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 464:
#line 2261 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "^", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17390 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 465:
#line 2263 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17396 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 466:
#line 2265 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17402 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 467:
#line 2267 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17408 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 468:
#line 2269 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17414 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 469:
#line 2271 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, ">=", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17420 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 470:
#line 2273 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "<>", (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17426 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 471:
#line 2275 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), (yyvsp[-2].node), (yyvsp[0].node), (yylsp[-1])); }
#line 17432 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 472:
#line 2277 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[-1].list), NULL, (yyvsp[0].node), (yylsp[-1])); }
#line 17438 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 473:
#line 2279 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeAExpr(PG_AEXPR_OP, (yyvsp[0].list), (yyvsp[-1].node), NULL, (yylsp[0])); }
#line 17444 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 474:
#line 2281 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_DISTINCT, "=", (yyvsp[-4].node), (yyvsp[0].node), (yylsp[-3]));
				}
#line 17452 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 475:
#line 2285 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NOT_DISTINCT, "=", (yyvsp[-5].node), (yyvsp[0].node), (yylsp[-4]));
				}
#line 17460 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 476:
#line 2289 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "=", (yyvsp[-5].node), (PGNode *) (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17468 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 477:
#line 2293 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_OF, "<>", (yyvsp[-6].node), (PGNode *) (yyvsp[-1].list), (yylsp[-5]));
				}
#line 17476 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 478:
#line 2306 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 17482 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 479:
#line 2307 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 17488 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 480:
#line 2309 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGPositionalReference *n = makeNode(PGPositionalReference);
					n->position = (yyvsp[0].ival);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 17499 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 481:
#line 2316 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeParamRef(0, (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeParamRef(0, (yylsp[-1]));
				}
#line 17515 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 482:
#line 2328 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGParamRef *p = makeNode(PGParamRef);
					p->number = (yyvsp[-1].ival);
					p->location = (yylsp[-1]);
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (PGNode *) p;
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = (PGNode *) p;
				}
#line 17534 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 483:
#line 2343 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-2].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else
						(yyval.node) = (yyvsp[-2].node);
				}
#line 17550 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 484:
#line 2355 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 17556 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 485:
#line 2357 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].list)) {
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = (yyvsp[-1].node);
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *)n;
					}
					else {
						(yyval.node) = (yyvsp[-1].node);
					}
				}
#line 17572 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 486:
#line 2369 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 17587 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 487:
#line 2380 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * Because the select_with_parens nonterminal is designed
					 * to "eat" as many levels of parens as possible, the
					 * '(' a_expr ')' opt_indirection production above will
					 * fail to match a sub-SELECT with indirection decoration;
					 * the sub-SELECT won't be regarded as an a_expr as long
					 * as there are parens around it.  To support applying
					 * subscripting or field selection to a sub-SELECT result,
					 * we need this redundant-looking production.
					 */
					PGSubLink *n = makeNode(PGSubLink);
					PGAIndirection *a = makeNode(PGAIndirection);
					n->subLinkType = PG_EXPR_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[-1].node);
					n->location = (yylsp[-1]);
					a->arg = (PGNode *)n;
					a->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.node) = (PGNode *)a;
				}
#line 17615 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 488:
#line 2404 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subLinkType = PG_EXISTS_SUBLINK;
					n->subLinkId = 0;
					n->testexpr = NULL;
					n->operName = NIL;
					n->subselect = (yyvsp[0].node);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 17630 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 489:
#line 2417 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall((yyvsp[-2].list), NIL, (yylsp[-2]));
				}
#line 17638 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 490:
#line 2421 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-4].list), (yyvsp[-2].list), (yylsp[-4]));
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17648 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 491:
#line 2427 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), list_make1((yyvsp[-2].node)), (yylsp[-5]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17659 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 492:
#line 2434 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-7].list), lappend((yyvsp[-5].list), (yyvsp[-2].node)), (yylsp[-7]));
					n->func_variadic = true;
					n->agg_order = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 17670 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 493:
#line 2441 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					/* Ideally we'd mark the PGFuncCall node to indicate
					 * "must be an aggregate", but there's no provision
					 * for that in PGFuncCall at the moment.
					 */
					(yyval.node) = (PGNode *)n;
				}
#line 17684 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 494:
#line 2451 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = makeFuncCall((yyvsp[-5].list), (yyvsp[-2].list), (yylsp[-5]));
					n->agg_order = (yyvsp[-1].list);
					n->agg_distinct = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17695 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 495:
#line 2458 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * We consider AGGREGATE(*) to invoke a parameterless
					 * aggregate.  This does the right thing for COUNT(*),
					 * and there are no other aggregates in SQL that accept
					 * '*' as parameter.
					 *
					 * The PGFuncCall node is also marked agg_star = true,
					 * so that later processing can detect what the argument
					 * really was.
					 */
					PGFuncCall *n = makeFuncCall((yyvsp[-3].list), NIL, (yylsp[-3]));
					n->agg_star = true;
					(yyval.node) = (PGNode *)n;
				}
#line 17715 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 496:
#line 2486 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGFuncCall *n = (PGFuncCall *) (yyvsp[-3].node);
					/*
					 * The order clause for WITHIN GROUP and the one for
					 * plain-aggregate ORDER BY share a field, so we have to
					 * check here that at most one is present.  We also check
					 * for DISTINCT and VARIADIC here to give a better error
					 * location.  Other consistency checks are deferred to
					 * parse analysis.
					 */
					if ((yyvsp[-2].list) != NIL)
					{
						if (n->agg_order != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use multiple ORDER BY clauses with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->agg_distinct)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use DISTINCT with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						if (n->func_variadic)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("cannot use VARIADIC with WITHIN GROUP"),
									 parser_errposition((yylsp[-2]))));
						n->agg_order = (yyvsp[-2].list);
						n->agg_within_group = true;
					}
					n->agg_filter = (yyvsp[-1].node);
					n->over = (yyvsp[0].windef);
					(yyval.node) = (PGNode *) n;
				}
#line 17754 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 497:
#line 2521 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 17760 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 498:
#line 2531 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 17766 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 499:
#line 2532 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 17772 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 500:
#line 2540 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("pg_collation_for"),
											   list_make1((yyvsp[-1].node)),
											   (yylsp[-4]));
				}
#line 17782 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 501:
#line 2546 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_DATE, -1, (yylsp[0]));
				}
#line 17790 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 502:
#line 2550 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME, -1, (yylsp[0]));
				}
#line 17798 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 503:
#line 2554 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 17806 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 504:
#line 2558 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP, -1, (yylsp[0]));
				}
#line 17814 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 505:
#line 2562 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_TIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 17822 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 506:
#line 2566 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME, -1, (yylsp[0]));
				}
#line 17830 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 507:
#line 2570 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIME_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 17838 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 508:
#line 2574 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP, -1, (yylsp[0]));
				}
#line 17846 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 509:
#line 2578 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_LOCALTIMESTAMP_N, (yyvsp[-1].ival), (yylsp[-3]));
				}
#line 17854 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 510:
#line 2582 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_ROLE, -1, (yylsp[0]));
				}
#line 17862 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 511:
#line 2586 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_USER, -1, (yylsp[0]));
				}
#line 17870 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 512:
#line 2590 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_SESSION_USER, -1, (yylsp[0]));
				}
#line 17878 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 513:
#line 2594 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_USER, -1, (yylsp[0]));
				}
#line 17886 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 514:
#line 2598 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_CATALOG, -1, (yylsp[0]));
				}
#line 17894 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 515:
#line 2602 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeSQLValueFunction(PG_SVFOP_CURRENT_SCHEMA, -1, (yylsp[0]));
				}
#line 17902 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 516:
#line 2606 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 0, (yylsp[-5])); }
#line 17908 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 517:
#line 2608 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = makeTypeCast((yyvsp[-3].node), (yyvsp[-1].typnam), 1, (yylsp[-5])); }
#line 17914 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 518:
#line 2610 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("date_part"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17922 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 519:
#line 2614 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* overlay(A PLACING B FROM C FOR D) is converted to
					 * overlay(A, B, C, D)
					 * overlay(A PLACING B FROM C) is converted to
					 * overlay(A, B, C)
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("overlay"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17935 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 520:
#line 2623 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* position(A in B) is converted to position(B, A) */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("position"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17944 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 521:
#line 2628 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* substring(A from B for C) is converted to
					 * substring(A, B, C) - thomas 2000-11-28
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("substring"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 17955 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 522:
#line 2635 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* TREAT(expr AS target) converts expr of a particular type to target,
					 * which is defined to be a subtype of the original expression.
					 * In SQL99, this is intended for use with structured UDTs,
					 * but let's make this a generally useful form allowing stronger
					 * coercions than are handled by implicit casting.
					 *
					 * Convert SystemTypeName() to SystemFuncName() even though
					 * at the moment they result in the same thing.
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName(((PGValue *)llast((yyvsp[-1].typnam)->names))->val.str),
												list_make1((yyvsp[-3].node)),
												(yylsp[-5]));
				}
#line 17974 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 523:
#line 2650 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* various trim expressions are defined in SQL
					 * - thomas 1997-07-19
					 */
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17985 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 524:
#line 2657 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("ltrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 17993 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 525:
#line 2661 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("rtrim"), (yyvsp[-1].list), (yylsp[-4]));
				}
#line 18001 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 526:
#line 2665 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeFuncCall(SystemFuncName("trim"), (yyvsp[-1].list), (yylsp[-3]));
				}
#line 18009 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 527:
#line 2669 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeSimpleAExpr(PG_AEXPR_NULLIF, "=", (yyvsp[-3].node), (yyvsp[-1].node), (yylsp[-5]));
				}
#line 18017 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 528:
#line 2673 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCoalesceExpr *c = makeNode(PGCoalesceExpr);
					c->args = (yyvsp[-1].list);
					c->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)c;
				}
#line 18028 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 529:
#line 2686 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 18034 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 530:
#line 2687 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18040 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 531:
#line 2691 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[-1].node); }
#line 18046 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 532:
#line 2692 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 18052 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 533:
#line 2700 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 18058 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 534:
#line 2701 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18064 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 535:
#line 2705 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].windef)); }
#line 18070 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 536:
#line 2707 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].windef)); }
#line 18076 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 537:
#line 2712 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					n->name = (yyvsp[-2].str);
					(yyval.windef) = n;
				}
#line 18086 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 538:
#line 2720 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.windef) = (yyvsp[0].windef); }
#line 18092 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 539:
#line 2722 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = (yyvsp[0].str);
					n->refname = NULL;
					n->partitionClause = NIL;
					n->orderClause = NIL;
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					n->location = (yylsp[0]);
					(yyval.windef) = n;
				}
#line 18109 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 540:
#line 2735 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.windef) = NULL; }
#line 18115 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 541:
#line 2740 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->name = NULL;
					n->refname = (yyvsp[-4].str);
					n->partitionClause = (yyvsp[-3].list);
					n->orderClause = (yyvsp[-2].list);
					/* copy relevant fields of opt_frame_clause */
					n->frameOptions = (yyvsp[-1].windef)->frameOptions;
					n->startOffset = (yyvsp[-1].windef)->startOffset;
					n->endOffset = (yyvsp[-1].windef)->endOffset;
					n->location = (yylsp[-5]);
					(yyval.windef) = n;
				}
#line 18133 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 542:
#line 2765 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 18139 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 543:
#line 2766 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 18145 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 544:
#line 2769 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 18151 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 545:
#line 2770 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18157 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 546:
#line 2782 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_RANGE;
					(yyval.windef) = n;
				}
#line 18167 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 547:
#line 2788 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					n->frameOptions |= FRAMEOPTION_NONDEFAULT | FRAMEOPTION_ROWS;
					(yyval.windef) = n;
				}
#line 18177 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 548:
#line 2794 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_DEFAULTS;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18189 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 549:
#line 2804 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = (yyvsp[0].windef);
					/* reject invalid cases */
					if (n->frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[0]))));
					if (n->frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot end with current row"),
								 parser_errposition((yylsp[0]))));
					n->frameOptions |= FRAMEOPTION_END_CURRENT_ROW;
					(yyval.windef) = n;
				}
#line 18210 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 550:
#line 2821 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n1 = (yyvsp[-2].windef);
					PGWindowDef *n2 = (yyvsp[0].windef);
					/* form merged options */
					int		frameOptions = n1->frameOptions;
					/* shift converts START_ options to END_ options */
					frameOptions |= n2->frameOptions << 1;
					frameOptions |= FRAMEOPTION_BETWEEN;
					/* reject invalid cases */
					if (frameOptions & FRAMEOPTION_START_UNBOUNDED_FOLLOWING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame start cannot be UNBOUNDED FOLLOWING"),
								 parser_errposition((yylsp[-2]))));
					if (frameOptions & FRAMEOPTION_END_UNBOUNDED_PRECEDING)
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame end cannot be UNBOUNDED PRECEDING"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_CURRENT_ROW) &&
						(frameOptions & FRAMEOPTION_END_VALUE_PRECEDING))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from current row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					if ((frameOptions & FRAMEOPTION_START_VALUE_FOLLOWING) &&
						(frameOptions & (FRAMEOPTION_END_VALUE_PRECEDING |
										 FRAMEOPTION_END_CURRENT_ROW)))
						ereport(ERROR,
								(errcode(PG_ERRCODE_WINDOWING_ERROR),
								 errmsg("frame starting from following row cannot have preceding rows"),
								 parser_errposition((yylsp[0]))));
					n1->frameOptions = frameOptions;
					n1->endOffset = n2->startOffset;
					(yyval.windef) = n1;
				}
#line 18251 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 551:
#line 2866 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_PRECEDING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18263 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 552:
#line 2874 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_UNBOUNDED_FOLLOWING;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18275 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 553:
#line 2882 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_CURRENT_ROW;
					n->startOffset = NULL;
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18287 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 554:
#line 2890 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_PRECEDING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18299 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 555:
#line 2898 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGWindowDef *n = makeNode(PGWindowDef);
					n->frameOptions = FRAMEOPTION_START_VALUE_FOLLOWING;
					n->startOffset = (yyvsp[-1].node);
					n->endOffset = NULL;
					(yyval.windef) = n;
				}
#line 18311 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 556:
#line 2918 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 18317 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 557:
#line 2919 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18323 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 558:
#line 2922 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list);}
#line 18329 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 559:
#line 2923 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-3].list), (yyvsp[-1].node)); }
#line 18335 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 560:
#line 2927 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
		PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
		na->name = (yyvsp[-2].str);
		na->arg = (PGExpr *) (yyvsp[0].node);
		na->argnumber = -1;
		na->location = (yylsp[-2]);
		(yyval.node) = (PGNode *) na;
	}
#line 18348 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 561:
#line 2937 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18354 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 562:
#line 2938 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 18360 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 563:
#line 2940 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 18366 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 564:
#line 2941 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.subquerytype) = PG_ANY_SUBLINK; }
#line 18372 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 565:
#line 2942 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.subquerytype) = PG_ALL_SUBLINK; }
#line 18378 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 566:
#line 2945 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 18384 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 567:
#line 2946 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) (yyvsp[0].conststr); }
#line 18390 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 568:
#line 2949 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "+"; }
#line 18396 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 569:
#line 2950 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "-"; }
#line 18402 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 570:
#line 2951 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "*"; }
#line 18408 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 571:
#line 2952 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "/"; }
#line 18414 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 572:
#line 2953 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "%"; }
#line 18420 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 573:
#line 2954 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "^"; }
#line 18426 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 574:
#line 2955 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "<"; }
#line 18432 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 575:
#line 2956 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = ">"; }
#line 18438 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 576:
#line 2957 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "="; }
#line 18444 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 577:
#line 2958 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "<="; }
#line 18450 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 578:
#line 2959 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = ">="; }
#line 18456 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 579:
#line 2960 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.conststr) = "<>"; }
#line 18462 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 580:
#line 2964 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 18468 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 581:
#line 2966 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 18474 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 582:
#line 2971 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 18480 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 583:
#line 2973 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 18486 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 584:
#line 2978 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 18492 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 585:
#line 2980 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 18498 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 586:
#line 2982 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("~~")); }
#line 18504 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 587:
#line 2984 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("!~~")); }
#line 18510 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 588:
#line 2986 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("~~~")); }
#line 18516 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 589:
#line 2988 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("!~~~")); }
#line 18522 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 590:
#line 2990 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("~~*")); }
#line 18528 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 591:
#line 2992 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString("!~~*")); }
#line 18534 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 592:
#line 3006 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 18540 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 593:
#line 3008 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lcons(makeString((yyvsp[-2].str)), (yyvsp[0].list)); }
#line 18546 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 594:
#line 3012 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 18554 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 595:
#line 3016 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 18562 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 596:
#line 3023 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = (yyvsp[0].list);
				}
#line 18570 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 597:
#line 3027 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = NULL;
				}
#line 18578 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 598:
#line 3035 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 18586 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 599:
#line 3039 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 18594 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 600:
#line 3045 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (yyvsp[0].node);
				}
#line 18602 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 601:
#line 3049 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 18615 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 602:
#line 3058 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGNamedArgExpr *na = makeNode(PGNamedArgExpr);
					na->name = (yyvsp[-2].str);
					na->arg = (PGExpr *) (yyvsp[0].node);
					na->argnumber = -1;		/* until determined */
					na->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) na;
				}
#line 18628 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 603:
#line 3068 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].typnam)); }
#line 18634 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 604:
#line 3069 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].typnam)); }
#line 18640 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 605:
#line 3074 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2(makeStringConst((yyvsp[-2].str), (yylsp[-2])), (yyvsp[0].node));
				}
#line 18648 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 606:
#line 3077 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18654 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 607:
#line 3084 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 18660 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 608:
#line 3085 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "year"; }
#line 18666 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 609:
#line 3086 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "month"; }
#line 18672 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 610:
#line 3087 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "day"; }
#line 18678 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 611:
#line 3088 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "hour"; }
#line 18684 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 612:
#line 3089 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "minute"; }
#line 18690 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 613:
#line 3090 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "second"; }
#line 18696 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 614:
#line 3091 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "millisecond"; }
#line 18702 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 615:
#line 3092 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "microsecond"; }
#line 18708 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 616:
#line 3093 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 18714 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 617:
#line 3104 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make4((yyvsp[-3].node), (yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 18722 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 618:
#line 3108 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 18730 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 619:
#line 3115 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18736 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 620:
#line 3121 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make2((yyvsp[0].node), (yyvsp[-2].node)); }
#line 18742 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 621:
#line 3122 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18748 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 622:
#line 3139 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[-1].node), (yyvsp[0].node));
				}
#line 18756 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 623:
#line 3143 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* not legal per SQL99, but might as well allow it */
					(yyval.list) = list_make3((yyvsp[-2].node), (yyvsp[0].node), (yyvsp[-1].node));
				}
#line 18765 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 624:
#line 3148 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make2((yyvsp[-1].node), (yyvsp[0].node));
				}
#line 18773 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 625:
#line 3152 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/*
					 * Since there are no cases where this syntax allows
					 * a textual FOR value, we forcibly cast the argument
					 * to int4.  The possible matches in pg_proc are
					 * substring(text,int4) and substring(text,text),
					 * and we don't want the parser to choose the latter,
					 * which it is likely to do if the second argument
					 * is unknown or doesn't have an implicit cast to int4.
					 */
					(yyval.list) = list_make3((yyvsp[-1].node), makeIntConst(1, -1),
									makeTypeCast((yyvsp[0].node),
												 SystemTypeName("int4"), 0, -1));
				}
#line 18792 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 626:
#line 3167 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.list) = (yyvsp[0].list);
				}
#line 18800 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 627:
#line 3171 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 18806 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 628:
#line 3175 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18812 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 629:
#line 3178 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18818 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 630:
#line 3181 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[0].list), (yyvsp[-2].node)); }
#line 18824 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 631:
#line 3182 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 18830 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 632:
#line 3183 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 18836 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 633:
#line 3187 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGSubLink *n = makeNode(PGSubLink);
					n->subselect = (yyvsp[0].node);
					/* other fields will be filled later */
					(yyval.node) = (PGNode *)n;
				}
#line 18847 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 634:
#line 3193 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[-1].list); }
#line 18853 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 635:
#line 3204 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCaseExpr *c = makeNode(PGCaseExpr);
					c->casetype = InvalidOid; /* not analyzed yet */
					c->arg = (PGExpr *) (yyvsp[-3].node);
					c->args = (yyvsp[-2].list);
					c->defresult = (PGExpr *) (yyvsp[-1].node);
					c->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)c;
				}
#line 18867 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 636:
#line 3217 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18873 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 637:
#line 3218 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 18879 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 638:
#line 3223 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGCaseWhen *w = makeNode(PGCaseWhen);
					w->expr = (PGExpr *) (yyvsp[-2].node);
					w->result = (PGExpr *) (yyvsp[0].node);
					w->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)w;
				}
#line 18891 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 639:
#line 3233 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18897 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 640:
#line 3234 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 18903 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 641:
#line 3237 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18909 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 642:
#line 3238 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 18915 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 643:
#line 3242 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeColumnRef((yyvsp[0].str), NIL, (yylsp[0]), yyscanner);
				}
#line 18923 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 644:
#line 3246 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeColumnRef((yyvsp[-1].str), (yyvsp[0].list), (yylsp[-1]), yyscanner);
				}
#line 18931 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 645:
#line 3253 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 18939 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 646:
#line 3257 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeNode(PGAStar);
				}
#line 18947 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 647:
#line 3261 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = false;
					ai->lidx = NULL;
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 18959 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 648:
#line 3269 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGAIndices *ai = makeNode(PGAIndices);
					ai->is_slice = true;
					ai->lidx = (yyvsp[-3].node);
					ai->uidx = (yyvsp[-1].node);
					(yyval.node) = (PGNode *) ai;
				}
#line 18971 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 649:
#line 3279 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 18977 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 650:
#line 3280 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 18983 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 651:
#line 3284 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 18989 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 652:
#line 3285 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 18995 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 653:
#line 3289 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19001 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 654:
#line 3290 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 19007 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 657:
#line 3304 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 19013 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 658:
#line 3305 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19019 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 659:
#line 3309 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 19025 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 660:
#line 3310 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 19031 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 661:
#line 3314 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-2].node);
					(yyval.target)->location = (yylsp[-2]);
				}
#line 19043 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 662:
#line 3330 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[0].str);
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[-1].node);
					(yyval.target)->location = (yylsp[-1]);
				}
#line 19055 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 663:
#line 3338 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)(yyvsp[0].node);
					(yyval.target)->location = (yylsp[0]);
				}
#line 19067 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 664:
#line 3346 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					PGColumnRef *n = makeNode(PGColumnRef);
					n->fields = list_make1(makeNode(PGAStar));
					n->location = (yylsp[0]);

					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = NULL;
					(yyval.target)->indirection = NIL;
					(yyval.target)->val = (PGNode *)n;
					(yyval.target)->location = (yylsp[0]);
				}
#line 19083 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 665:
#line 3367 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].range)); }
#line 19089 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 666:
#line 3368 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].range)); }
#line 19095 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 667:
#line 3380 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.range) = makeRangeVar(NULL, (yyvsp[0].str), (yylsp[0]));
				}
#line 19103 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 668:
#line 3384 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					check_qualified_name((yyvsp[0].list), yyscanner);
					(yyval.range) = makeRangeVar(NULL, NULL, (yylsp[-1]));
					switch (list_length((yyvsp[0].list)))
					{
						case 1:
							(yyval.range)->catalogname = NULL;
							(yyval.range)->schemaname = (yyvsp[-1].str);
							(yyval.range)->relname = strVal(linitial((yyvsp[0].list)));
							break;
						case 2:
							(yyval.range)->catalogname = (yyvsp[-1].str);
							(yyval.range)->schemaname = strVal(linitial((yyvsp[0].list)));
							(yyval.range)->relname = strVal(lsecond((yyvsp[0].list)));
							break;
						default:
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("improper qualified name (too many dotted names): %s",
											NameListToString(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)))),
									 parser_errposition((yylsp[-1]))));
							break;
					}
				}
#line 19132 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 669:
#line 3411 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19138 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 670:
#line 3413 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 19144 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 671:
#line 3417 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19150 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 672:
#line 3419 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19156 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 673:
#line 3430 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19162 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 674:
#line 3433 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
						(yyval.list) = check_func_name(lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)),
											 yyscanner);
					}
#line 19171 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 675:
#line 3444 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntConst((yyvsp[0].ival), (yylsp[0]));
				}
#line 19179 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 676:
#line 3448 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeFloatConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19187 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 677:
#line 3452 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					if ((yyvsp[0].list))
					{
						PGAIndirection *n = makeNode(PGAIndirection);
						n->arg = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
						n->indirection = check_indirection((yyvsp[0].list), yyscanner);
						(yyval.node) = (PGNode *) n;
					}
					else
						(yyval.node) = makeStringConst((yyvsp[-1].str), (yylsp[-1]));
				}
#line 19203 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 678:
#line 3464 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19211 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 679:
#line 3468 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* This is a bit constant per SQL99:
					 * Without Feature F511, "BIT data type",
					 * a <general literal> shall not be a
					 * <bit string literal> or a <hex string literal>.
					 */
					(yyval.node) = makeBitStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 19224 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 680:
#line 3477 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* generic type 'literal' syntax */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-1].list));
					t->location = (yylsp[-1]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19235 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 681:
#line 3484 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					/* generic syntax with a type modifier */
					PGTypeName *t = makeTypeNameFromNameList((yyvsp[-5].list));
					PGListCell *lc;

					/*
					 * We must use func_arg_list and opt_sort_clause in the
					 * production to avoid reduce/reduce conflicts, but we
					 * don't actually wish to allow PGNamedArgExpr in this
					 * context, nor ORDER BY.
					 */
					foreach(lc, (yyvsp[-3].list))
					{
						PGNamedArgExpr *arg = (PGNamedArgExpr *) lfirst(lc);

						if (IsA(arg, PGNamedArgExpr))
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have parameter name"),
									 parser_errposition(arg->location)));
					}
					if ((yyvsp[-2].list) != NIL)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("type modifier cannot have ORDER BY"),
									 parser_errposition((yylsp[-2]))));

					t->typmods = (yyvsp[-3].list);
					t->location = (yylsp[-5]);
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 19271 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 682:
#line 3516 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), (yyvsp[-1].typnam));
				}
#line 19279 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 683:
#line 3520 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntervalNode((yyvsp[-2].node), (yylsp[-2]), (yyvsp[0].list));
				}
#line 19287 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 684:
#line 3524 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntervalNode((yyvsp[-1].ival), (yylsp[-1]), (yyvsp[0].list));
				}
#line 19295 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 685:
#line 3528 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeIntervalNode((yyvsp[-1].str), (yylsp[-1]), (yyvsp[0].list));
				}
#line 19303 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 686:
#line 3532 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeBoolAConst(true, (yylsp[0]));
				}
#line 19311 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 687:
#line 3536 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeBoolAConst(false, (yylsp[0]));
				}
#line 19319 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 688:
#line 3540 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeNullAConst((yylsp[0]));
				}
#line 19327 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 689:
#line 3545 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 19333 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 690:
#line 3546 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19339 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 691:
#line 3562 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19345 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 692:
#line 3563 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19351 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 693:
#line 3564 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19357 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 694:
#line 3567 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19363 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 695:
#line 3568 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19369 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 696:
#line 3574 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19375 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 697:
#line 3575 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19381 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 698:
#line 3576 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19387 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 699:
#line 3579 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19393 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 700:
#line 3580 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19399 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 701:
#line 3581 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19405 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 702:
#line 3584 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19411 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 703:
#line 3585 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19417 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 704:
#line 3586 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19423 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 705:
#line 3589 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19429 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 706:
#line 3590 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lcons(makeString((yyvsp[-1].str)), (yyvsp[0].list)); }
#line 19435 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 707:
#line 3594 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeString((yyvsp[0].str))); }
#line 19441 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 708:
#line 3596 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), makeString((yyvsp[0].str))); }
#line 19447 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 709:
#line 3600 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19453 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 710:
#line 3601 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19459 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 712:
#line 3612 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19465 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 713:
#line 3613 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19471 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 714:
#line 3614 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19477 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 715:
#line 3615 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 19483 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 716:
#line 3618 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19489 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 717:
#line 3619 "third_party/libpg_query/grammar/statements/select.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 19495 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 718:
#line 8 "third_party/libpg_query/grammar/statements/prepare.y" /* yacc.c:1646  */
    {
					PGPrepareStmt *n = makeNode(PGPrepareStmt);
					n->name = (yyvsp[-3].str);
					n->argtypes = (yyvsp[-2].list);
					n->query = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 19507 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 719:
#line 18 "third_party/libpg_query/grammar/statements/prepare.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19513 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 720:
#line 19 "third_party/libpg_query/grammar/statements/prepare.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19519 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 725:
#line 9 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-7].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 19536 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 726:
#line 24 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGCreateStmt *n = makeNode(PGCreateStmt);
					(yyvsp[-5].range)->relpersistence = (yyvsp[-10].ival);
					n->relation = (yyvsp[-5].range);
					n->tableElts = (yyvsp[-3].list);
					n->ofTypename = NULL;
					n->constraints = NIL;
					n->options = (yyvsp[-1].list);
					n->oncommit = (yyvsp[0].oncommit);
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19553 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 727:
#line 39 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
                PGCreateVertexStmt *n = makeNode(PGCreateVertexStmt);
                n->name = (yyvsp[-2].range);
                n->table = (yyvsp[0].range);
                (yyval.node) = (PGNode *)n;
            }
#line 19564 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 728:
#line 48 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
                			PGCreateEdgeStmt *n = makeNode(PGCreateEdgeStmt);
                			n->name = (yyvsp[-13].range);
                			n->table = (yyvsp[-11].range);
                			n->from_ref = (yyvsp[-8].range);
                			n->from_col = (yyvsp[-6].str);
                			n->to_ref = (yyvsp[-3].range);
                			n->to_col = (yyvsp[-1].str);
                			(yyval.node) = (PGNode *)n;
                		}
#line 19579 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 729:
#line 62 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 19585 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 730:
#line 64 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					/*
					 * We must complain about conflicting options.
					 * We could, but choose not to, complain about redundant
					 * options (ie, where $2's bit is already set in $1).
					 */
					int		newspec = (yyvsp[-1].ival) | (yyvsp[0].ival);

					/* special message for this case */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED)) == (CAS_NOT_DEFERRABLE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("constraint declared INITIALLY DEFERRED must be DEFERRABLE"),
								 parser_errposition((yylsp[0]))));
					/* generic message for other conflicts */
					if ((newspec & (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE)) == (CAS_NOT_DEFERRABLE | CAS_DEFERRABLE) ||
						(newspec & (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED)) == (CAS_INITIALLY_IMMEDIATE | CAS_INITIALLY_DEFERRED))
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("conflicting constraint properties"),
								 parser_errposition((yylsp[0]))));
					(yyval.ival) = newspec;
				}
#line 19613 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 731:
#line 90 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[0].typnam); }
#line 19619 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 732:
#line 91 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 19625 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 733:
#line 92 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[0].list); }
#line 19631 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 734:
#line 93 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)(yyvsp[0].value); }
#line 19637 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 735:
#line 94 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)makeString((yyvsp[0].str)); }
#line 19643 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 736:
#line 95 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *)makeString(pstrdup((yyvsp[0].keyword))); }
#line 19649 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 737:
#line 99 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19655 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 738:
#line 100 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19661 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 739:
#line 105 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 19667 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 740:
#line 110 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_NOACTION; }
#line 19673 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 741:
#line 111 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_RESTRICT; }
#line 19679 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 742:
#line 112 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_CASCADE; }
#line 19685 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 743:
#line 113 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_SETNULL; }
#line 19691 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 744:
#line 114 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_FKCONSTR_ACTION_SETDEFAULT; }
#line 19697 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 745:
#line 120 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 19708 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 746:
#line 126 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19714 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 747:
#line 127 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19720 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 748:
#line 129 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					/*
					 * Note: the PGCollateClause is momentarily included in
					 * the list built by ColQualList, but we split it out
					 * again in SplitColQualList.
					 */
					PGCollateClause *n = makeNode(PGCollateClause);
					n->arg = NULL;
					n->collname = (yyvsp[0].list);
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *) n;
				}
#line 19737 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 749:
#line 146 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NOTNULL;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 19748 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 750:
#line 153 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_NULL;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 19759 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 751:
#line 160 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-1]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19773 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 752:
#line 170 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-2]);
					n->keys = NULL;
					n->options = (yyvsp[0].list);
					n->indexname = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19787 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 753:
#line 180 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->is_no_inherit = (yyvsp[0].boolean);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					n->skip_validation = false;
					n->initially_valid = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19803 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 754:
#line 192 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_DEFAULT;
					n->location = (yylsp[-1]);
					n->raw_expr = (yyvsp[0].node);
					n->cooked_expr = NULL;
					(yyval.node) = (PGNode *)n;
				}
#line 19816 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 755:
#line 201 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_IDENTITY;
					n->generated_when = (yyvsp[-3].ival);
					n->options = (yyvsp[0].list);
					n->location = (yylsp[-4]);
					(yyval.node) = (PGNode *)n;
				}
#line 19829 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 756:
#line 210 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-4]);
					n->pktable			= (yyvsp[-3].range);
					n->fk_attrs			= NIL;
					n->pk_attrs			= (yyvsp[-2].list);
					n->fk_matchtype		= (yyvsp[-1].ival);
					n->fk_upd_action	= (char) ((yyvsp[0].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[0].ival) & 0xFF);
					n->skip_validation  = false;
					n->initially_valid  = true;
					(yyval.node) = (PGNode *)n;
				}
#line 19848 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 757:
#line 229 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 19856 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 758:
#line 235 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 19862 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 759:
#line 241 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ((yyvsp[0].ival) << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 19868 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 760:
#line 243 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 19874 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 761:
#line 245 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ((yyvsp[-1].ival) << 8) | ((yyvsp[0].ival) & 0xFF); }
#line 19880 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 762:
#line 247 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ((yyvsp[0].ival) << 8) | ((yyvsp[-1].ival) & 0xFF); }
#line 19886 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 763:
#line 249 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (PG_FKCONSTR_ACTION_NOACTION << 8) | (PG_FKCONSTR_ACTION_NOACTION & 0xFF); }
#line 19892 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 764:
#line 254 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19898 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 765:
#line 255 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 19904 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 766:
#line 259 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = ONCOMMIT_DROP; }
#line 19910 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 767:
#line 260 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = PG_ONCOMMIT_DELETE_ROWS; }
#line 19916 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 768:
#line 261 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = PG_ONCOMMIT_PRESERVE_ROWS; }
#line 19922 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 769:
#line 262 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.oncommit) = PG_ONCOMMIT_NOOP; }
#line 19928 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 770:
#line 267 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 19934 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 771:
#line 271 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {  (yyval.boolean) = true; }
#line 19940 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 772:
#line 272 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {  (yyval.boolean) = false; }
#line 19946 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 773:
#line 278 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = castNode(PGConstraint, (yyvsp[0].node));
					n->conname = (yyvsp[-1].str);
					n->location = (yylsp[-2]);
					(yyval.node) = (PGNode *) n;
				}
#line 19957 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 774:
#line 284 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 19963 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 775:
#line 289 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_COMMENTS; }
#line 19969 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 776:
#line 290 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_CONSTRAINTS; }
#line 19975 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 777:
#line 291 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_DEFAULTS; }
#line 19981 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 778:
#line 292 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_IDENTITY; }
#line 19987 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 779:
#line 293 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_INDEXES; }
#line 19993 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 780:
#line 294 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_STATISTICS; }
#line 19999 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 781:
#line 295 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_STORAGE; }
#line 20005 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 782:
#line 296 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_CREATE_TABLE_LIKE_ALL; }
#line 20011 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 783:
#line 302 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20017 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 784:
#line 303 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 20023 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 785:
#line 307 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20029 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 786:
#line 313 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRABLE;
					n->location = (yylsp[0]);
					(yyval.node) = (PGNode *)n;
				}
#line 20040 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 787:
#line 320 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_NOT_DEFERRABLE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20051 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 788:
#line 327 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_DEFERRED;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20062 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 789:
#line 334 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_ATTR_IMMEDIATE;
					n->location = (yylsp[-1]);
					(yyval.node) = (PGNode *)n;
				}
#line 20073 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 790:
#line 345 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 20079 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 791:
#line 346 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(true), (yylsp[-1]))); }
#line 20085 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 792:
#line 347 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1(makeDefElem("oids", (PGNode *) makeInteger(false), (yylsp[-1]))); }
#line 20091 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 793:
#line 348 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20097 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 794:
#line 352 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 20103 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 795:
#line 357 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 20109 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 796:
#line 358 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-2].ival) & ~(yyvsp[0].ival); }
#line 20115 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 797:
#line 359 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 20121 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 798:
#line 364 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20127 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 799:
#line 369 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_NOT_DEFERRABLE; }
#line 20133 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 800:
#line 370 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_DEFERRABLE; }
#line 20139 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 801:
#line 371 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_INITIALLY_IMMEDIATE; }
#line 20145 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 802:
#line 372 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_INITIALLY_DEFERRED; }
#line 20151 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 803:
#line 373 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_NOT_VALID; }
#line 20157 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 804:
#line 374 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = CAS_NO_INHERIT; }
#line 20163 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 805:
#line 380 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGColumnDef *n = makeNode(PGColumnDef);
					n->colname = (yyvsp[-3].str);
					n->typeName = (yyvsp[-2].typnam);
					n->inhcount = 0;
					n->is_local = true;
					n->is_not_null = false;
					n->is_from_type = false;
					n->storage = 0;
					n->raw_default = NULL;
					n->cooked_default = NULL;
					n->collOid = InvalidOid;
					n->fdwoptions = (yyvsp[-1].list);
					SplitColQualList((yyvsp[0].list), &n->constraints, &n->collClause,
									 yyscanner);
					n->location = (yylsp[-3]);
					(yyval.node) = (PGNode *)n;
				}
#line 20186 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 806:
#line 403 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 20194 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 807:
#line 407 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 20202 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 808:
#line 413 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 20208 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 809:
#line 414 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt)); }
#line 20214 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 810:
#line 418 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20220 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 811:
#line 422 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 20226 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 812:
#line 423 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 20232 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 813:
#line 424 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 20238 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 814:
#line 429 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 20246 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 815:
#line 433 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 20254 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 816:
#line 440 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 20260 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 817:
#line 441 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20266 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 818:
#line 446 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 20272 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 819:
#line 447 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20278 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 820:
#line 452 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.node) = (PGNode *) makeString((yyvsp[0].str));
				}
#line 20286 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 821:
#line 459 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 20292 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 822:
#line 460 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20298 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 823:
#line 465 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].node)); }
#line 20304 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 824:
#line 466 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20310 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 825:
#line 470 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 20316 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 826:
#line 476 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-2].str), (PGNode *) (yyvsp[0].node), (yylsp[-2]));
				}
#line 20324 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 827:
#line 480 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[0].str), NULL, (yylsp[0]));
				}
#line 20332 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 828:
#line 484 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-4].str), (yyvsp[-2].str), (PGNode *) (yyvsp[0].node),
											 PG_DEFELEM_UNSPEC, (yylsp[-4]));
				}
#line 20341 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 829:
#line 489 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElemExtended((yyvsp[-2].str), (yyvsp[0].str), NULL, PG_DEFELEM_UNSPEC, (yylsp[-2]));
				}
#line 20349 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 830:
#line 496 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 20355 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 831:
#line 497 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 20361 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 832:
#line 501 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.typnam) = (yyvsp[0].typnam); }
#line 20367 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 833:
#line 503 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 20377 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 834:
#line 509 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.typnam) = makeTypeNameFromNameList(lcons(makeString((yyvsp[-3].str)), (yyvsp[-2].list)));
					(yyval.typnam)->pct_type = true;
					(yyval.typnam)->setof = true;
					(yyval.typnam)->location = (yylsp[-3]);
				}
#line 20388 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 835:
#line 520 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_CHECK;
					n->location = (yylsp[-4]);
					n->raw_expr = (yyvsp[-2].node);
					n->cooked_expr = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "CHECK",
								   NULL, NULL, &n->skip_validation,
								   &n->is_no_inherit, yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 20405 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 836:
#line 534 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-5]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20422 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 837:
#line 547 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_UNIQUE;
					n->location = (yylsp[-2]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "UNIQUE",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20440 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 838:
#line 562 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-6]);
					n->keys = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->indexname = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20457 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 839:
#line 575 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_PRIMARY;
					n->location = (yylsp[-3]);
					n->keys = NIL;
					n->options = NIL;
					n->indexname = (yyvsp[-1].str);
					n->indexspace = NULL;
					processCASbits((yyvsp[0].ival), (yylsp[0]), "PRIMARY KEY",
								   &n->deferrable, &n->initdeferred, NULL,
								   NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 20475 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 840:
#line 590 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGConstraint *n = makeNode(PGConstraint);
					n->contype = PG_CONSTR_FOREIGN;
					n->location = (yylsp[-10]);
					n->pktable			= (yyvsp[-4].range);
					n->fk_attrs			= (yyvsp[-7].list);
					n->pk_attrs			= (yyvsp[-3].list);
					n->fk_matchtype		= (yyvsp[-2].ival);
					n->fk_upd_action	= (char) ((yyvsp[-1].ival) >> 8);
					n->fk_del_action	= (char) ((yyvsp[-1].ival) & 0xFF);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "FOREIGN KEY",
								   &n->deferrable, &n->initdeferred,
								   &n->skip_validation, NULL,
								   yyscanner);
					n->initially_valid = !n->skip_validation;
					(yyval.node) = (PGNode *)n;
				}
#line 20497 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 841:
#line 612 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 20505 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 842:
#line 616 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 20513 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 843:
#line 623 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_FULL;
			}
#line 20521 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 844:
#line 627 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				ereport(ERROR,
						(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
						 errmsg("MATCH PARTIAL not yet implemented"),
						 parser_errposition((yylsp[-1]))));
				(yyval.ival) = PG_FKCONSTR_MATCH_PARTIAL;
			}
#line 20533 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 845:
#line 635 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 20541 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 846:
#line 639 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
				(yyval.ival) = PG_FKCONSTR_MATCH_SIMPLE;
			}
#line 20549 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 847:
#line 647 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					PGTableLikeClause *n = makeNode(PGTableLikeClause);
					n->relation = (yyvsp[-1].range);
					n->options = (yyvsp[0].ival);
					(yyval.node) = (PGNode *)n;
				}
#line 20560 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 848:
#line 656 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 20566 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 849:
#line 657 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 20572 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 850:
#line 658 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 20578 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 851:
#line 659 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_TEMP; }
#line 20584 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 852:
#line 661 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 20595 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 853:
#line 668 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    {
					ereport(PGWARNING,
							(errmsg("GLOBAL is deprecated in temporary table creation"),
							 parser_errposition((yylsp[-1]))));
					(yyval.ival) = PG_RELPERSISTENCE_TEMP;
				}
#line 20606 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 854:
#line 674 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_RELPERSISTENCE_UNLOGGED; }
#line 20612 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 855:
#line 675 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = RELPERSISTENCE_PERMANENT; }
#line 20618 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 856:
#line 680 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_ATTRIBUTE_IDENTITY_ALWAYS; }
#line 20624 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 857:
#line 681 "third_party/libpg_query/grammar/statements/create.y" /* yacc.c:1646  */
    { (yyval.ival) = ATTRIBUTE_IDENTITY_BY_DEFAULT; }
#line 20630 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 858:
#line 2 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[0].vsetstmt); }
#line 20636 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 859:
#line 8 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (yyvsp[0].str);
					(yyval.vsetstmt) = n;
				}
#line 20647 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 860:
#line 15 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET_ALL;
					(yyval.vsetstmt) = n;
				}
#line 20657 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 861:
#line 24 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    { (yyval.vsetstmt) = (yyvsp[0].vsetstmt); }
#line 20663 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 862:
#line 26 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "timezone";
					(yyval.vsetstmt) = n;
				}
#line 20674 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 863:
#line 33 "third_party/libpg_query/grammar/statements/variable_reset.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_RESET;
					n->name = (char*) "transaction_isolation";
					(yyval.vsetstmt) = n;
				}
#line 20685 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 864:
#line 7 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SCHEMA;
					n->subname = (yyvsp[-3].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20698 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 865:
#line 16 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20712 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 866:
#line 26 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20726 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 867:
#line 36 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20740 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 868:
#line 46 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20754 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 869:
#line 56 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20768 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 870:
#line 66 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20782 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 871:
#line 76 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20796 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 872:
#line 86 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_INDEX;
					n->relation = (yyvsp[-3].range);
					n->subname = NULL;
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20810 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 873:
#line 96 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20825 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 874:
#line 107 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_COLUMN;
					n->relationType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20840 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 875:
#line 118 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20854 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 876:
#line 128 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    {
					PGRenameStmt *n = makeNode(PGRenameStmt);
					n->renameType = PG_OBJECT_TABCONSTRAINT;
					n->relation = (yyvsp[-5].range);
					n->subname = (yyvsp[-2].str);
					n->newname = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20868 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 877:
#line 140 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    { (yyval.ival) = COLUMN; }
#line 20874 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 878:
#line 141 "third_party/libpg_query/grammar/statements/rename.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 20880 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 879:
#line 11 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-11].boolean);
					n->concurrent = (yyvsp[-9].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 20907 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 880:
#line 36 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    {
					PGIndexStmt *n = makeNode(PGIndexStmt);
					n->unique = (yyvsp[-14].boolean);
					n->concurrent = (yyvsp[-12].boolean);
					n->idxname = (yyvsp[-8].str);
					n->relation = (yyvsp[-6].range);
					n->accessMethod = (yyvsp[-5].str);
					n->indexParams = (yyvsp[-3].list);
					n->options = (yyvsp[-1].list);
					n->whereClause = (yyvsp[0].node);
					n->excludeOpNames = NIL;
					n->idxcomment = NULL;
					n->indexOid = InvalidOid;
					n->oldNode = InvalidOid;
					n->primary = false;
					n->isconstraint = false;
					n->deferrable = false;
					n->initdeferred = false;
					n->transformed = false;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 20934 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 881:
#line 62 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20940 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 882:
#line 66 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20946 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 883:
#line 67 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) DEFAULT_INDEX_TYPE; }
#line 20952 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 884:
#line 72 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 20958 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 885:
#line 73 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 20964 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 886:
#line 78 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 20970 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 887:
#line 79 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 20976 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 888:
#line 83 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 20982 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 889:
#line 84 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 20988 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 890:
#line 89 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 20994 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 891:
#line 90 "third_party/libpg_query/grammar/statements/index.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 21000 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 892:
#line 7 "third_party/libpg_query/grammar/statements/call.y" /* yacc.c:1646  */
    {
					PGCallStmt *n = makeNode(PGCallStmt);
					n->func = (yyvsp[0].node);
					(yyval.node) = (PGNode *) n;
				}
#line 21010 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 893:
#line 8 "third_party/libpg_query/grammar/statements/pragma.y" /* yacc.c:1646  */
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_NOTHING;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21021 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 894:
#line 15 "third_party/libpg_query/grammar/statements/pragma.y" /* yacc.c:1646  */
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_ASSIGNMENT;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21033 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 895:
#line 23 "third_party/libpg_query/grammar/statements/pragma.y" /* yacc.c:1646  */
    {
					PGPragmaStmt *n = makeNode(PGPragmaStmt);
					n->kind = PG_PRAGMA_TYPE_CALL;
					n->name = (yyvsp[-3].str);
					n->args = (yyvsp[-1].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21045 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 896:
#line 11 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21055 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 897:
#line 17 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = true;
					(yyval.node) = (PGNode *) n;
				}
#line 21065 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 898:
#line 23 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = (yyvsp[0].vsetstmt);
					n->is_local = false;
					(yyval.node) = (PGNode *) n;
				}
#line 21075 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 899:
#line 32 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {(yyval.vsetstmt) = (yyvsp[0].vsetstmt);}
#line 21081 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 900:
#line 34 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_CURRENT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 21092 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 901:
#line 42 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "timezone";
					if ((yyvsp[0].node) != NULL)
						n->args = list_make1((yyvsp[0].node));
					else
						n->kind = VAR_SET_DEFAULT;
					(yyval.vsetstmt) = n;
				}
#line 21107 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 902:
#line 53 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (char*) "search_path";
					n->args = list_make1(makeStringConst((yyvsp[0].str), (yylsp[0])));
					(yyval.vsetstmt) = n;
				}
#line 21119 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 903:
#line 65 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 21131 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 904:
#line 73 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_VALUE;
					n->name = (yyvsp[-2].str);
					n->args = (yyvsp[0].list);
					(yyval.vsetstmt) = n;
				}
#line 21143 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 905:
#line 81 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 21154 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 906:
#line 88 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGVariableSetStmt *n = makeNode(PGVariableSetStmt);
					n->kind = VAR_SET_DEFAULT;
					n->name = (yyvsp[-2].str);
					(yyval.vsetstmt) = n;
				}
#line 21165 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 907:
#line 98 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0])); }
#line 21171 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 908:
#line 100 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 21177 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 909:
#line 106 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21185 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 910:
#line 110 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					(yyval.node) = makeStringConst((yyvsp[0].str), (yylsp[0]));
				}
#line 21193 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 911:
#line 114 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGTypeName *t = (yyvsp[-2].typnam);
					if ((yyvsp[0].list) != NIL)
					{
						PGAConst *n = (PGAConst *) linitial((yyvsp[0].list));
						if ((n->val.val.ival & ~(INTERVAL_MASK(HOUR) | INTERVAL_MASK(MINUTE))) != 0)
							ereport(ERROR,
									(errcode(PG_ERRCODE_SYNTAX_ERROR),
									 errmsg("time zone interval must be HOUR or HOUR TO MINUTE"),
									 parser_errposition((yylsp[0]))));
					}
					t->typmods = (yyvsp[0].list);
					(yyval.node) = makeStringConstCast((yyvsp[-1].str), (yylsp[-1]), t);
				}
#line 21212 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 912:
#line 129 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    {
					PGTypeName *t = (yyvsp[-4].typnam);
					t->typmods = list_make2(makeIntConst(INTERVAL_FULL_RANGE, -1),
											makeIntConst((yyvsp[-2].ival), (yylsp[-2])));
					(yyval.node) = makeStringConstCast((yyvsp[0].str), (yylsp[0]), t);
				}
#line 21223 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 913:
#line 135 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = makeAConst((yyvsp[0].value), (yylsp[0])); }
#line 21229 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 914:
#line 136 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 21235 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 915:
#line 137 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 21241 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 916:
#line 141 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 21247 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 917:
#line 142 "third_party/libpg_query/grammar/statements/variable_set.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 21253 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 918:
#line 8 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21266 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 919:
#line 17 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_TABLE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21279 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 920:
#line 26 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21292 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 921:
#line 35 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_SEQUENCE;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21305 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 922:
#line 44 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21318 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 923:
#line 53 "third_party/libpg_query/grammar/statements/alter_schema.y" /* yacc.c:1646  */
    {
					PGAlterObjectSchemaStmt *n = makeNode(PGAlterObjectSchemaStmt);
					n->objectType = PG_OBJECT_VIEW;
					n->relation = (yyvsp[-3].range);
					n->newschema = (yyvsp[0].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21331 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 924:
#line 8 "third_party/libpg_query/grammar/statements/export.y" /* yacc.c:1646  */
    {
					PGExportStmt *n = makeNode(PGExportStmt);
					n->filename = (yyvsp[-1].str);
					n->options = NIL;
					if ((yyvsp[0].list)) {
						n->options = list_concat(n->options, (yyvsp[0].list));
					}
					(yyval.node) = (PGNode *)n;
				}
#line 21345 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 925:
#line 21 "third_party/libpg_query/grammar/statements/export.y" /* yacc.c:1646  */
    {
					PGImportStmt *n = makeNode(PGImportStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21355 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 926:
#line 8 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21365 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 927:
#line 14 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = (yyvsp[0].str);
						(yyval.node) = (PGNode *) n;
					}
#line 21375 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 928:
#line 20 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21385 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 929:
#line 26 "third_party/libpg_query/grammar/statements/deallocate.y" /* yacc.c:1646  */
    {
						PGDeallocateStmt *n = makeNode(PGDeallocateStmt);
						n->name = NULL;
						(yyval.node) = (PGNode *) n;
					}
#line 21395 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 930:
#line 10 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21407 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 931:
#line 18 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					PGAlterSeqStmt *n = makeNode(PGAlterSeqStmt);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21419 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 932:
#line 29 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21425 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 933:
#line 30 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21431 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 934:
#line 34 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21437 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 935:
#line 35 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21443 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 936:
#line 36 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21449 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 937:
#line 41 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21455 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 938:
#line 42 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.value) = makeFloat((yyvsp[0].str)); }
#line 21461 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 939:
#line 44 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.value) = makeFloat((yyvsp[0].str));
					doNegateFloat((yyval.value));
				}
#line 21470 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 940:
#line 48 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.value) = makeInteger((yyvsp[0].ival)); }
#line 21476 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 941:
#line 53 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("as", (PGNode *)(yyvsp[0].typnam), (yylsp[-1]));
				}
#line 21484 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 942:
#line 57 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("cache", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21492 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 943:
#line 61 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 21500 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 944:
#line 65 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("cycle", (PGNode *)makeInteger(false), (yylsp[-1]));
				}
#line 21508 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 945:
#line 69 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("increment", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21516 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 946:
#line 73 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("maxvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21524 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 947:
#line 77 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("minvalue", (PGNode *)(yyvsp[0].value), (yylsp[-1]));
				}
#line 21532 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 948:
#line 81 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("maxvalue", NULL, (yylsp[-1]));
				}
#line 21540 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 949:
#line 85 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("minvalue", NULL, (yylsp[-1]));
				}
#line 21548 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 950:
#line 89 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("owned_by", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21556 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 951:
#line 93 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					/* not documented, only used by pg_dump */
					(yyval.defelt) = makeDefElem("sequence_name", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 21565 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 952:
#line 98 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("start", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21573 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 953:
#line 102 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21581 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 954:
#line 106 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21589 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 955:
#line 112 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21595 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 956:
#line 113 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    {}
#line 21601 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 957:
#line 117 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 21607 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 958:
#line 118 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.ival) = + (yyvsp[0].ival); }
#line 21613 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 959:
#line 119 "third_party/libpg_query/grammar/statements/alter_sequence.y" /* yacc.c:1646  */
    { (yyval.ival) = - (yyvsp[0].ival); }
#line 21619 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 960:
#line 10 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21632 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 961:
#line 19 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_TABLE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21645 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 962:
#line 28 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21658 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 963:
#line 37 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_INDEX;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21671 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 964:
#line 46 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21684 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 965:
#line 55 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_SEQUENCE;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21697 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 966:
#line 64 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21710 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 967:
#line 73 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableStmt *n = makeNode(PGAlterTableStmt);
					n->relation = (yyvsp[-1].range);
					n->cmds = (yyvsp[0].list);
					n->relkind = PG_OBJECT_VIEW;
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21723 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 968:
#line 86 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].defelt)); }
#line 21729 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 969:
#line 88 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 21735 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 970:
#line 93 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 21741 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 971:
#line 94 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 21747 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 972:
#line 100 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", NULL, (yylsp[0]));
				}
#line 21755 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 973:
#line 104 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("restart", (PGNode *)(yyvsp[0].value), (yylsp[-2]));
				}
#line 21763 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 974:
#line 108 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					if (strcmp((yyvsp[0].defelt)->defname, "as") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "restart") == 0 ||
						strcmp((yyvsp[0].defelt)->defname, "owned_by") == 0)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("sequence option \"%s\" not supported here", (yyvsp[0].defelt)->defname),
								 parser_errposition((yylsp[0]))));
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 21778 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 975:
#line 119 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("generated", (PGNode *) makeInteger((yyvsp[0].ival)), (yylsp[-2]));
				}
#line 21786 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 976:
#line 127 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 21794 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 977:
#line 131 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 21802 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 978:
#line 140 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21814 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 979:
#line 149 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21826 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 980:
#line 158 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21838 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 981:
#line 167 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddColumn;
					n->def = (yyvsp[0].node);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21850 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 982:
#line 176 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ColumnDefault;
					n->name = (yyvsp[-1].str);
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 21862 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 983:
#line 185 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21873 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 984:
#line 193 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetNotNull;
					n->name = (yyvsp[-3].str);
					(yyval.node) = (PGNode *)n;
				}
#line 21884 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 985:
#line 201 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStatistics;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeInteger((yyvsp[0].ival));
					(yyval.node) = (PGNode *)n;
				}
#line 21896 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 986:
#line 210 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21908 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 987:
#line 219 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetOptions;
					n->name = (yyvsp[-2].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21920 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 988:
#line 228 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetStorage;
					n->name = (yyvsp[-3].str);
					n->def = (PGNode *) makeString((yyvsp[0].str));
					(yyval.node) = (PGNode *)n;
				}
#line 21932 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 989:
#line 237 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);

					c->contype = PG_CONSTR_IDENTITY;
					c->generated_when = (yyvsp[-3].ival);
					c->options = (yyvsp[0].list);
					c->location = (yylsp[-4]);

					n->subtype = PG_AT_AddIdentity;
					n->name = (yyvsp[-6].str);
					n->def = (PGNode *) c;

					(yyval.node) = (PGNode *)n;
				}
#line 21952 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 990:
#line 254 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetIdentity;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 21964 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 991:
#line 263 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-2].str);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 21976 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 992:
#line 272 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = AT_DropIdentity;
					n->name = (yyvsp[-4].str);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 21988 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 993:
#line 281 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22001 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 994:
#line 291 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropColumn;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22014 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 995:
#line 304 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGColumnDef *def = makeNode(PGColumnDef);
					n->subtype = PG_AT_AlterColumnType;
					n->name = (yyvsp[-5].str);
					n->def = (PGNode *) def;
					/* We only use these fields of the PGColumnDef node */
					def->typeName = (yyvsp[-2].typnam);
					def->collClause = (PGCollateClause *) (yyvsp[-1].node);
					def->raw_default = (yyvsp[0].node);
					def->location = (yylsp[-5]);
					(yyval.node) = (PGNode *)n;
				}
#line 22032 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 996:
#line 319 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AlterColumnGenericOptions;
					n->name = (yyvsp[-1].str);
					n->def = (PGNode *) (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22044 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 997:
#line 328 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_AddConstraint;
					n->def = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22055 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 998:
#line 336 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					PGConstraint *c = makeNode(PGConstraint);
					n->subtype = PG_AT_AlterConstraint;
					n->def = (PGNode *) c;
					c->contype = PG_CONSTR_FOREIGN; /* others not supported, yet */
					c->conname = (yyvsp[-1].str);
					processCASbits((yyvsp[0].ival), (yylsp[0]), "ALTER CONSTRAINT statement",
									&c->deferrable,
									&c->initdeferred,
									NULL, NULL, yyscanner);
					(yyval.node) = (PGNode *)n;
				}
#line 22073 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 999:
#line 351 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ValidateConstraint;
					n->name = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 22084 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1000:
#line 359 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22097 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1001:
#line 369 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_DropConstraint;
					n->name = (yyvsp[-1].str);
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22110 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1002:
#line 379 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22120 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1003:
#line 386 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetUnLogged;
					(yyval.node) = (PGNode *)n;
				}
#line 22130 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1004:
#line 393 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_SetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22141 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1005:
#line 401 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_ResetRelOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 22152 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1006:
#line 408 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					PGAlterTableCmd *n = makeNode(PGAlterTableCmd);
					n->subtype = PG_AT_GenericOptions;
					n->def = (PGNode *)(yyvsp[0].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22163 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1007:
#line 418 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = (yyvsp[0].node); }
#line 22169 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1008:
#line 419 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 22175 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1009:
#line 425 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = (yyvsp[0].defelt);
				}
#line 22183 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1010:
#line 429 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_SET;
				}
#line 22192 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1011:
#line 434 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = (yyvsp[0].defelt);
					(yyval.defelt)->defaction = PG_DEFELEM_ADD;
				}
#line 22201 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1012:
#line 439 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElemExtended(NULL, (yyvsp[0].str), NULL, DEFELEM_DROP, (yylsp[0]));
				}
#line 22209 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1013:
#line 446 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].node)); }
#line 22215 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1014:
#line 447 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node)); }
#line 22221 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1015:
#line 452 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 22227 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1016:
#line 456 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.ival) = 1; }
#line 22233 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1017:
#line 457 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 22239 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1018:
#line 458 "third_party/libpg_query/grammar/statements/alter_table.y" /* yacc.c:1646  */
    { (yyval.ival) = 0; }
#line 22245 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1019:
#line 10 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 22256 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1020:
#line 17 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("analyze", NULL, (yylsp[-2])));
					if ((yyvsp[-1].boolean))
						n->options = lappend(n->options,
											 makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 22270 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1021:
#line 27 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = list_make1(makeDefElem("verbose", NULL, (yylsp[-1])));
					(yyval.node) = (PGNode *) n;
				}
#line 22281 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1022:
#line 34 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					PGExplainStmt *n = makeNode(PGExplainStmt);
					n->query = (yyvsp[0].node);
					n->options = (yyvsp[-2].list);
					(yyval.node) = (PGNode *) n;
				}
#line 22292 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1023:
#line 44 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 22298 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1024:
#line 45 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 22304 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1025:
#line 50 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 22310 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1026:
#line 51 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 22316 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1027:
#line 52 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 22322 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1033:
#line 65 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 22328 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1034:
#line 66 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22334 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1035:
#line 67 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = pstrdup((yyvsp[0].keyword)); }
#line 22340 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1036:
#line 72 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 22346 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1037:
#line 73 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 22352 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1038:
#line 79 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 22360 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1039:
#line 83 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 22368 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1040:
#line 90 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {}
#line 22374 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1041:
#line 91 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {}
#line 22380 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1042:
#line 96 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "true"; }
#line 22386 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1043:
#line 97 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "false"; }
#line 22392 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1044:
#line 98 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "on"; }
#line 22398 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1045:
#line 104 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 22404 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1046:
#line 110 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 22412 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1047:
#line 117 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 22418 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1048:
#line 118 "third_party/libpg_query/grammar/statements/explain.y" /* yacc.c:1646  */
    { (yyval.str) = (char*) "analyze"; }
#line 22424 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1049:
#line 12 "third_party/libpg_query/grammar/statements/update.y" /* yacc.c:1646  */
    {
					PGUpdateStmt *n = makeNode(PGUpdateStmt);
					n->relation = (yyvsp[-5].range);
					n->targetList = (yyvsp[-3].list);
					n->fromClause = (yyvsp[-2].list);
					n->whereClause = (yyvsp[-1].node);
					n->returningList = (yyvsp[0].list);
					n->withClause = (yyvsp[-7].with);
					(yyval.node) = (PGNode *)n;
				}
#line 22439 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1050:
#line 6 "third_party/libpg_query/grammar/statements/checkpoint.y" /* yacc.c:1646  */
    {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = true;
					(yyval.node) = (PGNode *)n;
				}
#line 22449 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1051:
#line 12 "third_party/libpg_query/grammar/statements/checkpoint.y" /* yacc.c:1646  */
    {
					PGCheckPointStmt *n = makeNode(PGCheckPointStmt);
					n->force = false;
					(yyval.node) = (PGNode *)n;
				}
#line 22459 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1052:
#line 10 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].istmt)->relation = (yyvsp[-3].range);
					(yyvsp[-2].istmt)->onConflictClause = (yyvsp[-1].onconflict);
					(yyvsp[-2].istmt)->returningList = (yyvsp[0].list);
					(yyvsp[-2].istmt)->withClause = (yyvsp[-6].with);
					(yyval.node) = (PGNode *) (yyvsp[-2].istmt);
				}
#line 22471 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1053:
#line 22 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22481 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1054:
#line 28 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22492 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1055:
#line 35 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-2].list);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22502 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1056:
#line 41 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = (yyvsp[-5].list);
					(yyval.istmt)->override = (yyvsp[-2].override);
					(yyval.istmt)->selectStmt = (yyvsp[0].node);
				}
#line 22513 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1057:
#line 48 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.istmt) = makeNode(PGInsertStmt);
					(yyval.istmt)->cols = NIL;
					(yyval.istmt)->selectStmt = NULL;
				}
#line 22523 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1058:
#line 58 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.range) = (yyvsp[0].range);
				}
#line 22531 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1059:
#line 62 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].range)->alias = makeAlias((yyvsp[0].str), NIL);
					(yyval.range) = (yyvsp[-2].range);
				}
#line 22540 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1060:
#line 71 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = (yyvsp[-2].list);
					(yyval.infer)->whereClause = (yyvsp[0].node);
					(yyval.infer)->conname = NULL;
					(yyval.infer)->location = (yylsp[-3]);
				}
#line 22552 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1061:
#line 80 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.infer) = makeNode(PGInferClause);
					(yyval.infer)->indexElems = NIL;
					(yyval.infer)->whereClause = NULL;
					(yyval.infer)->conname = (yyvsp[0].str);
					(yyval.infer)->location = (yylsp[-2]);
				}
#line 22564 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1062:
#line 88 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.infer) = NULL;
				}
#line 22572 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1063:
#line 95 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.with) = (yyvsp[0].with); }
#line 22578 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1064:
#line 96 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.with) = NULL; }
#line 22584 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1065:
#line 102 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22596 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1066:
#line 114 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyvsp[-2].target)->val = (PGNode *) (yyvsp[0].node);
					(yyval.list) = list_make1((yyvsp[-2].target));
				}
#line 22605 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1067:
#line 119 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					int ncolumns = list_length((yyvsp[-3].list));
					int i = 1;
					PGListCell *col_cell;

					/* Create a PGMultiAssignRef source for each target */
					foreach(col_cell, (yyvsp[-3].list))
					{
						PGResTarget *res_col = (PGResTarget *) lfirst(col_cell);
						PGMultiAssignRef *r = makeNode(PGMultiAssignRef);

						r->source = (PGNode *) (yyvsp[0].node);
						r->colno = i;
						r->ncolumns = ncolumns;
						res_col->val = (PGNode *) r;
						i++;
					}

					(yyval.list) = (yyvsp[-3].list);
				}
#line 22630 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1068:
#line 144 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_UPDATE;
					(yyval.onconflict)->infer = (yyvsp[-5].infer);
					(yyval.onconflict)->targetList = (yyvsp[-1].list);
					(yyval.onconflict)->whereClause = (yyvsp[0].node);
					(yyval.onconflict)->location = (yylsp[-7]);
				}
#line 22643 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1069:
#line 154 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.onconflict) = makeNode(PGOnConflictClause);
					(yyval.onconflict)->action = PG_ONCONFLICT_NOTHING;
					(yyval.onconflict)->infer = (yyvsp[-2].infer);
					(yyval.onconflict)->targetList = NIL;
					(yyval.onconflict)->whereClause = NULL;
					(yyval.onconflict)->location = (yylsp[-4]);
				}
#line 22656 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1070:
#line 163 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.onconflict) = NULL;
				}
#line 22664 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1071:
#line 170 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = (yyvsp[-4].str);
					(yyval.ielem)->expr = NULL;
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22679 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1072:
#line 181 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-4].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22694 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1073:
#line 192 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.ielem) = makeNode(PGIndexElem);
					(yyval.ielem)->name = NULL;
					(yyval.ielem)->expr = (yyvsp[-5].node);
					(yyval.ielem)->indexcolname = NULL;
					(yyval.ielem)->collation = (yyvsp[-3].list);
					(yyval.ielem)->opclass = (yyvsp[-2].list);
					(yyval.ielem)->ordering = (yyvsp[-1].sortorder);
					(yyval.ielem)->nulls_ordering = (yyvsp[0].nullorder);
				}
#line 22709 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1074:
#line 206 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 22715 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1075:
#line 207 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 22721 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1076:
#line 213 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.override) = PG_OVERRIDING_USER_VALUE; }
#line 22727 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1077:
#line 214 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.override) = OVERRIDING_SYSTEM_VALUE; }
#line 22733 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1078:
#line 219 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22739 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1079:
#line 220 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list),(yyvsp[0].target)); }
#line 22745 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1080:
#line 226 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 22751 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1081:
#line 227 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 22757 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1082:
#line 231 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 22763 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1083:
#line 232 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 22769 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1084:
#line 238 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].target)); }
#line 22775 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1085:
#line 240 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].target)); }
#line 22781 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1086:
#line 245 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 22787 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1087:
#line 246 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_concat((yyvsp[-2].list),(yyvsp[0].list)); }
#line 22793 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1088:
#line 250 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].ielem)); }
#line 22799 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1089:
#line 251 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].ielem)); }
#line 22805 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1090:
#line 257 "third_party/libpg_query/grammar/statements/insert.y" /* yacc.c:1646  */
    {
					(yyval.target) = makeNode(PGResTarget);
					(yyval.target)->name = (yyvsp[-1].str);
					(yyval.target)->indirection = check_indirection((yyvsp[0].list), yyscanner);
					(yyval.target)->val = NULL;	/* upper production sets this */
					(yyval.target)->location = (yylsp[-1]);
				}
#line 22817 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1091:
#line 8 "third_party/libpg_query/grammar/statements/create_function.y" /* yacc.c:1646  */
    {
					PGCreateFunctionStmt *n = makeNode(PGCreateFunctionStmt);
					n->name = (yyvsp[-3].range);
					n->params = (yyvsp[-2].list);
					n->function = (yyvsp[0].node);
					(yyval.node) = (PGNode *)n;
				}
#line 22829 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1094:
#line 24 "third_party/libpg_query/grammar/statements/create_function.y" /* yacc.c:1646  */
    {
				(yyval.list) = NIL;
			}
#line 22837 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1095:
#line 28 "third_party/libpg_query/grammar/statements/create_function.y" /* yacc.c:1646  */
    {
				(yyval.list) = (yyvsp[-1].list);
			}
#line 22845 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1096:
#line 9 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22863 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1097:
#line 23 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[0].range);
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 22881 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1098:
#line 37 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = (PGVacuumStmt *) (yyvsp[0].node);
					n->options |= PG_VACOPT_VACUUM;
					if ((yyvsp[-3].boolean))
						n->options |= PG_VACOPT_FULL;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_FREEZE;
					if ((yyvsp[-1].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					(yyval.node) = (PGNode *)n;
				}
#line 22897 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1099:
#line 49 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-1].ival);
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *) n;
				}
#line 22909 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1100:
#line 57 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_VACUUM | (yyvsp[-3].ival);
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					if (n->va_cols != NIL)	/* implies analyze */
						n->options |= PG_VACOPT_ANALYZE;
					(yyval.node) = (PGNode *) n;
				}
#line 22923 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1101:
#line 70 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_ANALYZE; }
#line 22929 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1102:
#line 71 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_VERBOSE; }
#line 22935 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1103:
#line 72 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_FREEZE; }
#line 22941 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1104:
#line 73 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = PG_VACOPT_FULL; }
#line 22947 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1105:
#line 75 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    {
					if (strcmp((yyvsp[0].str), "disable_page_skipping") == 0)
						(yyval.ival) = PG_VACOPT_DISABLE_PAGE_SKIPPING;
					else
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
							 errmsg("unrecognized VACUUM option \"%s\"", (yyvsp[0].str)),
									 parser_errposition((yylsp[0]))));
				}
#line 22961 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1106:
#line 87 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 22967 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1107:
#line 88 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 22973 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1108:
#line 93 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[0].ival); }
#line 22979 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1109:
#line 94 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.ival) = (yyvsp[-2].ival) | (yyvsp[0].ival); }
#line 22985 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1110:
#line 98 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 22991 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1111:
#line 99 "third_party/libpg_query/grammar/statements/vacuum.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 22997 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1112:
#line 10 "third_party/libpg_query/grammar/statements/analyze.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[0].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = NULL;
					n->va_cols = NIL;
					(yyval.node) = (PGNode *)n;
				}
#line 23011 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1113:
#line 20 "third_party/libpg_query/grammar/statements/analyze.y" /* yacc.c:1646  */
    {
					PGVacuumStmt *n = makeNode(PGVacuumStmt);
					n->options = PG_VACOPT_ANALYZE;
					if ((yyvsp[-2].boolean))
						n->options |= PG_VACOPT_VERBOSE;
					n->relation = (yyvsp[-1].range);
					n->va_cols = (yyvsp[0].list);
					(yyval.node) = (PGNode *)n;
				}
#line 23025 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1114:
#line 3 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = (yyvsp[-8].range);
					n->query = NULL;
					n->attlist = (yyvsp[-7].list);
					n->is_from = (yyvsp[-5].boolean);
					n->is_program = (yyvsp[-4].boolean);
					n->filename = (yyvsp[-3].str);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-3]))));

					n->options = NIL;
					/* Concatenate user-supplied flags */
					if ((yyvsp[-9].defelt))
						n->options = lappend(n->options, (yyvsp[-9].defelt));
					if ((yyvsp[-6].defelt))
						n->options = lappend(n->options, (yyvsp[-6].defelt));
					if ((yyvsp[-2].defelt))
						n->options = lappend(n->options, (yyvsp[-2].defelt));
					if ((yyvsp[0].list))
						n->options = list_concat(n->options, (yyvsp[0].list));
					(yyval.node) = (PGNode *)n;
				}
#line 23057 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1115:
#line 31 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					PGCopyStmt *n = makeNode(PGCopyStmt);
					n->relation = NULL;
					n->query = (yyvsp[-6].node);
					n->attlist = NIL;
					n->is_from = false;
					n->is_program = (yyvsp[-3].boolean);
					n->filename = (yyvsp[-2].str);
					n->options = (yyvsp[0].list);

					if (n->is_program && n->filename == NULL)
						ereport(ERROR,
								(errcode(PG_ERRCODE_SYNTAX_ERROR),
								 errmsg("STDIN/STDOUT not allowed with PROGRAM"),
								 parser_errposition((yylsp[-4]))));

					(yyval.node) = (PGNode *)n;
				}
#line 23080 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1116:
#line 53 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 23086 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1117:
#line 54 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 23092 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1118:
#line 60 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23100 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1119:
#line 63 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.defelt) = NULL; }
#line 23106 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1120:
#line 69 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].node));
				}
#line 23114 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1121:
#line 73 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].node));
				}
#line 23122 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1122:
#line 80 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 23128 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1123:
#line 81 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 23134 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1124:
#line 85 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 23140 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1125:
#line 86 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {}
#line 23146 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1126:
#line 91 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 23152 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1127:
#line 92 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 23158 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1128:
#line 96 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 23164 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1129:
#line 97 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[-1].list); }
#line 23170 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1130:
#line 102 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23176 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1131:
#line 103 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[0].value); }
#line 23182 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1132:
#line 104 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeNode(PGAStar); }
#line 23188 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1133:
#line 105 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) (yyvsp[-1].list); }
#line 23194 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1134:
#line 106 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = NULL; }
#line 23200 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1135:
#line 112 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem((yyvsp[-1].str), (yyvsp[0].node), (yylsp[-1]));
				}
#line 23208 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1136:
#line 120 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[-1]));
				}
#line 23216 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1137:
#line 123 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.defelt) = NULL; }
#line 23222 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1138:
#line 128 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-1].list), (yyvsp[0].defelt)); }
#line 23228 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1139:
#line 129 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 23234 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1140:
#line 135 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23242 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1141:
#line 138 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.defelt) = NULL; }
#line 23248 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1142:
#line 144 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("binary"), (yylsp[0]));
				}
#line 23256 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1143:
#line 148 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("oids", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23264 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1144:
#line 152 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("freeze", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23272 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1145:
#line 156 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("delimiter", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23280 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1146:
#line 160 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("null", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23288 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1147:
#line 164 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("format", (PGNode *)makeString("csv"), (yylsp[0]));
				}
#line 23296 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1148:
#line 168 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("header", (PGNode *)makeInteger(true), (yylsp[0]));
				}
#line 23304 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1149:
#line 172 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("quote", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23312 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1150:
#line 176 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("escape", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-2]));
				}
#line 23320 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1151:
#line 180 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23328 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1152:
#line 184 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_quote", (PGNode *)makeNode(PGAStar), (yylsp[-2]));
				}
#line 23336 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1153:
#line 188 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_not_null", (PGNode *)(yyvsp[0].list), (yylsp[-3]));
				}
#line 23344 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1154:
#line 192 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("force_null", (PGNode *)(yyvsp[0].list), (yylsp[-2]));
				}
#line 23352 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1155:
#line 196 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.defelt) = makeDefElem("encoding", (PGNode *)makeString((yyvsp[0].str)), (yylsp[-1]));
				}
#line 23360 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1156:
#line 203 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.node) = (PGNode *) makeString((yyvsp[0].str)); }
#line 23366 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1157:
#line 209 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 23372 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1158:
#line 210 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 23378 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1159:
#line 211 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    { (yyval.str) = NULL; }
#line 23384 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1160:
#line 217 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = list_make1((yyvsp[0].defelt));
				}
#line 23392 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1161:
#line 221 "third_party/libpg_query/grammar/statements/copy.y" /* yacc.c:1646  */
    {
					(yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].defelt));
				}
#line 23400 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1162:
#line 10 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 23416 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1163:
#line 23 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-5].range);
					n->view->relpersistence = (yyvsp[-7].ival);
					n->aliases = (yyvsp[-4].list);
					n->query = (yyvsp[-1].node);
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					(yyval.node) = (PGNode *) n;
				}
#line 23432 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1164:
#line 36 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = false;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 23453 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1165:
#line 54 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    {
					PGViewStmt *n = makeNode(PGViewStmt);
					n->view = (yyvsp[-7].range);
					n->view->relpersistence = (yyvsp[-10].ival);
					n->aliases = (yyvsp[-5].list);
					n->query = makeRecursiveViewSelect(n->view->relname, n->aliases, (yyvsp[-1].node));
					n->replace = true;
					n->options = (yyvsp[-3].list);
					n->withCheckOption = (yyvsp[0].viewcheckoption);
					if (n->withCheckOption != PG_NO_CHECK_OPTION)
						ereport(ERROR,
								(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
								 errmsg("WITH CHECK OPTION not supported on recursive views"),
								 parser_errposition((yylsp[0]))));
					(yyval.node) = (PGNode *) n;
				}
#line 23474 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1166:
#line 74 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 23480 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1167:
#line 75 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = CASCADED_CHECK_OPTION; }
#line 23486 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1168:
#line 76 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = PG_LOCAL_CHECK_OPTION; }
#line 23492 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1169:
#line 77 "third_party/libpg_query/grammar/statements/view.y" /* yacc.c:1646  */
    { (yyval.viewcheckoption) = PG_NO_CHECK_OPTION; }
#line 23498 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1170:
#line 12 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = false;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-5].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23515 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1171:
#line 25 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    {
					PGCreateTableAsStmt *ctas = makeNode(PGCreateTableAsStmt);
					ctas->query = (yyvsp[-1].node);
					ctas->into = (yyvsp[-3].into);
					ctas->relkind = PG_OBJECT_TABLE;
					ctas->is_select_into = false;
					ctas->if_not_exists = true;
					/* cram additional flags into the PGIntoClause */
					(yyvsp[-3].into)->rel->relpersistence = (yyvsp[-8].ival);
					(yyvsp[-3].into)->skipData = !((yyvsp[0].boolean));
					(yyval.node) = (PGNode *) ctas;
				}
#line 23532 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1172:
#line 41 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 23538 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1173:
#line 42 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    { (yyval.boolean) = false; }
#line 23544 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1174:
#line 43 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    { (yyval.boolean) = true; }
#line 23550 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1175:
#line 49 "third_party/libpg_query/grammar/statements/create_as.y" /* yacc.c:1646  */
    {
					(yyval.into) = makeNode(PGIntoClause);
					(yyval.into)->rel = (yyvsp[-3].range);
					(yyval.into)->colNames = (yyvsp[-2].list);
					(yyval.into)->options = (yyvsp[-1].list);
					(yyval.into)->onCommit = (yyvsp[0].oncommit);
					(yyval.into)->viewQuery = NULL;
					(yyval.into)->skipData = false;		/* might get changed later */
				}
#line 23564 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1176:
#line 8 "third_party/libpg_query/grammar/statements/load.y" /* yacc.c:1646  */
    {
					PGLoadStmt *n = makeNode(PGLoadStmt);
					n->filename = (yyvsp[0].str);
					(yyval.node) = (PGNode *)n;
				}
#line 23574 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1177:
#line 16 "third_party/libpg_query/grammar/statements/load.y" /* yacc.c:1646  */
    { (yyval.str) = (yyvsp[0].str); }
#line 23580 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1178:
#line 10 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-3].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23594 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1179:
#line 20 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    {
					PGCreateSeqStmt *n = makeNode(PGCreateSeqStmt);
					(yyvsp[-1].range)->relpersistence = (yyvsp[-6].ival);
					n->sequence = (yyvsp[-1].range);
					n->options = (yyvsp[0].list);
					n->ownerId = InvalidOid;
					n->if_not_exists = true;
					(yyval.node) = (PGNode *)n;
				}
#line 23608 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1180:
#line 32 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = (yyvsp[0].list); }
#line 23614 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1181:
#line 33 "third_party/libpg_query/grammar/statements/create_sequence.y" /* yacc.c:1646  */
    { (yyval.list) = NIL; }
#line 23620 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1182:
#line 10 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23634 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1183:
#line 20 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23648 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1184:
#line 30 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->missing_ok = true;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23662 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1185:
#line 40 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-2].objtype);
					n->missing_ok = false;
					n->objects = (yyvsp[-1].list);
					n->behavior = (yyvsp[0].dbehavior);
					n->concurrent = false;
					(yyval.node) = (PGNode *)n;
				}
#line 23676 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1186:
#line 50 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-4].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = false;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23690 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1187:
#line 60 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    {
					PGDropStmt *n = makeNode(PGDropStmt);
					n->removeType = (yyvsp[-6].objtype);
					n->objects = list_make1(lappend((yyvsp[-1].list), makeString((yyvsp[-3].str))));
					n->behavior = (yyvsp[0].dbehavior);
					n->missing_ok = true;
					n->concurrent = false;
					(yyval.node) = (PGNode *) n;
				}
#line 23704 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1188:
#line 73 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TABLE; }
#line 23710 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1189:
#line 74 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_SEQUENCE; }
#line 23716 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1190:
#line 75 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23722 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1191:
#line 76 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FUNCTION; }
#line 23728 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1192:
#line 77 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_VIEW; }
#line 23734 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1193:
#line 78 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_MATVIEW; }
#line 23740 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1194:
#line 79 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_INDEX; }
#line 23746 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1195:
#line 80 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FOREIGN_TABLE; }
#line 23752 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1196:
#line 81 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_COLLATION; }
#line 23758 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1197:
#line 82 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_CONVERSION; }
#line 23764 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1198:
#line 83 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_STATISTIC_EXT; }
#line 23770 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1199:
#line 84 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSPARSER; }
#line 23776 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1200:
#line 85 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSDICTIONARY; }
#line 23782 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1201:
#line 86 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSTEMPLATE; }
#line 23788 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1202:
#line 87 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TSCONFIGURATION; }
#line 23794 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1203:
#line 92 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_ACCESS_METHOD; }
#line 23800 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1204:
#line 93 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_EVENT_TRIGGER; }
#line 23806 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1205:
#line 94 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_EXTENSION; }
#line 23812 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1206:
#line 95 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FDW; }
#line 23818 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1207:
#line 96 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_PUBLICATION; }
#line 23824 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1208:
#line 97 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_SCHEMA; }
#line 23830 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1209:
#line 98 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_FOREIGN_SERVER; }
#line 23836 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1210:
#line 103 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.list) = list_make1((yyvsp[0].list)); }
#line 23842 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1211:
#line 104 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.list) = lappend((yyvsp[-2].list), (yyvsp[0].list)); }
#line 23848 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1212:
#line 109 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.dbehavior) = PG_DROP_CASCADE; }
#line 23854 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1213:
#line 110 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.dbehavior) = PG_DROP_RESTRICT; }
#line 23860 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1214:
#line 111 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.dbehavior) = PG_DROP_RESTRICT; /* default */ }
#line 23866 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1215:
#line 116 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_POLICY; }
#line 23872 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1216:
#line 117 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_RULE; }
#line 23878 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;

  case 1217:
#line 118 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1646  */
    { (yyval.objtype) = PG_OBJECT_TRIGGER; }
#line 23884 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
    break;


#line 23888 "third_party/libpg_query/grammar/grammar_out.cpp" /* yacc.c:1646  */
      default: break;
    }
  /* User semantic actions sometimes alter yychar, and that requires
     that yytoken be updated with the new translation.  We take the
     approach of translating immediately before every use of yytoken.
     One alternative is translating here after every semantic action,
     but that translation would be missed if the semantic action invokes
     YYABORT, YYACCEPT, or YYERROR immediately after altering yychar or
     if it invokes YYBACKUP.  In the case of YYABORT or YYACCEPT, an
     incorrect destructor might then be invoked immediately.  In the
     case of YYERROR or YYBACKUP, subsequent parser actions might lead
     to an incorrect destructor call or verbose syntax error message
     before the lookahead is translated.  */
  YY_SYMBOL_PRINT ("-> $$ =", yyr1[yyn], &yyval, &yyloc);

  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);

  *++yyvsp = yyval;
  *++yylsp = yyloc;

  /* Now 'shift' the result of the reduction.  Determine what state
     that goes to, based on the state we popped back to and the rule
     number reduced by.  */

  yyn = yyr1[yyn];

  yystate = yypgoto[yyn - YYNTOKENS] + *yyssp;
  if (0 <= yystate && yystate <= YYLAST && yycheck[yystate] == *yyssp)
    yystate = yytable[yystate];
  else
    yystate = yydefgoto[yyn - YYNTOKENS];

  goto yynewstate;


/*--------------------------------------.
| yyerrlab -- here on detecting error.  |
`--------------------------------------*/
yyerrlab:
  /* Make sure we have latest lookahead translation.  See comments at
     user semantic actions for why this is necessary.  */
  yytoken = yychar == YYEMPTY ? YYEMPTY : YYTRANSLATE (yychar);

  /* If not already recovering from an error, report this error.  */
  if (!yyerrstatus)
    {
      ++yynerrs;
#if ! YYERROR_VERBOSE
      yyerror (&yylloc, yyscanner, YY_("syntax error"));
#else
# define YYSYNTAX_ERROR yysyntax_error (&yymsg_alloc, &yymsg, \
                                        yyssp, yytoken)
      {
        char const *yymsgp = YY_("syntax error");
        int yysyntax_error_status;
        yysyntax_error_status = YYSYNTAX_ERROR;
        if (yysyntax_error_status == 0)
          yymsgp = yymsg;
        else if (yysyntax_error_status == 1)
          {
            if (yymsg != yymsgbuf)
              YYSTACK_FREE (yymsg);
            yymsg = (char *) YYSTACK_ALLOC (yymsg_alloc);
            if (!yymsg)
              {
                yymsg = yymsgbuf;
                yymsg_alloc = sizeof yymsgbuf;
                yysyntax_error_status = 2;
              }
            else
              {
                yysyntax_error_status = YYSYNTAX_ERROR;
                yymsgp = yymsg;
              }
          }
        yyerror (&yylloc, yyscanner, yymsgp);
        if (yysyntax_error_status == 2)
          goto yyexhaustedlab;
      }
# undef YYSYNTAX_ERROR
#endif
    }

  yyerror_range[1] = yylloc;

  if (yyerrstatus == 3)
    {
      /* If just tried and failed to reuse lookahead token after an
         error, discard it.  */

      if (yychar <= YYEOF)
        {
          /* Return failure if at end of input.  */
          if (yychar == YYEOF)
            YYABORT;
        }
      else
        {
          yydestruct ("Error: discarding",
                      yytoken, &yylval, &yylloc, yyscanner);
          yychar = YYEMPTY;
        }
    }

  /* Else will try to reuse lookahead token after shifting the error
     token.  */
  goto yyerrlab1;


/*---------------------------------------------------.
| yyerrorlab -- error raised explicitly by YYERROR.  |
`---------------------------------------------------*/
yyerrorlab:

  /* Pacify compilers like GCC when the user code never invokes
     YYERROR and the label yyerrorlab therefore never appears in user
     code.  */
  if (/*CONSTCOND*/ 0)
     goto yyerrorlab;

  yyerror_range[1] = yylsp[1-yylen];
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYERROR.  */
  YYPOPSTACK (yylen);
  yylen = 0;
  YY_STACK_PRINT (yyss, yyssp);
  yystate = *yyssp;
  goto yyerrlab1;


/*-------------------------------------------------------------.
| yyerrlab1 -- common code for both syntax error and YYERROR.  |
`-------------------------------------------------------------*/
yyerrlab1:
  yyerrstatus = 3;      /* Each real token shifted decrements this.  */

  for (;;)
    {
      yyn = yypact[yystate];
      if (!yypact_value_is_default (yyn))
        {
          yyn += YYTERROR;
          if (0 <= yyn && yyn <= YYLAST && yycheck[yyn] == YYTERROR)
            {
              yyn = yytable[yyn];
              if (0 < yyn)
                break;
            }
        }

      /* Pop the current state because it cannot handle the error token.  */
      if (yyssp == yyss)
        YYABORT;

      yyerror_range[1] = *yylsp;
      yydestruct ("Error: popping",
                  yystos[yystate], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
      yystate = *yyssp;
      YY_STACK_PRINT (yyss, yyssp);
    }

  YY_IGNORE_MAYBE_UNINITIALIZED_BEGIN
  *++yyvsp = yylval;
  YY_IGNORE_MAYBE_UNINITIALIZED_END

  yyerror_range[2] = yylloc;
  /* Using YYLLOC is tempting, but would change the location of
     the lookahead.  YYLOC is available though.  */
  YYLLOC_DEFAULT (yyloc, yyerror_range, 2);
  *++yylsp = yyloc;

  /* Shift the error token.  */
  YY_SYMBOL_PRINT ("Shifting", yystos[yyn], yyvsp, yylsp);

  yystate = yyn;
  goto yynewstate;


/*-------------------------------------.
| yyacceptlab -- YYACCEPT comes here.  |
`-------------------------------------*/
yyacceptlab:
  yyresult = 0;
  goto yyreturn;

/*-----------------------------------.
| yyabortlab -- YYABORT comes here.  |
`-----------------------------------*/
yyabortlab:
  yyresult = 1;
  goto yyreturn;

#if !defined yyoverflow || YYERROR_VERBOSE
/*-------------------------------------------------.
| yyexhaustedlab -- memory exhaustion comes here.  |
`-------------------------------------------------*/
yyexhaustedlab:
  yyerror (&yylloc, yyscanner, YY_("memory exhausted"));
  yyresult = 2;
  /* Fall through.  */
#endif

yyreturn:
  if (yychar != YYEMPTY)
    {
      /* Make sure we have latest lookahead translation.  See comments at
         user semantic actions for why this is necessary.  */
      yytoken = YYTRANSLATE (yychar);
      yydestruct ("Cleanup: discarding lookahead",
                  yytoken, &yylval, &yylloc, yyscanner);
    }
  /* Do not reclaim the symbols of the rule whose action triggered
     this YYABORT or YYACCEPT.  */
  YYPOPSTACK (yylen);
  YY_STACK_PRINT (yyss, yyssp);
  while (yyssp != yyss)
    {
      yydestruct ("Cleanup: popping",
                  yystos[*yyssp], yyvsp, yylsp, yyscanner);
      YYPOPSTACK (1);
    }
#ifndef yyoverflow
  if (yyss != yyssa)
    YYSTACK_FREE (yyss);
#endif
#if YYERROR_VERBOSE
  if (yymsg != yymsgbuf)
    YYSTACK_FREE (yymsg);
#endif
  return yyresult;
}
#line 131 "third_party/libpg_query/grammar/statements/drop.y" /* yacc.c:1906  */


#line 1 "third_party/libpg_query/grammar/grammar.cpp"
/*
 * The signature of this function is required by bison.  However, we
 * ignore the passed yylloc and instead use the last token position
 * available from the scanner.
 */
static void
base_yyerror(YYLTYPE *yylloc, core_yyscan_t yyscanner, const char *msg)
{
	parser_yyerror(msg);
}

static PGRawStmt *
makeRawStmt(PGNode *stmt, int stmt_location)
{
	PGRawStmt    *rs = makeNode(PGRawStmt);

	rs->stmt = stmt;
	rs->stmt_location = stmt_location;
	rs->stmt_len = 0;			/* might get changed later */
	return rs;
}

/* Adjust a PGRawStmt to reflect that it doesn't run to the end of the string */
static void
updateRawStmtEnd(PGRawStmt *rs, int end_location)
{
	/*
	 * If we already set the length, don't change it.  This is for situations
	 * like "select foo ;; select bar" where the same statement will be last
	 * in the string for more than one semicolon.
	 */
	if (rs->stmt_len > 0)
		return;

	/* OK, update length of PGRawStmt */
	rs->stmt_len = end_location - rs->stmt_location;
}

static PGNode *
makeColumnRef(char *colname, PGList *indirection,
			  int location, core_yyscan_t yyscanner)
{
	/*
	 * Generate a PGColumnRef node, with an PGAIndirection node added if there
	 * is any subscripting in the specified indirection list.  However,
	 * any field selection at the start of the indirection list must be
	 * transposed into the "fields" part of the PGColumnRef node.
	 */
	PGColumnRef  *c = makeNode(PGColumnRef);
	int		nfields = 0;
	PGListCell *l;

	c->location = location;
	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAIndices))
		{
			PGAIndirection *i = makeNode(PGAIndirection);

			if (nfields == 0)
			{
				/* easy case - all indirection goes to PGAIndirection */
				c->fields = list_make1(makeString(colname));
				i->indirection = check_indirection(indirection, yyscanner);
			}
			else
			{
				/* got to split the list in two */
				i->indirection = check_indirection(list_copy_tail(indirection,
																  nfields),
												   yyscanner);
				indirection = list_truncate(indirection, nfields);
				c->fields = lcons(makeString(colname), indirection);
			}
			i->arg = (PGNode *) c;
			return (PGNode *) i;
		}
		else if (IsA(lfirst(l), PGAStar))
		{
			/* We only allow '*' at the end of a PGColumnRef */
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
		nfields++;
	}
	/* No subscripting, so all indirection gets added to field list */
	c->fields = lcons(makeString(colname), indirection);
	return (PGNode *) c;
}

static PGNode *
makeTypeCast(PGNode *arg, PGTypeName *tpname, int trycast, int location)
{
	PGTypeCast *n = makeNode(PGTypeCast);
	n->arg = arg;
	n->typeName = tpname;
	n->tryCast = trycast;
	n->location = location;
	return (PGNode *) n;
}

static PGNode *
makeStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeStringConstCast(char *str, int location, PGTypeName *tpname)
{
	PGNode *s = makeStringConst(str, location);

	return makeTypeCast(s, tpname, 0, -1);
}

static PGNode *
makeIntervalNode(char *str, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGString;
	n->sval = str;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;

}

static PGNode *
makeIntervalNode(int val, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGInteger;
	n->ival = val;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeIntervalNode(PGNode *arg, int location, PGList *typmods) {
	PGIntervalConstant *n = makeNode(PGIntervalConstant);

	n->val_type = T_PGAExpr;
	n->eval = arg;
	n->location = location;
	n->typmods = typmods;

	return (PGNode *)n;
}

static PGNode *
makeSampleSize(PGValue *sample_size, bool is_percentage) {
	PGSampleSize *n = makeNode(PGSampleSize);

	n->sample_size = *sample_size;
	n->is_percentage = is_percentage;

	return (PGNode *)n;
}

static PGNode *
makeSampleOptions(PGNode *sample_size, char *method, int seed, int location) {
	PGSampleOptions *n = makeNode(PGSampleOptions);

	n->sample_size = sample_size;
	n->method = method;
	n->seed = seed;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeIntConst(int val, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGInteger;
	n->val.val.ival = val;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeFloatConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGFloat;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeBitStringConst(char *str, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGBitString;
	n->val.val.str = str;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeNullAConst(int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGNull;
	n->location = location;

	return (PGNode *)n;
}

static PGNode *
makeAConst(PGValue *v, int location)
{
	PGNode *n;

	switch (v->type)
	{
		case T_PGFloat:
			n = makeFloatConst(v->val.str, location);
			break;

		case T_PGInteger:
			n = makeIntConst(v->val.ival, location);
			break;

		case T_PGString:
		default:
			n = makeStringConst(v->val.str, location);
			break;
	}

	return n;
}

/* makeBoolAConst()
 * Create an PGAConst string node and put it inside a boolean cast.
 */
static PGNode *
makeBoolAConst(bool state, int location)
{
	PGAConst *n = makeNode(PGAConst);

	n->val.type = T_PGString;
	n->val.val.str = (state ? (char*) "t" : (char*) "f");
	n->location = location;

	return makeTypeCast((PGNode *)n, SystemTypeName("bool"), 0, -1);
}

/* check_qualified_name --- check the result of qualified_name production
 *
 * It's easiest to let the grammar production for qualified_name allow
 * subscripts and '*', which we then must reject here.
 */
static void
check_qualified_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
}

/* check_func_name --- check the result of func_name production
 *
 * It's easiest to let the grammar production for func_name allow subscripts
 * and '*', which we then must reject here.
 */
static PGList *
check_func_name(PGList *names, core_yyscan_t yyscanner)
{
	PGListCell   *i;

	foreach(i, names)
	{
		if (!IsA(lfirst(i), PGString))
			parser_yyerror("syntax error");
	}
	return names;
}

/* check_indirection --- check the result of indirection production
 *
 * We only allow '*' at the end of the list, but it's hard to enforce that
 * in the grammar, so do it here.
 */
static PGList *
check_indirection(PGList *indirection, core_yyscan_t yyscanner)
{
	PGListCell *l;

	foreach(l, indirection)
	{
		if (IsA(lfirst(l), PGAStar))
		{
			if (lnext(l) != NULL)
				parser_yyerror("improper use of \"*\"");
		}
	}
	return indirection;
}

/* makeParamRef
 * Creates a new PGParamRef node
 */
static PGNode* makeParamRef(int number, int location)
{
	PGParamRef *p = makeNode(PGParamRef);
	p->number = number;
	p->location = location;
	return (PGNode *) p;
}


/* insertSelectOptions()
 * Insert ORDER BY, etc into an already-constructed SelectStmt.
 *
 * This routine is just to avoid duplicating code in PGSelectStmt productions.
 */
static void
insertSelectOptions(PGSelectStmt *stmt,
					PGList *sortClause, PGList *lockingClause,
					PGNode *limitOffset, PGNode *limitCount,
					PGWithClause *withClause,
					core_yyscan_t yyscanner)
{
	Assert(IsA(stmt, PGSelectStmt));

	/*
	 * Tests here are to reject constructs like
	 *	(SELECT foo ORDER BY bar) ORDER BY baz
	 */
	if (sortClause)
	{
		if (stmt->sortClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple ORDER BY clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) sortClause))));
		stmt->sortClause = sortClause;
	}
	/* We can handle multiple locking clauses, though */
	stmt->lockingClause = list_concat(stmt->lockingClause, lockingClause);
	if (limitOffset)
	{
		if (stmt->limitOffset)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple OFFSET clauses not allowed"),
					 parser_errposition(exprLocation(limitOffset))));
		stmt->limitOffset = limitOffset;
	}
	if (limitCount)
	{
		if (stmt->limitCount)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple LIMIT clauses not allowed"),
					 parser_errposition(exprLocation(limitCount))));
		stmt->limitCount = limitCount;
	}
	if (withClause)
	{
		if (stmt->withClause)
			ereport(ERROR,
					(errcode(PG_ERRCODE_SYNTAX_ERROR),
					 errmsg("multiple WITH clauses not allowed"),
					 parser_errposition(exprLocation((PGNode *) withClause))));
		stmt->withClause = withClause;
	}
}

static PGNode *
makeSetOp(PGSetOperation op, bool all, PGNode *larg, PGNode *rarg)
{
	PGSelectStmt *n = makeNode(PGSelectStmt);

	n->op = op;
	n->all = all;
	n->larg = (PGSelectStmt *) larg;
	n->rarg = (PGSelectStmt *) rarg;
	return (PGNode *) n;
}

/* SystemFuncName()
 * Build a properly-qualified reference to a built-in function.
 */
PGList *
SystemFuncName(const char *name)
{
	return list_make2(makeString(DEFAULT_SCHEMA), makeString(name));
}

/* SystemTypeName()
 * Build a properly-qualified reference to a built-in type.
 *
 * typmod is defaulted, but may be changed afterwards by caller.
 * Likewise for the location.
 */
PGTypeName *
SystemTypeName(const char *name)
{
	return makeTypeNameFromNameList(list_make2(makeString(DEFAULT_SCHEMA),
											   makeString(name)));
}

/* doNegate()
 * Handle negation of a numeric constant.
 *
 * Formerly, we did this here because the optimizer couldn't cope with
 * indexquals that looked like "var = -4" --- it wants "var = const"
 * and a unary minus operator applied to a constant didn't qualify.
 * As of Postgres 7.0, that problem doesn't exist anymore because there
 * is a constant-subexpression simplifier in the optimizer.  However,
 * there's still a good reason for doing this here, which is that we can
 * postpone committing to a particular internal representation for simple
 * negative constants.	It's better to leave "-123.456" in string form
 * until we know what the desired type is.
 */
static PGNode *
doNegate(PGNode *n, int location)
{
	if (IsA(n, PGAConst))
	{
		PGAConst *con = (PGAConst *)n;

		/* report the constant's location as that of the '-' sign */
		con->location = location;

		if (con->val.type == T_PGInteger)
		{
			con->val.val.ival = -con->val.val.ival;
			return n;
		}
		if (con->val.type == T_PGFloat)
		{
			doNegateFloat(&con->val);
			return n;
		}
	}

	return (PGNode *) makeSimpleAExpr(PG_AEXPR_OP, "-", NULL, n, location);
}

static void
doNegateFloat(PGValue *v)
{
	char   *oldval = v->val.str;

	Assert(IsA(v, PGFloat));
	if (*oldval == '+')
		oldval++;
	if (*oldval == '-')
		v->val.str = oldval+1;	/* just strip the '-' */
	else
		v->val.str = psprintf("-%s", oldval);
}

static PGNode *
makeAndExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a AND b AND c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_AND_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_AND_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeOrExpr(PGNode *lexpr, PGNode *rexpr, int location)
{
	PGNode	   *lexp = lexpr;

	/* Look through AEXPR_PAREN nodes so they don't affect flattening */
	while (IsA(lexp, PGAExpr) &&
		   ((PGAExpr *) lexp)->kind == AEXPR_PAREN)
		lexp = ((PGAExpr *) lexp)->lexpr;
	/* Flatten "a OR b OR c ..." to a single PGBoolExpr on sight */
	if (IsA(lexp, PGBoolExpr))
	{
		PGBoolExpr *blexpr = (PGBoolExpr *) lexp;

		if (blexpr->boolop == PG_OR_EXPR)
		{
			blexpr->args = lappend(blexpr->args, rexpr);
			return (PGNode *) blexpr;
		}
	}
	return (PGNode *) makeBoolExpr(PG_OR_EXPR, list_make2(lexpr, rexpr), location);
}

static PGNode *
makeNotExpr(PGNode *expr, int location)
{
	return (PGNode *) makeBoolExpr(PG_NOT_EXPR, list_make1(expr), location);
}

static PGNode *
makeSQLValueFunction(PGSQLValueFunctionOp op, int32_t typmod, int location)
{
	PGSQLValueFunction *svf = makeNode(PGSQLValueFunction);

	svf->op = op;
	/* svf->type will be filled during parse analysis */
	svf->typmod = typmod;
	svf->location = location;
	return (PGNode *) svf;
}

/* Separate PGConstraint nodes from COLLATE clauses in a */
static void
SplitColQualList(PGList *qualList,
				 PGList **constraintList, PGCollateClause **collClause,
				 core_yyscan_t yyscanner)
{
	PGListCell   *cell;
	PGListCell   *prev;
	PGListCell   *next;

	*collClause = NULL;
	prev = NULL;
	for (cell = list_head(qualList); cell; cell = next)
	{
		PGNode   *n = (PGNode *) lfirst(cell);

		next = lnext(cell);
		if (IsA(n, PGConstraint))
		{
			/* keep it in list */
			prev = cell;
			continue;
		}
		if (IsA(n, PGCollateClause))
		{
			PGCollateClause *c = (PGCollateClause *) n;

			if (*collClause)
				ereport(ERROR,
						(errcode(PG_ERRCODE_SYNTAX_ERROR),
						 errmsg("multiple COLLATE clauses not allowed"),
						 parser_errposition(c->location)));
			*collClause = c;
		}
		else
			elog(ERROR, "unexpected node type %d", (int) n->type);
		/* remove non-Constraint nodes from qualList */
		qualList = list_delete_cell(qualList, cell, prev);
	}
	*constraintList = qualList;
}

/*
 * Process result of ConstraintAttributeSpec, and set appropriate bool flags
 * in the output command node.  Pass NULL for any flags the particular
 * command doesn't support.
 */
static void
processCASbits(int cas_bits, int location, const char *constrType,
			   bool *deferrable, bool *initdeferred, bool *not_valid,
			   bool *no_inherit, core_yyscan_t yyscanner)
{
	/* defaults */
	if (deferrable)
		*deferrable = false;
	if (initdeferred)
		*initdeferred = false;
	if (not_valid)
		*not_valid = false;

	if (cas_bits & (CAS_DEFERRABLE | CAS_INITIALLY_DEFERRED))
	{
		if (deferrable)
			*deferrable = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_INITIALLY_DEFERRED)
	{
		if (initdeferred)
			*initdeferred = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked DEFERRABLE",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NOT_VALID)
	{
		if (not_valid)
			*not_valid = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NOT VALID",
							constrType),
					 parser_errposition(location)));
	}

	if (cas_bits & CAS_NO_INHERIT)
	{
		if (no_inherit)
			*no_inherit = true;
		else
			ereport(ERROR,
					(errcode(PG_ERRCODE_FEATURE_NOT_SUPPORTED),
					 /* translator: %s is CHECK, UNIQUE, or similar */
					 errmsg("%s constraints cannot be marked NO INHERIT",
							constrType),
					 parser_errposition(location)));
	}
}

/*----------
 * Recursive view transformation
 *
 * Convert
 *
 *     CREATE RECURSIVE VIEW relname (aliases) AS query
 *
 * to
 *
 *     CREATE VIEW relname (aliases) AS
 *         WITH RECURSIVE relname (aliases) AS (query)
 *         SELECT aliases FROM relname
 *
 * Actually, just the WITH ... part, which is then inserted into the original
 * view as the query.
 * ----------
 */
static PGNode *
makeRecursiveViewSelect(char *relname, PGList *aliases, PGNode *query)
{
	PGSelectStmt *s = makeNode(PGSelectStmt);
	PGWithClause *w = makeNode(PGWithClause);
	PGCommonTableExpr *cte = makeNode(PGCommonTableExpr);
	PGList	   *tl = NIL;
	PGListCell   *lc;

	/* create common table expression */
	cte->ctename = relname;
	cte->aliascolnames = aliases;
	cte->ctequery = query;
	cte->location = -1;

	/* create WITH clause and attach CTE */
	w->recursive = true;
	w->ctes = list_make1(cte);
	w->location = -1;

	/* create target list for the new SELECT from the alias list of the
	 * recursive view specification */
	foreach (lc, aliases)
	{
		PGResTarget *rt = makeNode(PGResTarget);

		rt->name = NULL;
		rt->indirection = NIL;
		rt->val = makeColumnRef(strVal(lfirst(lc)), NIL, -1, 0);
		rt->location = -1;

		tl = lappend(tl, rt);
	}

	/* create new SELECT combining WITH clause, target list, and fake FROM
	 * clause */
	s->withClause = w;
	s->targetList = tl;
	s->fromClause = list_make1(makeRangeVar(NULL, relname, -1));

	return (PGNode *) s;
}

/* parser_init()
 * Initialize to parse one query string
 */
void
parser_init(base_yy_extra_type *yyext)
{
	yyext->parsetree = NIL;		/* in case grammar forgets to set it */
}

#undef yyparse
#undef yylex
#undef yyerror
#undef yylval
#undef yychar
#undef yydebug
#undef yynerrs
#undef yylloc

} // namespace duckdb_libpgquery
