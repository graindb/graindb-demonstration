# this script generates headers for the LDBC dbgen
import os

csv_dir = 'test/sql/copy'


def get_csv_text(fpath, add_null_terminator=False):
    with open(fpath, 'rb') as f:
        text = bytearray(f.read())
    result_text = ""
    first = True
    for byte in text:
        if first:
            result_text += str(byte)
        else:
            result_text += ", " + str(byte)
        first = False
    if add_null_terminator:
        result_text += ", 0"
    return result_text


def write_csv(csv_dir, fname):
    result_text = get_csv_text(os.path.join(csv_dir, fname))
    fname = fname.replace(".csv", "").replace("-", "_")
    return "const uint8_t " + fname + '[] = {' + result_text + '};\n'


def write_binary(csv_dir, fname):
    result_text = get_csv_text(os.path.join(csv_dir, fname))
    fname = fname.split(".")[0].replace("-", "_")
    return "const uint8_t " + fname + '[] = {' + result_text + '};\n'


def create_csv_header(csv_dir):
    result = """/* THIS FILE WAS AUTOMATICALLY GENERATED BY generate_csv_header.py */

#pragma once

"""
    for fname in os.listdir(csv_dir):
        if fname.endswith(".csv"):
            result += write_csv(csv_dir, fname)
        elif fname.endswith(".csv.gz"):
            result += write_binary(csv_dir, fname)

    print(os.path.join(csv_dir, 'test_csv_header.hpp'))
    with open(os.path.join(csv_dir, 'test_csv_header.hpp'), 'w+') as f:
        f.write(result)


# create_csv_header(csv_dir)

ldbc_dir = 'third_party/ldbc'
ldbc_queries_sf1 = os.path.join(ldbc_dir, 'queries', 'sf1')
ldbc_queries_sf10 = os.path.join(ldbc_dir, 'queries', 'sf10')
ldbc_queries_sf30 = os.path.join(ldbc_dir, 'queries', 'sf30')
ldbc_queries_micro = os.path.join(ldbc_dir, 'queries', 'micro')
ldbc_light_queries_sf1 = os.path.join(ldbc_dir, 'queries', 'light', 'sf1')
ldbc_light_queries_sf10 = os.path.join(ldbc_dir, 'queries', 'light', 'sf10')
ldbc_light_queries_sf30 = os.path.join(ldbc_dir, 'queries', 'light', 'sf30')
ldbc_answers_sf1 = os.path.join(ldbc_dir, 'answers', 'sf1')
ldbc_answers_sf10 = os.path.join(ldbc_dir, 'answers', 'sf10')
ldbc_answers_sf30 = os.path.join(ldbc_dir, 'answers', 'sf30')
ldbc_header = os.path.join(ldbc_dir, 'include', 'ldbc_constants.hpp')


def write_dir(dirname, varname):
    files = os.listdir(dirname)
    files.sort()
    result = ""
    aggregated_result = "const char *%s[] = { \n" % (varname,)
    for fname in files:
        file_varname = "%s_%s" % (varname, fname.split('.')[0])
        result += "const uint8_t %s[] = {" % (file_varname,) + get_csv_text(os.path.join(dirname, fname), True) + "};\n"
        aggregated_result += "\t(const char*) %s,\n" % (file_varname,)
    aggregated_result = aggregated_result[:-2] + "\n};\n"
    return result + aggregated_result


def create_ldbc_header(ldbc_dir):
    result = """/* THIS FILE WAS AUTOMATICALLY GENERATED BY generate_ldbc_header.py */

#pragma once

const int LDBC_TABLE_COUNT = 18;
const char *LDBC_TABLE_NAMES[] = {
    "comment",
    "post",
    "forum",
    "organisation",
    "person",
    "place",
    "tagclass",
    "tag",
    "forum_person",
    "forum_tag",
    "person_tag",
    "knows",
    "likes_comment",
    "likes_post",
    "person_university",
    "person_company",
    "comment_tag",
    "post_tag"
};

const char *LDBC_TABLE_DDL[] = {
    "create table comment (c_id bigint primary key, id bigint not null, vid varchar, c_creationdate bigint not null, c_locationip varchar not null, c_browserused int not null, c_content text not null, c_length int not null, c_creatorid bigint, c_locationid bigint, c_replyof_post bigint, c_replyof_comment bigint );",
    "create table post (ps_id bigint primary key, id bigint not null, vid varchar, ps_imagefile varchar, ps_creationdate bigint not null, ps_locationip varchar not null, ps_browserused int not null, ps_language varchar, ps_content text, ps_length int not null, ps_creatorid bigint, ps_forumid bigint, ps_locationid bigint );",
    "create table forum (f_forumid bigint primary key, id bigint not null, vid varchar, f_title varchar not null, f_creationdate bigint not null, f_moderatorid bigint );",
    "create table organisation (o_organisationid bigint primary key, id bigint not null, vid varchar, o_type int not null, o_name varchar not null, o_url varchar not null, o_placeid bigint );",
    "create table person (p_personid bigint primary key, id bigint not null, vid varchar, p_firstname varchar not null, p_lastname varchar not null, p_gender int not null, p_birthday varchar not null, p_creationdate bigint not null, p_locationip varchar not null, p_browserused int not null, p_placeid bigint );",
    "create table place (pl_placeid bigint primary key, id bigint not null, vid varchar, pl_name varchar not null, pl_url varchar not null, pl_type int not null, pl_containerplaceid bigint );",
    "create table tagclass (tc_tagclassid bigint primary key, id bigint not null, vid varchar, tc_name varchar not null, tc_url varchar not null, tc_subclassoftagclassid bigint );",
    "create table tag (t_tagid bigint primary key, id bigint not null, vid varchar, t_name varchar not null, t_url varchar not null, t_tagclassid bigint not null );",
    "create table forum_person (fp_forumid bigint not null, fp_personid bigint not null, fp_joindate bigint not null );",
    "create table forum_tag (ft_forumid bigint not null, ft_tagid bigint not null );",
    "create table person_tag (pt_personid bigint not null, pt_tagid bigint not null );",
    "create table knows (k_person1id bigint not null, k_person2id bigint not null, k_creationdate bigint not null );",
    "create table likes_comment (l_personid bigint not null, l_messageid bigint not null, l_creationdate  bigint not null );",
    "create table likes_post (l_personid bigint not null, l_messageid bigint not null, l_creationdate  bigint not null );",
    "create table person_university (pu_personid bigint not null, pu_organisationid bigint not null, pu_classyear int not null );",
    "create table person_company (pc_personid bigint not null, pc_organisationid bigint not null, pc_workfrom int not null );",
    "create table comment_tag (mt_messageid bigint not null, mt_tagid bigint not null );",
    "create table post_tag (mt_messageid bigint not null, mt_tagid bigint not null );"
	};

const char *LDBC_INDEX[] = {
    "create index person_id on person(id);",
    "create index person_firstname on person(p_firstname);",
    "create index place_name on place(pl_name);",
    "create index comment_id on comment(id);"
    "create index tagclass_tcname on tagclass(tc_name);",
    "create index tag_name on tag(t_name);",
    "create index forum_id on forum(f_forumid)"
};

const char *LDBC_RAIS[] = {
    "CREATE PKFK RAI orgIsLocatedIn ON organisation (FROM o_placeid REFERENCES place.pl_placeid, TO o_placeid REFERENCES place.pl_placeid);",
    "CREATE PKFK RAI commentHasCreator ON comment (FROM c_creatorid REFERENCES person.p_personid, TO c_creatorid REFERENCES person.p_personid);",
    "CREATE PKFK RAI postHasCreator ON post (FROM ps_creatorid REFERENCES person.p_personid, TO ps_creatorid REFERENCES person.p_personid);",
    "CREATE PKFK RAI commentIsLocatedIn ON comment (FROM c_locationid REFERENCES place.pl_placeid, TO c_locationid REFERENCES place.pl_placeid);",
    "CREATE PKFK RAI postIsLocatedIn ON post (FROM ps_locationid REFERENCES place.pl_placeid, TO ps_locationid REFERENCES place.pl_placeid);",
    "CREATE PKFK RAI replyOfComment ON comment (FROM c_replyof_comment REFERENCES comment.c_id, TO c_replyof_comment REFERENCES comment.c_id);",
    "CREATE PKFK RAI replyOfPost ON comment (FROM c_replyof_post REFERENCES post.ps_id, TO c_replyof_post REFERENCES post.ps_id);",
    "CREATE PKFK RAI personIsLocatedIn ON person (FROM p_placeid REFERENCES place.pl_placeid, TO p_placeid REFERENCES place.pl_placeid);",
    "CREATE PKFK RAI postIsPublishedIn ON post (FROM ps_forumid REFERENCES forum.f_forumid, TO ps_forumid REFERENCES forum.f_forumid);",
    "CREATE PKFK RAI forumHasModerator ON forum (FROM f_moderatorid REFERENCES person.p_personid, TO f_moderatorid REFERENCES person.p_personid);",
    "CREATE UNDIRECTED RAI per_frm ON forum_person (FROM fp_personid REFERENCES person.p_personid, TO fp_forumid REFERENCES forum.f_forumid);",
    "CREATE UNDIRECTED RAI tag_frm ON forum_tag (FROM ft_forumid REFERENCES forum.f_forumid, TO ft_tagid REFERENCES tag.t_tagid);",
    "CREATE UNDIRECTED RAI tag_per ON person_tag (FROM pt_personid REFERENCES person.p_personid, TO pt_tagid REFERENCES tag.t_tagid);",
    "CREATE SELF RAI knows_r ON knows (FROM k_person1id REFERENCES person.p_personid, TO k_person2id REFERENCES person.p_personid);",
    "CREATE UNDIRECTED RAI likes_comment_r ON likes_comment (FROM l_personid REFERENCES person.p_personid, TO l_messageid REFERENCES comment.c_id);",
    "CREATE UNDIRECTED RAI likes_post_r ON likes_post (FROM l_personid REFERENCES person.p_personid, TO l_messageid REFERENCES post.ps_id);",
    "CREATE UNDIRECTED RAI tag_comment ON comment_tag (FROM mt_messageid REFERENCES comment.c_id, TO mt_tagid REFERENCES tag.t_tagid);",
    "CREATE UNDIRECTED RAI tag_post ON post_tag (FROM mt_messageid REFERENCES post.ps_id, TO mt_tagid REFERENCES tag.t_tagid);",
    "CREATE UNDIRECTED RAI cmg_per ON person_company (FROM pc_personid REFERENCES person.p_personid, TO pc_organisationid REFERENCES organisation.o_organisationid);",
    "CREATE UNDIRECTED RAI unive_per ON person_university (FROM pu_organisationid REFERENCES organisation.o_organisationid, TO pu_personid REFERENCES person.p_personid);"
};

const int LDBC_QUERIES_COUNT = 46;
const int LDBC_LIGHT_QUERIES_COUNT = 40;
const int LDBC_MICRO_QUERIES_COUNT = 38;

"""
    # write the queries
    result += write_dir(ldbc_queries_sf1, "LDBC_QUERIES_SF1")
    result += write_dir(ldbc_queries_sf10, "LDBC_QUERIES_SF10")
    result += write_dir(ldbc_queries_sf30, "LDBC_QUERIES_SF30")
    result += write_dir(ldbc_queries_micro, "LDBC_QUERIES_MICRO")
    result += write_dir(ldbc_light_queries_sf1, "LDBC_LIGHT_QUERIES_SF1")
    result += write_dir(ldbc_light_queries_sf10, "LDBC_LIGHT_QUERIES_SF10")
    result += write_dir(ldbc_light_queries_sf30, "LDBC_LIGHT_QUERIES_SF30")
    result += write_dir(ldbc_answers_sf1, "LDBC_ANSWERS_SF1")

    with open(ldbc_header, 'w+') as f:
        f.write(result)


print(ldbc_header)
create_ldbc_header(ldbc_dir)
