# this script generates the csv headers for the copy into test and the TPC-H dbgen
import os


def get_csv_text(fpath, add_null_terminator=False):
    with open(fpath, 'rb') as f:
        text = bytearray(f.read())
    result_text = ""
    first = True
    for byte in text:
        if first:
            result_text += str(byte)
        else:
            result_text += ", " + str(byte)
        first = False
    if add_null_terminator:
        result_text += ", 0"
    return result_text


def write_csv(csv_dir, fname):
    result_text = get_csv_text(os.path.join(csv_dir, fname))
    fname = fname.replace(".csv", "").replace("-", "_")
    return "const uint8_t " + fname + '[] = {' + result_text + '};\n'


def write_binary(csv_dir, fname):
    result_text = get_csv_text(os.path.join(csv_dir, fname))
    fname = fname.split(".")[0].replace("-", "_")
    return "const uint8_t " + fname + '[] = {' + result_text + '};\n'


def create_csv_header(csv_dir):
    result = """/* THIS FILE WAS AUTOMATICALLY GENERATED BY generate_csv_header.py */

#pragma once

"""
    for fname in os.listdir(csv_dir):
        if fname.endswith(".csv"):
            result += write_csv(csv_dir, fname)
        elif fname.endswith(".csv.gz"):
            result += write_binary(csv_dir, fname)

    print(os.path.join(csv_dir, 'test_csv_header.hpp'))
    with open(os.path.join(csv_dir, 'test_csv_header.hpp'), 'w+') as f:
        f.write(result)


# create_csv_header(csv_dir)

imdb_dir = 'third_party/imdb'
imdb_113_queries = os.path.join(imdb_dir, "queries", "113")
imdb_new_queries = os.path.join(imdb_dir, "queries", "new")
imdb_answers = os.path.join(imdb_dir, 'answers')
imdb_header = os.path.join(imdb_dir, 'include', 'imdb_constants.hpp')


def write_dir(dirname, varname):
    files = os.listdir(dirname)
    files.sort()
    result = ""
    aggregated_result = "const char *%s[] = {\n" % (varname,)
    for fname in files:
        file_varname = "%s_%s" % (varname, fname.split('.')[0])
        result += "const uint8_t %s[] = {" % (file_varname,) + get_csv_text(os.path.join(dirname, fname), True) + "};\n"
        aggregated_result += "\t(const char*) %s,\n" % (file_varname,)
    aggregated_result = aggregated_result[:-2] + "\n};\n"
    return result + aggregated_result


def create_imdb_header(imdb_dir):
    result = """\n\n/* THIS PART WAS AUTOMATICALLY GENERATED BY generate_imdb_header.py */

#pragma once

const int IMDB_113_QUERIES_COUNT = 130;
const int IMDB_NEW_QUERIES_COUNT = 33;
const int IMDB_QUERY_GROUP[113] = {1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 3, 4, 4, 4, 5, 5, 5, 6, 6, 6, 6, 6, 6, 7, 7, 7, 8, 8, 8, 8, 9, 9, 9, 9, 10, 10, 10, 11, 11, 11, 11, 12, 12, 12, 13, 13, 13, 13, 14, 14, 14, 15, 15, 15, 15, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 18, 18, 18, 19, 19, 19, 19, 20, 20, 20, 21, 21, 21, 22, 22, 22, 22, 23, 23, 23, 24, 24, 25, 25, 25, 26, 26, 26, 27, 27, 27, 28, 28, 28, 29, 29, 29, 30, 30, 30, 31, 31, 31, 32, 32, 33, 33, 33};

const int IMDB_TABLE_COUNT = 21;

const char *IMDB_TABLE_NAMES[] = {
	"aka_name", "aka_title", "cast_info", "char_name", "comp_cast_type", "company_name", "company_type", "complete_cast", "info_type", "keyword", "kind_type", "link_type", "movie_companies", "movie_info", "movie_info_idx", "movie_keyword", "movie_link", "name", "person_info", "role_type", "title"
};

const char *IMDB_TABLE_DDL[] = {
	"CREATE TABLE aka_name ( id integer NOT NULL PRIMARY KEY, person_id integer NOT NULL, name text NOT NULL, imdb_index character varying(12), name_pcode_cf character varying(5), name_pcode_nf character varying(5), surname_pcode character varying(5), md5sum character varying(32) );",
	"CREATE TABLE aka_title ( id integer NOT NULL PRIMARY KEY, movie_id integer NOT NULL, title text NOT NULL, imdb_index character varying(12), kind_id integer NOT NULL, production_year integer, phonetic_code character varying(5), episode_of_id integer, season_nr integer, episode_nr integer, note text, md5sum character varying(32) );",
	"CREATE TABLE cast_info ( id integer NOT NULL PRIMARY KEY, person_id integer NOT NULL, movie_id integer NOT NULL, person_role_id integer, note text, nr_order integer, role_id integer NOT NULL );",
	"CREATE TABLE char_name ( id integer NOT NULL PRIMARY KEY, name text NOT NULL, imdb_index character varying(12), imdb_id integer, name_pcode_nf character varying(5), surname_pcode character varying(5), md5sum character varying(32) );",
	"CREATE TABLE comp_cast_type ( id integer NOT NULL PRIMARY KEY, kind character varying(32) NOT NULL );",
	"CREATE TABLE company_name ( id integer NOT NULL PRIMARY KEY, name text NOT NULL, country_code character varying(255), imdb_id integer, name_pcode_nf character varying(5), name_pcode_sf character varying(5), md5sum character varying(32) );",
	"CREATE TABLE company_type ( id integer NOT NULL PRIMARY KEY, kind character varying(32) NOT NULL );",
	"CREATE TABLE complete_cast ( id integer NOT NULL PRIMARY KEY, movie_id integer, subject_id integer NOT NULL, status_id integer NOT NULL );",
	"CREATE TABLE info_type ( id integer NOT NULL PRIMARY KEY, info character varying(32) NOT NULL );",
	"CREATE TABLE keyword ( id integer NOT NULL PRIMARY KEY, keyword text NOT NULL, phonetic_code character varying(5) );",
	"CREATE TABLE kind_type ( id integer NOT NULL PRIMARY KEY, kind character varying(15) NOT NULL );",
	"CREATE TABLE link_type ( id integer NOT NULL PRIMARY KEY, link character varying(32) NOT NULL );",
	"CREATE TABLE movie_companies ( id integer NOT NULL PRIMARY KEY, movie_id integer NOT NULL, company_id integer NOT NULL, company_type_id integer NOT NULL, note text );",
	"CREATE TABLE movie_info ( id integer NOT NULL PRIMARY KEY, movie_id integer NOT NULL, info_type_id integer NOT NULL, info text NOT NULL, note text );",
	"CREATE TABLE movie_info_idx ( id integer NOT NULL PRIMARY KEY, movie_id integer NOT NULL, info_type_id integer NOT NULL, info text NOT NULL, note text );",
	"CREATE TABLE movie_keyword ( id integer NOT NULL PRIMARY KEY, movie_id integer NOT NULL, keyword_id integer NOT NULL );",
	"CREATE TABLE movie_link ( id integer NOT NULL PRIMARY KEY, movie_id integer NOT NULL, linked_movie_id integer NOT NULL, link_type_id integer NOT NULL );",
	"CREATE TABLE name ( id integer NOT NULL PRIMARY KEY, name text NOT NULL, imdb_index character varying(12), imdb_id integer, gender character varying(1), name_pcode_cf character varying(5), name_pcode_nf character varying(5), surname_pcode character varying(5), md5sum character varying(32) );",
	"CREATE TABLE person_info ( id integer NOT NULL PRIMARY KEY, person_id integer NOT NULL, info_type_id integer NOT NULL, info text NOT NULL, note text );",
	"CREATE TABLE role_type ( id integer NOT NULL PRIMARY KEY, role character varying(32) NOT NULL );",
	"CREATE TABLE title ( id integer NOT NULL PRIMARY KEY, title text NOT NULL, imdb_index character varying(12), kind_id integer NOT NULL, production_year integer, imdb_id integer, phonetic_code character varying(5), episode_of_id integer, season_nr integer, episode_nr integer, series_years character varying(49), md5sum character varying(32) );"
};

const char *IMDB_RAIS[] = {
	"CREATE UNDIRECTED RAI it_midx_t ON movie_info_idx (FROM info_type_id REFERENCES info_type.id, TO movie_id REFERENCES title.id);",
	"CREATE UNDIRECTED RAI cn_mc_t ON movie_companies (FROM company_id REFERENCES company_name.id, TO movie_id REFERENCES title.id);",
	"CREATE UNDIRECTED RAI k_mk_t ON movie_keyword (FROM keyword_id REFERENCES keyword.id, TO movie_id REFERENCES title.id);",
	"CREATE UNDIRECTED RAI it_mi_t ON movie_info (FROM info_type_id REFERENCES info_type.id, TO movie_id REFERENCES title.id);",
	"CREATE UNDIRECTED RAI lt_ml_t ON movie_link (FROM link_type_id REFERENCES link_type.id, TO movie_id REFERENCES title.id);",
	"CREATE UNDIRECTED RAI it_pi_n ON person_info (FROM info_type_id REFERENCES info_type.id, TO person_id REFERENCES name.id);",
	"CREATE UNDIRECTED RAI t_ci_n ON cast_info (FROM movie_id REFERENCES title.id, TO person_id REFERENCES name.id);",
	"CREATE UNDIRECTED RAI rt_ci_n ON cast_info (FROM role_id REFERENCES role_type.id, TO person_id REFERENCES name.id);",
	"CREATE UNDIRECTED RAI rt_ci_t ON cast_info (FROM role_id REFERENCES role_type.id, TO movie_id REFERENCES title.id);",
	"CREATE UNDIRECTED RAI cct_cc_t_subject ON complete_cast (FROM subject_id REFERENCES comp_cast_type.id, TO movie_id REFERENCES title.id);",
	"CREATE UNDIRECTED RAI cct_cc_t_status ON complete_cast (FROM status_id REFERENCES comp_cast_type.id, TO movie_id REFERENCES title.id);",
	"CREATE PKFK RAI n_an ON aka_name (FROM person_id REFERENCES name.id, TO person_id REFERENCES name.id);",
	"CREATE PKFK RAI kt_t ON title (FROM kind_id REFERENCES kind_type.id, TO kind_id REFERENCES kind_type.id);",
	"CREATE PKFK RAI at_t ON aka_title (FROM movie_id REFERENCES aka_title.id, TO movie_id REFERENCES aka_title.id);",
	"CREATE PKFK RAI chn_ci ON cast_info (FROM person_role_id REFERENCES char_name.id, TO person_role_id REFERENCES char_name.id);"
};

"""
    # write the queries
    result += write_dir(imdb_113_queries, "IMDB_113_QUERIES")
    result += "\n\n"
    result += write_dir(imdb_new_queries, "IMDB_NEW_QUERIES")
    result += "\n\n"
    result += write_dir(imdb_answers, "IMDB_ANSWERS")

    with open(imdb_header, 'w+') as f:
        f.write(result)


print(imdb_header)
create_imdb_header(imdb_dir)
